// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:1

package parser

import __yyfmt__ "fmt"

//line parser.go.y:3

import (
	"project/external/anko/ast"
)

//line parser.go.y:49
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt
	stmt_select         ast.Stmt
	stmt_select_cases   ast.Stmt
	stmt_select_case    ast.Stmt
	stmt_select_default ast.Stmt

	exprs                []ast.Expr
	expr                 ast.Expr
	expr_idents          []string
	type_data            *ast.TypeStruct
	type_data_struct     *ast.TypeStruct
	slice_count          int
	expr_member_or_ident ast.Expr
	expr_member          *ast.MemberExpr
	expr_ident           *ast.IdentExpr
	expr_literals        ast.Expr
	expr_map             *ast.MapExpr
	expr_slice           ast.Expr
	expr_chan            ast.Expr
	expr_unary           ast.Expr
	expr_binary          ast.Expr
	expr_lets            ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const SHIFTLEFT = 57384
const SHIFTRIGHT = 57385
const SWITCH = 57386
const SELECT = 57387
const CASE = 57388
const DEFAULT = 57389
const GO = 57390
const DEFER = 57391
const CHAN = 57392
const STRUCT = 57393
const MAKE = 57394
const OPCHAN = 57395
const EQOPCHAN = 57396
const TYPE = 57397
const LEN = 57398
const DELETE = 57399
const CLOSE = 57400
const MAP = 57401
const IMPORT = 57402
const UNARY = 57403

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"STRUCT",
	"MAKE",
	"OPCHAN",
	"EQOPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"IMPORT",
	"','",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1177

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	54, 71,
	61, 71,
	62, 71,
	80, 5,
	-2, 1,
	-1, 25,
	61, 72,
	-2, 31,
	-1, 29,
	16, 109,
	-2, 71,
	-1, 70,
	54, 71,
	61, 71,
	62, 71,
	-2, 5,
	-1, 125,
	16, 110,
	61, 110,
	-2, 126,
	-1, 130,
	4, 121,
	50, 121,
	51, 121,
	59, 121,
	-2, 83,
	-1, 279,
	63, 5,
	-2, 71,
	-1, 283,
	77, 195,
	82, 195,
	-2, 187,
	-1, 304,
	77, 195,
	-2, 187,
	-1, 308,
	1, 74,
	8, 74,
	46, 74,
	47, 74,
	54, 74,
	61, 74,
	62, 74,
	63, 74,
	77, 74,
	79, 74,
	80, 74,
	82, 74,
	85, 74,
	-2, 124,
	-1, 312,
	1, 17,
	46, 17,
	47, 17,
	63, 17,
	77, 17,
	80, 17,
	85, 17,
	-2, 88,
	-1, 314,
	1, 19,
	46, 19,
	47, 19,
	63, 19,
	77, 19,
	80, 19,
	85, 19,
	-2, 90,
	-1, 316,
	1, 21,
	46, 21,
	47, 21,
	63, 21,
	77, 21,
	80, 21,
	85, 21,
	-2, 88,
	-1, 318,
	1, 23,
	46, 23,
	47, 23,
	63, 23,
	77, 23,
	80, 23,
	85, 23,
	-2, 90,
	-1, 347,
	46, 61,
	47, 61,
	77, 61,
	-2, 182,
	-1, 353,
	77, 193,
	82, 193,
	-2, 188,
	-1, 373,
	1, 16,
	46, 16,
	47, 16,
	63, 16,
	77, 16,
	80, 16,
	85, 16,
	-2, 87,
	-1, 374,
	1, 18,
	46, 18,
	47, 18,
	63, 18,
	77, 18,
	80, 18,
	85, 18,
	-2, 89,
	-1, 375,
	1, 20,
	46, 20,
	47, 20,
	63, 20,
	77, 20,
	80, 20,
	85, 20,
	-2, 87,
	-1, 376,
	1, 22,
	46, 22,
	47, 22,
	63, 22,
	77, 22,
	80, 22,
	85, 22,
	-2, 89,
}

const yyPrivate = 57344

const yyLast = 4239

var yyAct = [...]int{
	74, 284, 36, 25, 8, 241, 340, 276, 9, 7,
	341, 39, 304, 277, 223, 75, 72, 133, 79, 81,
	343, 342, 5, 407, 283, 356, 223, 8, 121, 119,
	122, 126, 130, 279, 278, 8, 8, 416, 141, 136,
	52, 302, 223, 222, 223, 297, 354, 8, 8, 223,
	223, 299, 229, 148, 73, 157, 1, 143, 149, 8,
	140, 158, 159, 160, 161, 162, 226, 219, 215, 298,
	403, 25, 8, 223, 376, 375, 374, 373, 359, 163,
	151, 72, 350, 170, 171, 323, 174, 175, 176, 177,
	89, 179, 181, 90, 183, 92, 142, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	168, 352, 166, 91, 214, 6, 317, 129, 147, 134,
	178, 71, 146, 220, 165, 145, 144, 83, 136, 136,
	82, 136, 72, 479, 232, 234, 235, 94, 95, 136,
	136, 242, 136, 224, 225, 245, 227, 218, 134, 478,
	474, 132, 469, 468, 236, 237, 466, 240, 459, 458,
	315, 132, 221, 256, 211, 138, 139, 208, 313, 155,
	238, 263, 454, 231, 137, 89, 311, 453, 90, 290,
	92, 452, 351, 450, 244, 371, 135, 318, 441, 440,
	475, 128, 172, 436, 138, 139, 140, 249, 250, 251,
	252, 266, 431, 137, 270, 281, 273, 427, 425, 72,
	424, 247, 259, 155, 423, 135, 420, 415, 397, 136,
	257, 155, 220, 383, 294, 140, 368, 331, 328, 155,
	242, 316, 155, 303, 288, 301, 209, 307, 282, 314,
	321, 150, 91, 132, 309, 319, 265, 312, 308, 322,
	291, 248, 473, 324, 264, 173, 439, 372, 211, 268,
	418, 402, 335, 337, 132, 155, 94, 95, 105, 106,
	25, 132, 401, 346, 306, 349, 280, 131, 348, 345,
	399, 228, 164, 260, 360, 72, 127, 77, 394, 155,
	364, 434, 347, 366, 154, 136, 370, 102, 103, 104,
	107, 155, 153, 210, 89, 211, 243, 90, 155, 92,
	367, 365, 343, 342, 279, 278, 332, 355, 381, 472,
	467, 310, 10, 84, 461, 358, 330, 132, 300, 390,
	287, 152, 132, 182, 395, 76, 393, 285, 132, 4,
	392, 2, 65, 70, 132, 69, 66, 404, 211, 136,
	67, 136, 124, 72, 411, 68, 414, 285, 50, 49,
	417, 48, 47, 46, 405, 33, 408, 378, 53, 217,
	32, 421, 357, 275, 396, 24, 382, 339, 23, 22,
	384, 385, 21, 387, 27, 209, 26, 3, 0, 0,
	239, 132, 0, 0, 398, 0, 400, 246, 0, 353,
	0, 443, 0, 0, 445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 419,
	353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 428, 429, 0, 242, 465,
	0, 432, 0, 464, 0, 0, 435, 0, 437, 438,
	209, 0, 209, 267, 136, 132, 471, 0, 274, 0,
	0, 0, 0, 0, 286, 449, 0, 0, 0, 470,
	289, 285, 0, 132, 0, 0, 0, 455, 0, 0,
	456, 457, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	476, 0, 477, 132, 0, 246, 0, 0, 0, 0,
	0, 0, 132, 0, 38, 55, 56, 0, 0, 34,
	13, 51, 14, 28, 0, 29, 369, 0, 0, 0,
	0, 0, 0, 42, 57, 58, 59, 0, 15, 16,
	0, 0, 0, 0, 0, 0, 0, 0, 11, 12,
	0, 0, 0, 0, 30, 31, 0, 0, 17, 18,
	285, 391, 43, 60, 0, 0, 40, 19, 20, 44,
	41, 0, 0, 0, 0, 0, 0, 0, 54, 406,
	62, 64, 0, 0, 63, 0, 45, 0, 37, 0,
	0, 35, 0, 0, 61, 91, 111, 112, 116, 114,
	118, 117, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 96, 97, 99, 100, 101, 98, 0, 0, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 93, 86, 0, 0, 0, 0, 447, 0,
	0, 85, 0, 87, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 212, 0, 89, 0, 0,
	90, 0, 92, 91, 111, 112, 116, 114, 118, 117,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 96,
	97, 99, 100, 101, 98, 0, 0, 94, 95, 105,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 413, 0,
	0, 87, 113, 115, 108, 109, 110, 0, 102, 103,
	104, 107, 0, 0, 0, 89, 412, 0, 90, 0,
	92, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 410, 87,
	113, 115, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 0, 0, 89, 0, 0, 90, 409, 92, 91,
	111, 112, 116, 114, 118, 117, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 96, 97, 99, 100, 101,
	98, 0, 0, 94, 95, 105, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 0,
	0, 89, 0, 0, 90, 379, 92, 91, 111, 112,
	116, 114, 118, 117, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 96, 97, 99, 100, 101, 98, 0,
	0, 94, 95, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 87, 113, 115, 108, 109,
	110, 0, 102, 103, 104, 107, 0, 0, 0, 89,
	0, 0, 90, 362, 92, 91, 111, 112, 116, 114,
	118, 117, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 96, 97, 99, 100, 101, 98, 0, 0, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 327, 87, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 0, 0, 89, 0, 0,
	90, 326, 92, 91, 111, 112, 116, 114, 118, 117,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 96,
	97, 99, 100, 101, 98, 0, 0, 94, 95, 105,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 87, 113, 115, 108, 109, 110, 0, 102, 103,
	104, 107, 0, 0, 0, 89, 0, 0, 90, 292,
	92, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 87,
	113, 115, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 0, 0, 89, 0, 0, 90, 261, 92, 91,
	111, 112, 116, 114, 118, 117, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 96, 97, 99, 100, 101,
	98, 0, 0, 94, 95, 105, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 0,
	0, 89, 253, 0, 90, 0, 92, 91, 111, 112,
	116, 114, 118, 117, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 96, 97, 99, 100, 101, 98, 0,
	0, 94, 95, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 86, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 87, 113, 115, 108, 109,
	110, 0, 102, 103, 104, 107, 0, 0, 0, 89,
	0, 0, 90, 0, 92, 91, 111, 112, 116, 114,
	118, 117, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 96, 97, 99, 100, 101, 98, 0, 0, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 0, 0, 89, 463, 0,
	90, 0, 92, 91, 111, 112, 116, 114, 118, 117,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 96,
	97, 99, 100, 101, 98, 0, 0, 94, 95, 105,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 113, 115, 108, 109, 110, 0, 102, 103,
	104, 107, 0, 0, 0, 89, 0, 0, 90, 462,
	92, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	113, 115, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 0, 0, 89, 0, 0, 90, 451, 92, 91,
	111, 112, 116, 114, 118, 117, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 96, 97, 99, 100, 101,
	98, 0, 0, 94, 95, 105, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 448, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 0,
	0, 89, 0, 0, 90, 0, 92, 91, 111, 112,
	116, 114, 118, 117, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 96, 97, 99, 100, 101, 98, 0,
	0, 94, 95, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 113, 115, 108, 109,
	110, 0, 102, 103, 104, 107, 0, 0, 0, 89,
	446, 0, 90, 0, 92, 91, 111, 112, 116, 114,
	118, 117, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 96, 97, 99, 100, 101, 98, 0, 0, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 0, 0, 89, 0, 0,
	90, 444, 92, 91, 111, 112, 116, 114, 118, 117,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 96,
	97, 99, 100, 101, 98, 0, 0, 94, 95, 105,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	433, 87, 113, 115, 108, 109, 110, 0, 102, 103,
	104, 107, 0, 0, 0, 89, 0, 0, 90, 0,
	92, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	113, 115, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 430, 0, 89, 0, 0, 90, 0, 92, 91,
	111, 112, 116, 114, 118, 117, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 96, 97, 99, 100, 101,
	98, 0, 0, 94, 95, 105, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 0,
	0, 89, 0, 0, 90, 422, 92, 91, 111, 112,
	116, 114, 118, 117, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 96, 97, 99, 100, 101, 98, 0,
	0, 94, 95, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 113, 115, 108, 109,
	110, 0, 102, 103, 104, 107, 0, 388, 0, 89,
	0, 0, 90, 0, 92, 91, 111, 112, 116, 114,
	118, 117, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 96, 97, 99, 100, 101, 98, 0, 0, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 386, 0, 89, 0, 0,
	90, 0, 92, 91, 111, 112, 116, 114, 118, 117,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 96,
	97, 99, 100, 101, 98, 0, 0, 94, 95, 105,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 113, 115, 108, 109, 110, 0, 102, 103,
	104, 107, 0, 0, 0, 89, 377, 0, 90, 0,
	92, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	113, 115, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 0, 0, 89, 0, 338, 90, 0, 92, 91,
	111, 112, 116, 114, 118, 117, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 96, 97, 99, 100, 101,
	98, 0, 0, 94, 95, 105, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 333,
	0, 89, 0, 0, 90, 0, 92, 91, 111, 112,
	116, 114, 118, 117, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 96, 97, 99, 100, 101, 98, 0,
	0, 94, 95, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 113, 115, 108, 109,
	110, 0, 102, 103, 104, 107, 0, 329, 0, 89,
	0, 0, 90, 0, 92, 91, 111, 112, 116, 114,
	118, 117, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 96, 97, 99, 100, 101, 98, 0, 0, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 320, 0, 89, 0, 0,
	90, 0, 92, 91, 111, 112, 116, 114, 118, 117,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 96,
	97, 99, 100, 101, 98, 0, 0, 94, 95, 105,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	305, 87, 113, 115, 108, 109, 110, 0, 102, 103,
	104, 107, 0, 0, 0, 89, 0, 0, 90, 0,
	92, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	113, 115, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 0, 0, 89, 296, 0, 90, 0, 92, 91,
	111, 112, 116, 114, 118, 117, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 96, 97, 99, 100, 101,
	98, 0, 0, 94, 95, 105, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 0,
	0, 89, 295, 0, 90, 0, 92, 91, 111, 112,
	116, 114, 118, 117, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 96, 97, 99, 100, 101, 98, 0,
	0, 94, 95, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 113, 115, 108, 109,
	110, 0, 102, 103, 104, 107, 0, 0, 0, 89,
	0, 271, 90, 0, 92, 91, 111, 112, 116, 114,
	118, 117, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 96, 97, 99, 100, 101, 98, 0, 0, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 87, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 0, 0, 89, 0, 0,
	90, 0, 92, 91, 111, 112, 116, 114, 118, 117,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 96,
	97, 99, 100, 101, 98, 0, 0, 94, 95, 105,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 113, 115, 108, 109, 110, 0, 102, 103,
	104, 107, 0, 0, 0, 89, 255, 0, 90, 0,
	92, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	113, 115, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 0, 0, 89, 230, 0, 90, 0, 92, 91,
	111, 112, 116, 114, 118, 117, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 96, 97, 99, 100, 101,
	98, 0, 0, 94, 95, 105, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 216,
	0, 89, 0, 0, 90, 0, 92, 91, 111, 112,
	116, 114, 118, 117, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 96, 97, 99, 100, 101, 98, 0,
	0, 94, 95, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 113, 115, 108, 109,
	110, 0, 102, 103, 104, 107, 0, 207, 0, 89,
	0, 0, 90, 0, 92, 91, 111, 112, 116, 114,
	118, 117, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 96, 97, 99, 100, 101, 98, 0, 0, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 0, 0, 0, 89, 0, 0,
	90, 0, 92, 91, 111, 112, 116, 114, 118, 117,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 96,
	97, 99, 100, 101, 98, 0, 0, 94, 95, 105,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 113, 115, 108, 109, 110, 0, 102, 103,
	104, 107, 0, 0, 0, 169, 0, 0, 90, 0,
	92, 91, 111, 112, 116, 114, 118, 117, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 96, 97, 99,
	100, 101, 98, 0, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	113, 115, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 0, 0, 167, 0, 0, 90, 0, 92, 91,
	111, 112, 116, 114, 118, 117, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 105, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 113, 115,
	108, 109, 110, 0, 102, 103, 104, 107, 0, 0,
	0, 89, 0, 0, 90, 0, 92, 91, 111, 112,
	116, 114, 118, 117, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 105, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 113, 115, 108, 109,
	110, 0, 102, 103, 104, 107, 125, 55, 56, 89,
	0, 34, 90, 51, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 42, 57, 58, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 55, 56, 0, 0, 34,
	0, 0, 0, 0, 43, 60, 0, 0, 40, 0,
	0, 44, 41, 42, 57, 58, 59, 0, 0, 0,
	54, 0, 62, 64, 0, 0, 63, 0, 120, 0,
	37, 0, 123, 35, 0, 0, 61, 0, 0, 0,
	0, 0, 43, 60, 0, 0, 40, 0, 0, 44,
	41, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	62, 64, 0, 0, 63, 0, 45, 0, 37, 0,
	0, 35, 361, 0, 61, 38, 55, 56, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 42, 57, 58, 59, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 55, 56, 0, 0, 34, 0,
	0, 0, 0, 43, 60, 0, 0, 40, 0, 0,
	44, 41, 42, 57, 58, 59, 0, 0, 0, 54,
	0, 62, 64, 0, 0, 63, 0, 45, 0, 37,
	0, 0, 35, 325, 0, 61, 0, 0, 0, 0,
	0, 43, 60, 0, 0, 40, 0, 0, 44, 41,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 62,
	64, 0, 0, 63, 0, 45, 0, 37, 0, 272,
	35, 0, 0, 61, 38, 55, 56, 0, 0, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 57, 58, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 55, 56, 0, 0,
	34, 0, 43, 60, 0, 0, 40, 0, 0, 44,
	41, 0, 0, 233, 42, 57, 58, 59, 54, 0,
	62, 64, 0, 0, 63, 0, 45, 0, 37, 0,
	0, 35, 0, 0, 61, 38, 55, 56, 0, 0,
	34, 0, 0, 43, 60, 0, 0, 40, 0, 0,
	44, 41, 0, 0, 42, 57, 58, 59, 0, 54,
	0, 62, 64, 0, 0, 63, 0, 45, 0, 37,
	0, 213, 35, 0, 0, 61, 38, 55, 56, 0,
	0, 34, 0, 43, 60, 0, 0, 40, 0, 0,
	44, 41, 0, 0, 180, 42, 57, 58, 59, 54,
	0, 62, 64, 0, 0, 63, 0, 45, 0, 37,
	0, 0, 35, 0, 0, 61, 38, 55, 56, 0,
	0, 34, 0, 0, 43, 60, 0, 0, 40, 0,
	0, 44, 41, 0, 0, 42, 57, 58, 59, 0,
	54, 0, 62, 64, 0, 0, 63, 0, 45, 0,
	37, 0, 0, 35, 0, 0, 61, 38, 55, 56,
	0, 0, 34, 0, 43, 60, 0, 0, 40, 0,
	0, 44, 41, 0, 0, 0, 42, 57, 58, 59,
	54, 0, 62, 64, 0, 0, 63, 0, 389, 0,
	37, 0, 0, 35, 0, 0, 61, 38, 55, 56,
	0, 0, 34, 0, 0, 43, 60, 0, 0, 40,
	0, 0, 44, 41, 0, 0, 42, 57, 58, 59,
	0, 54, 0, 62, 64, 0, 0, 63, 0, 336,
	0, 37, 0, 0, 35, 0, 0, 61, 38, 55,
	56, 0, 0, 34, 0, 43, 60, 0, 0, 40,
	0, 0, 44, 41, 0, 0, 0, 42, 57, 58,
	59, 54, 0, 62, 64, 0, 0, 63, 0, 334,
	0, 37, 0, 0, 35, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 60, 0, 0,
	40, 0, 0, 44, 41, 91, 111, 112, 116, 114,
	0, 117, 54, 0, 62, 64, 0, 0, 63, 0,
	269, 0, 37, 0, 0, 35, 0, 0, 61, 94,
	95, 105, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 115, 108, 109, 110, 0,
	102, 103, 104, 107, 38, 156, 56, 89, 0, 34,
	90, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 57, 58, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 55, 56, 0, 0, 34, 0, 0,
	0, 0, 43, 60, 0, 0, 40, 0, 0, 44,
	41, 42, 57, 58, 59, 0, 0, 0, 54, 0,
	62, 64, 0, 0, 63, 0, 45, 0, 37, 0,
	0, 35, 0, 0, 61, 0, 0, 0, 0, 0,
	43, 60, 0, 0, 40, 0, 0, 44, 41, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 62, 64,
	0, 0, 63, 0, 45, 0, 37, 0, 0, 35,
	0, 0, 61, 78, 55, 56, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 42, 57, 58, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 111, 112, 116,
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 60, 0, 0, 40, 0, 0, 44, 41,
	94, 95, 105, 106, 0, 0, 0, 54, 0, 62,
	64, 0, 0, 63, 0, 45, 0, 37, 0, 0,
	35, 91, 0, 61, 0, 113, 115, 108, 109, 110,
	0, 102, 103, 104, 107, 0, 0, 0, 89, 0,
	0, 90, 0, 92, 0, 94, 95, 105, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 109, 110, 0, 102, 103, 104, 107,
	0, 0, 0, 89, 0, 0, 90, 0, 92,
}

var yyPact = [...]int{
	-58, -1000, 540, -58, -1000, -81, -81, -1000, -1000, -1000,
	-1000, -1000, -1000, 3692, 3692, 341, 221, 4089, 4008, 62,
	59, 319, -1000, -1000, -1000, 1221, -1000, -1000, 3692, 3332,
	3692, 220, -1000, -1000, 123, -50, 154, 3692, 18, -24,
	58, 57, 54, 50, -23, -81, -1000, -1000, -1000, -1000,
	-1000, 337, 250, -1000, 3970, -1000, -1000, -1000, -1000, -1000,
	3692, 3692, 3692, 3692, 3692, -1000, -1000, -1000, -1000, -1000,
	540, -81, -1000, 257, 2989, 2989, 216, -58, 44, 3125,
	42, 3057, 3692, 3692, 189, 3692, 3692, 3692, 3692, 3692,
	3651, 3692, 339, 3692, -1000, -1000, 3692, 3692, 3692, 3692,
	3692, 3692, 3692, 3692, 3692, 3692, 3692, 3692, 3692, 3692,
	3692, 3692, 3692, 3692, 3692, 3692, 3692, 3692, 3692, 2921,
	-58, 297, 609, 3611, -12, 18, 2853, -81, 337, -11,
	-21, 3692, -81, -33, -1000, 154, 154, -15, 154, 215,
	-30, 2785, 3692, 3570, 3692, 3692, 154, 125, -81, 154,
	3692, 254, -1000, 3692, 3692, -81, -1000, 12, 3193, 12,
	12, 12, 12, -1000, -58, 184, 3692, 3692, 3692, 3692,
	1153, 2717, 3692, -58, 2989, 2989, 2649, 3261, 214, 1085,
	3692, 107, -1000, 3193, 2989, 2989, 2989, 2989, 2989, 2989,
	107, 107, 107, 107, 107, 107, 236, 236, 236, 4155,
	4155, 4155, 4155, 4155, 4155, 4110, 3899, -58, 179, -81,
	3692, -81, -58, 3854, 2581, 3489, -81, 278, 207, 337,
	-1000, -37, -81, 336, -69, -69, 154, -69, -81, -21,
	-1000, 181, 1017, 3692, 2513, 2445, -34, -10, 334, 3692,
	-41, -49, 2377, 3692, 257, 2989, 3692, 177, 301, 178,
	170, 162, 118, -1000, 3692, -1000, 2309, 173, 3692, 6,
	-1000, -1000, 3451, 949, 161, -1000, 2241, 332, 160, -58,
	2173, 3813, 3773, 2105, 276, -13, -1000, -1000, 239, 540,
	209, 3, 113, -81, -36, -81, 3692, -1000, -57, 331,
	-1, -1000, -1000, 3370, 881, -1000, -1000, -1000, -1000, 3692,
	260, -49, 154, 159, -81, 3692, 257, 2989, -24, -1000,
	191, -2, -1000, -3, -1000, -4, -1000, -5, -1000, 2037,
	-58, -1000, 3193, -1000, 813, -1000, -1000, 3692, -1000, -58,
	-1000, -1000, 156, -58, -58, 1969, -58, 1901, 3732, -26,
	-1000, -1000, 235, 3692, 151, -1000, -1000, -58, 227, -58,
	206, 195, -9, -81, -1000, -37, 154, -38, 154, -1000,
	745, -1000, -1000, 3692, 677, 3692, 150, -39, -1000, 3692,
	2989, 194, -58, -1000, -1000, -1000, -1000, -1000, 149, -1000,
	3692, 1833, 147, -1000, 143, 141, -58, 140, -58, -58,
	1765, 135, -1000, -1000, -58, 1697, 238, -1000, -1000, -58,
	126, -58, -58, 190, 122, -69, 121, -81, -69, -1000,
	3692, 1629, -1000, 3692, 1561, -1000, -81, 1493, -58, 116,
	-1000, 1425, -1000, -1000, -1000, -1000, 114, -1000, 110, 105,
	-58, -1000, -1000, -58, -58, -1000, -1000, 92, 91, -58,
	-1000, -1000, 330, 1357, -1000, 1289, -1000, 3692, 3692, 89,
	299, -1000, -1000, -1000, -1000, 86, -1000, -1000, -1000, -1000,
	85, 154, -1000, -1000, -49, 2989, 298, 186, -1000, -1000,
	-69, 83, 124, -58, -1000, -58, 82, 66, -1000, -1000,
}

var yyPgo = [...]int{
	0, 56, 397, 8, 332, 396, 394, 392, 389, 388,
	387, 10, 6, 385, 383, 13, 7, 40, 0, 28,
	17, 382, 2, 380, 378, 11, 375, 5, 373, 372,
	371, 369, 368, 365, 360, 356, 352, 351, 349, 251,
	1, 125, 9,
}

var yyR1 = [...]int{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 5, 6, 6, 6, 6, 7,
	7, 7, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 13, 14, 14, 14, 14, 14, 15,
	16, 16, 9, 10, 10, 10, 10, 10, 11, 11,
	12, 17, 17, 17, 17, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 19,
	19, 19, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 22, 22, 23, 23, 24, 25, 26, 26, 26,
	26, 26, 26, 27, 27, 27, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 29, 29, 30, 30,
	30, 30, 30, 31, 31, 31, 31, 32, 32, 32,
	32, 32, 32, 32, 32, 36, 36, 36, 36, 36,
	36, 35, 35, 35, 34, 34, 34, 34, 34, 34,
	33, 33, 37, 37, 38, 38, 38, 39, 39, 41,
	41, 42, 40, 40, 40, 40,
}

var yyR2 = [...]int{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 13, 12, 9, 8, 6, 5, 6, 5,
	6, 5, 6, 5, 4, 6, 4, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 3, 3, 3, 5,
	7, 5, 4, 7, 5, 6, 7, 7, 8, 7,
	8, 8, 9, 6, 0, 1, 1, 2, 2, 4,
	3, 2, 7, 0, 1, 1, 2, 2, 4, 4,
	3, 0, 1, 4, 4, 1, 1, 5, 3, 7,
	8, 8, 9, 2, 5, 7, 3, 5, 4, 5,
	4, 4, 4, 4, 4, 4, 4, 6, 8, 7,
	3, 6, 10, 5, 1, 1, 1, 1, 1, 0,
	1, 4, 1, 3, 2, 2, 5, 2, 6, 2,
	5, 2, 3, 1, 1, 3, 1, 2, 1, 1,
	1, 1, 1, 0, 3, 6, 6, 5, 5, 7,
	8, 6, 5, 5, 7, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 2, 1, 1, 0, 1, 1,
	2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int{
	-1000, -1, -37, -2, -38, 80, -41, -42, 85, -3,
	-4, 38, 39, 10, 12, 28, 29, 48, 49, 57,
	58, -7, -8, -9, -13, -18, -5, -6, 13, 15,
	44, 45, -23, -26, 9, 81, -22, 78, 4, -25,
	56, 60, 23, 52, 59, 76, -28, -29, -30, -31,
	-32, 11, -17, -24, 68, 5, 6, 24, 25, 26,
	53, 84, 70, 74, 71, -36, -35, -34, -33, -37,
	-38, -41, -42, -17, -18, -18, 4, 76, 4, -18,
	4, -18, 78, 78, 14, 62, 54, 64, 27, 78,
	81, 16, 83, 53, 40, 41, 32, 33, 37, 34,
	35, 36, 71, 72, 73, 42, 43, 74, 67, 68,
	69, 17, 18, 65, 20, 66, 19, 22, 21, -18,
	76, -19, -18, 80, -4, 4, -18, 76, 78, 4,
	82, -39, -41, -20, 4, 71, -22, 59, 50, 51,
	81, -18, 78, 81, 78, 78, 78, 78, 76, 81,
	-39, -19, 4, 62, 54, 61, 5, -18, -18, -18,
	-18, -18, -18, -3, 76, -1, 78, 78, 78, 78,
	-18, -18, 13, 76, -18, -18, -18, -18, -17, -18,
	63, -18, 4, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, 76, -1, -41,
	16, 61, 76, 80, -18, 80, 76, -39, -19, 78,
	-22, -17, 76, 83, -20, -20, 81, -20, 76, 82,
	79, -17, -18, 63, -18, -18, -20, -20, 55, -39,
	-20, -27, -18, 62, -17, -18, -39, -1, 77, -17,
	-17, -17, -17, 79, 61, 79, -18, -1, 63, 8,
	79, 82, 63, -18, -1, 77, -18, -39, -1, 76,
	-18, 80, 80, -18, -39, -14, -16, -15, 47, 46,
	79, 8, -19, 61, -40, -41, -39, 4, -20, -39,
	8, 79, 82, 63, -18, 79, 79, 79, 79, 61,
	4, -27, 82, -40, 61, 63, -17, -18, -25, 77,
	30, 8, 79, 8, 79, 8, 79, 8, 79, -18,
	76, 77, -18, 79, -18, 82, 82, 63, 77, 76,
	4, 77, -1, 76, 76, -18, 76, -18, 80, -10,
	-12, -11, 47, 46, -39, -15, -16, 63, -3, 76,
	79, 79, 8, -41, 82, -17, 82, -21, 4, 79,
	-18, 82, 82, 63, -18, 61, -40, -20, 77, -39,
	-18, 4, 76, 79, 79, 79, 79, 79, -1, 82,
	63, -18, -1, 77, -1, -1, 76, -1, 76, 76,
	-18, -39, -11, -12, 63, -18, -17, 77, -1, 63,
	-1, 76, 76, 79, -40, -20, -39, 61, -20, 82,
	63, -18, 79, 61, -18, 77, 76, -18, 76, -1,
	77, -18, 82, 77, 77, 77, -1, 77, -1, -1,
	76, 77, -1, 63, 63, -1, 77, -1, -1, 76,
	77, 77, -39, -18, 82, -18, 79, -39, 63, -1,
	77, 82, 77, 77, 77, -1, -1, -1, 77, 77,
	-1, 4, 82, 79, -27, -18, 77, 31, 77, 77,
	-20, -40, 31, 76, 77, 76, -1, -1, 77, 77,
}

var yyDef = [...]int{
	182, -2, -2, 182, 183, 186, 185, 189, 191, 3,
	6, 7, 8, 71, 0, 0, 0, 0, 0, 0,
	0, 27, 28, 29, 30, -2, 32, 33, 0, -2,
	0, 0, 75, 76, 0, 187, 0, 0, 126, 124,
	0, 0, 0, 0, 0, 187, 104, 105, 106, 107,
	108, 109, 0, 123, 0, 128, 129, 130, 131, 132,
	0, 0, 0, 0, 0, 153, 154, 155, 156, 2,
	-2, 184, 190, 9, 72, 10, 0, 182, 126, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 157, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 72, 0, 0, -2, 0, 187, 109, 0,
	-2, 71, 188, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 187, 0,
	133, 0, 110, 71, 0, 187, 127, 148, 147, 149,
	150, 151, 152, 4, 182, 0, 71, 71, 71, 71,
	0, 0, 0, 182, 35, 37, 0, 78, 0, 0,
	0, 100, 125, 146, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 182, 0, 185,
	0, 187, 182, 0, 0, 0, 187, 54, 0, 109,
	122, 192, 187, 0, 114, 115, 0, 117, 187, 121,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 192, 0, 71, 36, 38, 0, 0, 0, 0,
	0, 0, 0, 24, 0, 26, 0, 0, 0, 0,
	90, 92, 0, 0, 0, 42, 0, 0, 0, 182,
	0, 0, 0, 0, 63, 187, 55, 56, 0, -2,
	0, 0, 0, -2, 0, 194, 71, 113, 0, 0,
	0, 88, 91, 0, 0, 93, 94, 95, 96, 0,
	0, 192, 0, 0, -2, 0, 34, 73, -2, 11,
	0, 0, -2, 0, -2, 0, -2, 0, -2, 0,
	182, 41, 77, 89, 0, 142, 143, 0, 39, 182,
	111, 44, 0, 182, 182, 0, 182, 0, 0, 187,
	64, 65, 0, 71, 0, 57, 58, -2, 0, 182,
	0, 0, 0, -2, 84, 192, 0, 187, 0, 87,
	0, 137, 138, 0, 0, 0, 0, 0, 103, 0,
	134, 0, 182, -2, -2, -2, -2, 25, 0, 141,
	0, 0, 0, 45, 0, 0, 182, 0, 182, 182,
	0, 0, 66, 67, 182, 72, 0, 53, 60, 182,
	0, 182, 182, 0, 0, 116, 0, 187, 119, 136,
	0, 0, 97, 0, 0, 101, 187, 0, 182, 0,
	40, 0, 144, 43, 46, 47, 0, 49, 0, 0,
	182, 62, 70, 182, 182, 59, 79, 0, 0, 182,
	85, 118, 0, 0, 139, 0, 99, 133, 0, 0,
	15, 145, 48, 50, 51, 0, 68, 69, 80, 81,
	0, 0, 140, 98, 192, 135, 14, 0, 52, 82,
	120, 0, 0, 182, 102, 182, 0, 0, 13, 12,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	85, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 61, 68, 83, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 81, 3, 82, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 75,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

//gocyclo:ignore
func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

//gocyclo:ignore
func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:116
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:120
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:126
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:135
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:155
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:224
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:229
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:244
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:254
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:259
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:263
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:271
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:275
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:282
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:286
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:292
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:299
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:304
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:316
		{
			yyVAL.stmt_lets = &ast.ChanStmt{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:321
		{
			if len(yyDollar[1].exprs) == 2 {
				chanStmt := &ast.ChanStmt{LHS: yyDollar[1].exprs[0].(ast.Expr), OkExpr: yyDollar[1].exprs[1].(ast.Expr), RHS: yyDollar[3].expr}
				yyVAL.stmt_lets = chanStmt
				yyVAL.stmt_lets.SetPosition(chanStmt.LHS.Position())
			} else if len(yyDollar[1].exprs) < 2 {
				yylex.Error("missing expressions on left side of channel operator")
				yyVAL.stmt_lets = &ast.ChanStmt{RHS: yyDollar[3].expr}
				yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:335
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:340
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:345
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:355
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:360
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:376
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:386
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:391
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:396
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:401
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:411
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:425
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:429
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:433
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:437
		{
			selectStmt := yyDollar[1].stmt_select_cases.(*ast.SelectBodyStmt)
			selectStmt.Cases = append(selectStmt.Cases, yyDollar[2].stmt_select_case)
			yyVAL.stmt_select_cases = selectStmt
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:443
		{
			selectStmt := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if selectStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			selectStmt.Default = yyDollar[2].stmt_select_default
			yyVAL.stmt_select_cases = selectStmt
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:454
		{
			if yyDollar[2].stmt == nil {
				yylex.Error("syntax error: unexpected ':'")
			}
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:464
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:468
		{
			yyVAL.stmt_select_default = &ast.SelectCaseStmt{}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:474
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:483
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:487
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:491
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:495
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:501
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:511
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:516
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:530
		{
			yyVAL.exprs = nil
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:534
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:538
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected \",\"")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:545
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected \",\"")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:562
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:567
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:577
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 82:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:587
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:592
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:597
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:602
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:607
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:612
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:617
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:627
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:632
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:637
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:642
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:647
		{
			yyVAL.expr = &ast.ImportExpr{Name: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:652
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:662
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:667
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:672
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:677
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:682
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:687
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:693
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:699
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:704
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:709
		{
			yyVAL.expr = yyDollar[1].expr_chan
			yyVAL.expr.SetPosition(yyDollar[1].expr_chan.Position())
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:718
		{
			yyVAL.expr_idents = []string{}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:722
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:726
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected \",\"")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:735
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:739
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:748
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:757
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:767
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:771
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:780
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:786
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:790
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected \",\"")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.slice_count = 1
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:804
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:810
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_member
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:814
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:820
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:827
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:834
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:843
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:852
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:857
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:862
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:867
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:874
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:878
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:882
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected \",\"")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:892
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:896
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:904
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 140:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:908
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:912
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:916
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 144:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:924
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 145:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:928
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:934
		{
			yyVAL.expr_chan = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:938
		{
			yyVAL.expr_chan = &ast.ChanExpr{RHS: yyDollar[2].expr}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:944
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:949
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:954
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:959
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:964
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:971
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:976
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:981
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:986
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:993
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1001
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1009
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1017
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1025
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1033
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1041
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1049
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1060
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1065
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1070
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1075
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1080
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1085
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1092
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1097
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1102
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1109
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1114
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1119
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1124
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1129
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1134
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1141
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1146
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
