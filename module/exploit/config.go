package exploit

import (
	"context"
	"net"
	"net/http"
	"time"

	"project/internal/cert"
	"project/internal/dns"
	"project/internal/option"
	"project/internal/proxy"
)

// Context contains global objects and a context.
type Context struct {
	Context    context.Context
	CertPool   *cert.Pool
	ProxyPool  *proxy.Pool
	DNSClient  *dns.Client
	HTTPClient *http.Client
}

// HostConfig contains configuration about host for the most of exploit modules.
type HostConfig struct {
	RemoteHost  string              `json:"remote_host"`  // remote host IP address or domain name
	RemotePort  string              `json:"remote_port"`  // remote host port
	DialTimeout time.Duration       `json:"dial_timeout"` // dial connection timeout
	ProxyURL    string              `json:"proxy_url"`    // create a temporary proxy client
	Advanced    *HostAdvancedConfig `json:"advanced"`     // advanced configuration
}

// HostAdvancedConfig contains advanced configuration about host for most of exploit modules.
type HostAdvancedConfig struct {
	Network   string       `json:"network"`    // specifies network when RemoteHost is domain name
	LocalHost string       `json:"local_host"` // specifies local host
	LocalPort string       `json:"local_port"` // specifies local port
	ProxyTag  string       `json:"proxy_tag"`  // get proxy client from proxy pool
	DNSOpts   *dns.Options `json:"dns_opts"`   // for RemoteHost is domain name
}

// Dial is used to dial connection with configuration.
func (hc *HostConfig) Dial(ctx *Context) (net.Conn, error) {
	return nil, nil
}

// HTTPConfig contains configuration about the most of exploit modules that use http client.
type HTTPConfig struct {
	RemoteHost string              `json:"remote_host"` // remote host IP address or domain name
	RemotePort string              `json:"remote_port"` // remote host port
	TargetURI  string              `json:"target_uri"`  // must start at "/"
	EnableTLS  bool                `json:"enable_tls"`  // use https
	TLSConfig  *option.TLSConfig   `json:"tls_config"`  // tls configuration
	Timeout    time.Time           `json:"timeout"`     // timeout about http client do request
	ProxyURL   string              `json:"proxy_url"`   // create a temporary proxy client
	Advanced   *HTTPAdvancedConfig `json:"advanced"`    // advanced configuration
}

// HTTPAdvancedConfig contains advanced configuration about the most of exploit modules that use http client.
type HTTPAdvancedConfig struct {
	Network   string       `json:"network"`    // specifies network when RemoteHost is domain name
	LocalHost string       `json:"local_host"` // specifies local host
	LocalPort string       `json:"local_port"` // specifies local port
	ProxyTag  string       `json:"proxy_tag"`  // get proxy client from proxy pool
	DNSOpts   *dns.Options `json:"dns_opts"`   // for RemoteHost is domain name
	Host      string       `json:"host"`       // set host header for http server virtual host
	Header    http.Header  `json:"header"`     // set http request header
	Username  string       `json:"username"`   // username about http basic authentication
	Password  string       `json:"password"`   // password about http basic authentication
}
