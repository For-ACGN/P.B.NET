---------------------------------------------test style--------------------------------------------

most test code like this.

func TestTemplate(t *testing.T) {
	// if code with goroutine
	gm := testsuite.MarkGoroutines(t)
	defer gm.Compare()

	// var variable or resource
	server, client := net.Pipe()

	// test function
	fmt.Println(server.LocalAddr())
	fmt.Println(client.LocalAddr())

	// cleanup
	err := server.Close()
	require.NoError(t, err)

	err = client.Close()
	require.NoError(t, err)

	// check object is destroyed
	testsuite.IsDestroyed(t, server)
	testsuite.IsDestroyed(t, client)
}

---------------------------------------------code style--------------------------------------------

1.1: check require
require.NoError(t, err)                    -> require.NoError(t, conn.Close())
require.Error(t, err)                      -> require.Error(t, conn.Close())
require.EqualError(t, err, "error string") -> require.EqualError(t, conn.Close(), "str")

Goland Regex: require.NoError\(t, [a-z&&[^e]]
Goland Regex: require.Error\(t, [a-z&&[^e]]
Goland Regex: require.EqualError\(t, [a-z&&[^e]]

.Close() }()
.Close()) }()

require.Len(t, result, 0)           -> require.Empty(t, result)
require.NotEqual(t, 0, len(result)) -> require.NotEmpty(t, result)

1.2: check defer function
use testsuite.DeferForPanic() to replace these code
defer func() {
     r := recover()
     require.NotNil(t, r)
     t.Log(r)
}()

defer func() { re


1.3: use testsuite.CheckOption to check zero value in Options{}

---------------------------------------------code bug----------------------------------------------

2.1: check sync.WaitGroup
think WaitGroup is necessary
think wg.Done() location in code when with log function

wg := sync.WaitGroup{}
wg.Add(1)
go func() {
    defer wg.Done()
    defer func() {
        if r := recover(); r != nil {
            c.log(logger.Fatal, xpanic.Print(r, title))
        }
    }()
}
wg.Wait()


2.2: check sync.Mutex sync.RWMutex
must use "defer" after Lock()
mu.Lock()
defer mu.Unlock()

2.3: check defer recover() is exists in go func()
must add recover() in go functions for prevent program crash

go func() {
    defer func() {
        if r := recover(); r != nil {
            c.log(logger.Fatal, xpanic.Print(r, title))
        }
    }()
}

or add restart like project/internal/guid

defer func() {
    if r := recover(); r != nil {
        xpanic.Log(r, "Generator.generate")
        time.Sleep(time.Second)
        // restart
        g.wg.Add(1)
        go g.generate()
        return
    }
    close(g.guidQueue)
}()
