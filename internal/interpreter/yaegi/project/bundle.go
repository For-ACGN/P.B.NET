// Code generated by script/code/yaegi/project_test.go. DO NOT EDIT.

package project

import (
	"context"
	"go/constant"
	"go/token"
	"net"
	"reflect"

	"project/internal/cert"
	"project/internal/cert/certpool"
	"project/internal/compare"
	"project/internal/convert"
	"project/internal/crypto/aes"
	"project/internal/crypto/curve25519"
	"project/internal/crypto/ed25519"
	"project/internal/crypto/hmac"
	"project/internal/crypto/lsb"
	"project/internal/crypto/rand"
	"project/internal/guid"
	"project/internal/httptool"
	"project/internal/logger"
	"project/internal/module"
	"project/internal/namer"
	"project/internal/nettool"
	"project/internal/option"
	"project/internal/patch/json"
	"project/internal/patch/msgpack"
	"project/internal/patch/toml"
	"project/internal/random"
	"project/internal/security"
	"project/internal/system"
	"project/internal/task"
	"project/internal/xpanic"
	"project/internal/xreflect"
	"project/internal/xsync"
)

// Symbols stores the map of unsafe package symbols.
var Symbols = map[string]map[string]reflect.Value{}

func init() {
	init_project_internal_cert()
	init_project_internal_cert_certpool()
	init_project_internal_compare()
	init_project_internal_convert()
	init_project_internal_crypto_aes()
	init_project_internal_crypto_curve25519()
	init_project_internal_crypto_ed25519()
	init_project_internal_crypto_hmac()
	init_project_internal_crypto_lsb()
	init_project_internal_crypto_rand()
	init_project_internal_guid()
	init_project_internal_httptool()
	init_project_internal_logger()
	init_project_internal_module()
	init_project_internal_namer()
	init_project_internal_nettool()
	init_project_internal_option()
	init_project_internal_patch_json()
	init_project_internal_patch_msgpack()
	init_project_internal_patch_toml()
	init_project_internal_random()
	init_project_internal_security()
	init_project_internal_system()
	init_project_internal_task()
	init_project_internal_xpanic()
	init_project_internal_xreflect()
	init_project_internal_xsync()
}

func init_project_internal_cert() {
	Symbols["project/internal/cert"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrInvalidPEMBlock":     reflect.ValueOf(&cert.ErrInvalidPEMBlock).Elem(),
		"Fprint":                 reflect.ValueOf(cert.Fprint),
		"Generate":               reflect.ValueOf(cert.Generate),
		"GenerateCA":             reflect.ValueOf(cert.GenerateCA),
		"Match":                  reflect.ValueOf(cert.Match),
		"NewPool":                reflect.ValueOf(cert.NewPool),
		"NewPoolWithSystemCerts": reflect.ValueOf(cert.NewPoolWithSystemCerts),
		"ParseCertificate":       reflect.ValueOf(cert.ParseCertificate),
		"ParseCertificates":      reflect.ValueOf(cert.ParseCertificates),
		"ParsePrivateKey":        reflect.ValueOf(cert.ParsePrivateKey),
		"ParsePrivateKeyBytes":   reflect.ValueOf(cert.ParsePrivateKeyBytes),
		"ParsePrivateKeys":       reflect.ValueOf(cert.ParsePrivateKeys),
		"Print":                  reflect.ValueOf(cert.Print),

		// type definitions
		"Options": reflect.ValueOf((*cert.Options)(nil)),
		"Pair":    reflect.ValueOf((*cert.Pair)(nil)),
		"Pool":    reflect.ValueOf((*cert.Pool)(nil)),
		"Subject": reflect.ValueOf((*cert.Subject)(nil)),
	}
}

func init_project_internal_cert_certpool() {
	Symbols["project/internal/cert/certpool"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"LoadSystemCertsWithName": reflect.ValueOf(certpool.LoadSystemCertsWithName),
		"System":                  reflect.ValueOf(certpool.System),
	}
}

func init_project_internal_compare() {
	Symbols["project/internal/compare"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"UniqueSlice":   reflect.ValueOf(compare.UniqueSlice),
		"UniqueStrings": reflect.ValueOf(compare.UniqueStrings),

		// type definitions
		"SliceI": reflect.ValueOf((*compare.SliceI)(nil)),

		// interface wrapper definitions
		"_SliceI": reflect.ValueOf((*_project_internal_compare_SliceI)(nil)),
	}
}

// _project_internal_compare_SliceI is an interface wrapper for SliceI type
type _project_internal_compare_SliceI struct {
	WID  func(i int) string
	WLen func() int
}

func (W _project_internal_compare_SliceI) ID(i int) string { return W.WID(i) }
func (W _project_internal_compare_SliceI) Len() int        { return W.WLen() }

func init_project_internal_convert() {
	Symbols["project/internal/convert"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AbsInt64":                 reflect.ValueOf(convert.AbsInt64),
		"BEBytesToFloat32":         reflect.ValueOf(convert.BEBytesToFloat32),
		"BEBytesToFloat64":         reflect.ValueOf(convert.BEBytesToFloat64),
		"BEBytesToInt16":           reflect.ValueOf(convert.BEBytesToInt16),
		"BEBytesToInt32":           reflect.ValueOf(convert.BEBytesToInt32),
		"BEBytesToInt64":           reflect.ValueOf(convert.BEBytesToInt64),
		"BEBytesToUint16":          reflect.ValueOf(convert.BEBytesToUint16),
		"BEBytesToUint32":          reflect.ValueOf(convert.BEBytesToUint32),
		"BEBytesToUint64":          reflect.ValueOf(convert.BEBytesToUint64),
		"BEFloat32ToBytes":         reflect.ValueOf(convert.BEFloat32ToBytes),
		"BEFloat64ToBytes":         reflect.ValueOf(convert.BEFloat64ToBytes),
		"BEInt16ToBytes":           reflect.ValueOf(convert.BEInt16ToBytes),
		"BEInt32ToBytes":           reflect.ValueOf(convert.BEInt32ToBytes),
		"BEInt64ToBytes":           reflect.ValueOf(convert.BEInt64ToBytes),
		"BEUint16ToBytes":          reflect.ValueOf(convert.BEUint16ToBytes),
		"BEUint32ToBytes":          reflect.ValueOf(convert.BEUint32ToBytes),
		"BEUint64ToBytes":          reflect.ValueOf(convert.BEUint64ToBytes),
		"Byte":                     reflect.ValueOf(convert.Byte),
		"StorageUnit":              reflect.ValueOf(convert.StorageUnit),
		"DumpBytes":                reflect.ValueOf(convert.DumpBytes),
		"DumpBytesWithLineLength":  reflect.ValueOf(convert.DumpBytesWithLineLength),
		"EiB":                      reflect.ValueOf(convert.EiB),
		"FdumpBytes":               reflect.ValueOf(convert.FdumpBytes),
		"FdumpBytesWithLineLength": reflect.ValueOf(convert.FdumpBytesWithLineLength),
		"GiB":                      reflect.ValueOf(convert.GiB),
		"KiB":                      reflect.ValueOf(convert.KiB),
		"LEBytesToFloat32":         reflect.ValueOf(convert.LEBytesToFloat32),
		"LEBytesToFloat64":         reflect.ValueOf(convert.LEBytesToFloat64),
		"LEBytesToInt16":           reflect.ValueOf(convert.LEBytesToInt16),
		"LEBytesToInt32":           reflect.ValueOf(convert.LEBytesToInt32),
		"LEBytesToInt64":           reflect.ValueOf(convert.LEBytesToInt64),
		"LEBytesToUint16":          reflect.ValueOf(convert.LEBytesToUint16),
		"LEBytesToUint32":          reflect.ValueOf(convert.LEBytesToUint32),
		"LEBytesToUint64":          reflect.ValueOf(convert.LEBytesToUint64),
		"LEFloat32ToBytes":         reflect.ValueOf(convert.LEFloat32ToBytes),
		"LEFloat64ToBytes":         reflect.ValueOf(convert.LEFloat64ToBytes),
		"LEInt16ToBytes":           reflect.ValueOf(convert.LEInt16ToBytes),
		"LEInt32ToBytes":           reflect.ValueOf(convert.LEInt32ToBytes),
		"LEInt64ToBytes":           reflect.ValueOf(convert.LEInt64ToBytes),
		"LEUint16ToBytes":          reflect.ValueOf(convert.LEUint16ToBytes),
		"LEUint32ToBytes":          reflect.ValueOf(convert.LEUint32ToBytes),
		"LEUint64ToBytes":          reflect.ValueOf(convert.LEUint64ToBytes),
		"MiB":                      reflect.ValueOf(convert.MiB),
		"PiB":                      reflect.ValueOf(convert.PiB),
		"SdumpBytes":               reflect.ValueOf(convert.SdumpBytes),
		"SdumpBytesWithLineLength": reflect.ValueOf(convert.SdumpBytesWithLineLength),
		"SplitNumber":              reflect.ValueOf(convert.SplitNumber),
		"TiB":                      reflect.ValueOf(convert.TiB),
	}
}

func init_project_internal_crypto_aes() {
	Symbols["project/internal/crypto/aes"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BlockSize":             reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"CBCDecrypt":            reflect.ValueOf(aes.CBCDecrypt),
		"CBCEncrypt":            reflect.ValueOf(aes.CBCEncrypt),
		"ErrEmptyData":          reflect.ValueOf(&aes.ErrEmptyData).Elem(),
		"ErrInvalidCipherData":  reflect.ValueOf(&aes.ErrInvalidCipherData).Elem(),
		"ErrInvalidIVSize":      reflect.ValueOf(&aes.ErrInvalidIVSize).Elem(),
		"ErrInvalidPaddingSize": reflect.ValueOf(&aes.ErrInvalidPaddingSize).Elem(),
		"IVSize":                reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"Key128Bit":             reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"Key192Bit":             reflect.ValueOf(constant.MakeFromLiteral("24", token.INT, 0)),
		"Key256Bit":             reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"NewCBC":                reflect.ValueOf(aes.NewCBC),

		// type definitions
		"CBC": reflect.ValueOf((*aes.CBC)(nil)),
	}
}

func init_project_internal_crypto_curve25519() {
	Symbols["project/internal/crypto/curve25519"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"X25519Base": reflect.ValueOf(curve25519.X25519Base),
		"X25519":     reflect.ValueOf(curve25519.X25519),
		"ScalarSize": reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
	}
}

func init_project_internal_crypto_ed25519() {
	Symbols["project/internal/crypto/ed25519"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrInvalidPrivateKey": reflect.ValueOf(&ed25519.ErrInvalidPrivateKey).Elem(),
		"ErrInvalidPublicKey":  reflect.ValueOf(&ed25519.ErrInvalidPublicKey).Elem(),
		"GenerateKey":          reflect.ValueOf(ed25519.GenerateKey),
		"ImportPrivateKey":     reflect.ValueOf(ed25519.ImportPrivateKey),
		"ImportPublicKey":      reflect.ValueOf(ed25519.ImportPublicKey),
		"NewKeyFromSeed":       reflect.ValueOf(ed25519.NewKeyFromSeed),
		"PrivateKeySize":       reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"PublicKeySize":        reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"SeedSize":             reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"Sign":                 reflect.ValueOf(ed25519.Sign),
		"SignatureSize":        reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"Verify":               reflect.ValueOf(ed25519.Verify),

		// type definitions
		"PrivateKey": reflect.ValueOf((*ed25519.PrivateKey)(nil)),
		"PublicKey":  reflect.ValueOf((*ed25519.PublicKey)(nil)),
	}
}

func init_project_internal_crypto_hmac() {
	Symbols["project/internal/crypto/hmac"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Equal":        reflect.ValueOf(hmac.Equal),
		"NewGenerator": reflect.ValueOf(hmac.New),
	}
}

func init_project_internal_crypto_lsb() {
	Symbols["project/internal/crypto/lsb"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CalculateStorageSize": reflect.ValueOf(lsb.CalculateStorageSize),
		"Decrypt":              reflect.ValueOf(lsb.Decrypt),
		"DecryptFromPNG":       reflect.ValueOf(lsb.DecryptFromPNG),
		"Encrypt":              reflect.ValueOf(lsb.Encrypt),
		"EncryptToPNG":         reflect.ValueOf(lsb.EncryptToPNG),
	}
}

func init_project_internal_crypto_rand() {
	Symbols["project/internal/crypto/rand"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Reader": reflect.ValueOf(&rand.Reader).Elem(),
	}
}

func init_project_internal_guid() {
	Symbols["project/internal/guid"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewGenerator": reflect.ValueOf(guid.NewGenerator),
		"Size":         reflect.ValueOf(guid.Size),

		// type definitions
		"GUID":      reflect.ValueOf((*guid.GUID)(nil)),
		"Generator": reflect.ValueOf((*guid.Generator)(nil)),
	}
}

func init_project_internal_httptool() {
	Symbols["project/internal/httptool"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BodyLineLength":       reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"FdumpRequest":         reflect.ValueOf(httptool.FdumpRequest),
		"MaxBodyLength":        reflect.ValueOf(constant.MakeFromLiteral("1024", token.INT, 0)),
		"NewSubHTTPFileSystem": reflect.ValueOf(httptool.NewSubHTTPFileSystem),
		"SdumpRequest":         reflect.ValueOf(httptool.SdumpRequest),
	}
}

func init_project_internal_logger() {
	Symbols["project/internal/logger"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"All":                 reflect.ValueOf(logger.All),
		"Common":              reflect.ValueOf(&logger.Common).Elem(),
		"Critical":            reflect.ValueOf(logger.Critical),
		"Debug":               reflect.ValueOf(logger.Debug),
		"Discard":             reflect.ValueOf(&logger.Discard).Elem(),
		"Error":               reflect.ValueOf(logger.Error),
		"Exploit":             reflect.ValueOf(logger.Exploit),
		"Fatal":               reflect.ValueOf(logger.Fatal),
		"HijackLogWriter":     reflect.ValueOf(logger.HijackLogWriter),
		"Info":                reflect.ValueOf(logger.Info),
		"NewMultiLogger":      reflect.ValueOf(logger.NewMultiLogger),
		"NewWriterWithPrefix": reflect.ValueOf(logger.NewWriterWithPrefix),
		"Off":                 reflect.ValueOf(logger.Off),
		"ParseLevel":          reflect.ValueOf(logger.ParseLevel),
		"Prefix":              reflect.ValueOf(logger.Prefix),
		"SetErrorLogger":      reflect.ValueOf(logger.SetErrorLogger),
		"Test":                reflect.ValueOf(&logger.Test).Elem(),
		"TimeLayout":          reflect.ValueOf(constant.MakeFromLiteral("\"2006-01-02 15:04:05 Z07:00\"", token.STRING, 0)),
		"Trace":               reflect.ValueOf(logger.Trace),
		"Warning":             reflect.ValueOf(logger.Warning),
		"Wrap":                reflect.ValueOf(logger.Wrap),
		"WrapLogger":          reflect.ValueOf(logger.WrapLogger),

		// type definitions
		"Level":       reflect.ValueOf((*logger.Level)(nil)),
		"LevelSetter": reflect.ValueOf((*logger.LevelSetter)(nil)),
		"Logger":      reflect.ValueOf((*logger.Logger)(nil)),
		"multiLogger": reflect.ValueOf((*logger.multiLogger)(nil)),

		// interface wrapper definitions
		"_LevelSetter": reflect.ValueOf((*_project_internal_logger_LevelSetter)(nil)),
		"_Logger":      reflect.ValueOf((*_project_internal_logger_Logger)(nil)),
	}
}

// _project_internal_logger_LevelSetter is an interface wrapper for LevelSetter type
type _project_internal_logger_LevelSetter struct {
	WSetLevel func(lv uint8) error
}

func (W _project_internal_logger_LevelSetter) SetLevel(lv uint8) error { return W.WSetLevel(lv) }

// _project_internal_logger_Logger is an interface wrapper for Logger type
type _project_internal_logger_Logger struct {
	WPrint   func(lv uint8, src string, log ...interface{})
	WPrintf  func(lv uint8, src string, format string, log ...interface{})
	WPrintln func(lv uint8, src string, log ...interface{})
}

func (W _project_internal_logger_Logger) Print(lv uint8, src string, log ...interface{}) {
	W.WPrint(lv, src, log...)
}
func (W _project_internal_logger_Logger) Printf(lv uint8, src string, format string, log ...interface{}) {
	W.WPrintf(lv, src, format, log...)
}
func (W _project_internal_logger_Logger) Println(lv uint8, src string, log ...interface{}) {
	W.WPrintln(lv, src, log...)
}

func init_project_internal_module() {
	Symbols["project/internal/module"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewManager": reflect.ValueOf(module.NewManager),

		// type definitions
		"Manager": reflect.ValueOf((*module.Manager)(nil)),
		"Method":  reflect.ValueOf((*module.Method)(nil)),
		"Module":  reflect.ValueOf((*module.Module)(nil)),
		"Value":   reflect.ValueOf((*module.Value)(nil)),

		// interface wrapper definitions
		"_Module": reflect.ValueOf((*_project_internal_module_Module)(nil)),
	}
}

// _project_internal_module_Module is an interface wrapper for Module type
type _project_internal_module_Module struct {
	WCall        func(method string, args ...interface{}) (interface{}, error)
	WDescription func() string
	WInfo        func() string
	WIsStarted   func() bool
	WMethods     func() []*module.Method
	WName        func() string
	WRestart     func() error
	WStart       func() error
	WStatus      func() string
	WStop        func()
}

func (W _project_internal_module_Module) Call(method string, args ...interface{}) (interface{}, error) {
	return W.WCall(method, args...)
}
func (W _project_internal_module_Module) Description() string       { return W.WDescription() }
func (W _project_internal_module_Module) Info() string              { return W.WInfo() }
func (W _project_internal_module_Module) IsStarted() bool           { return W.WIsStarted() }
func (W _project_internal_module_Module) Methods() []*module.Method { return W.WMethods() }
func (W _project_internal_module_Module) Name() string              { return W.WName() }
func (W _project_internal_module_Module) Restart() error            { return W.WRestart() }
func (W _project_internal_module_Module) Start() error              { return W.WStart() }
func (W _project_internal_module_Module) Status() string            { return W.WStatus() }
func (W _project_internal_module_Module) Stop()                     { W.WStop() }

func init_project_internal_namer() {
	Symbols["project/internal/namer"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Load":       reflect.ValueOf(namer.Load),
		"NewEnglish": reflect.ValueOf(namer.NewEnglish),
		"Register":   reflect.ValueOf(namer.Register),
		"Unregister": reflect.ValueOf(namer.Unregister),

		// type definitions
		"English": reflect.ValueOf((*namer.English)(nil)),
		"Namer":   reflect.ValueOf((*namer.Namer)(nil)),
		"Options": reflect.ValueOf((*namer.Options)(nil)),

		// interface wrapper definitions
		"_Namer": reflect.ValueOf((*_project_internal_namer_Namer)(nil)),
	}
}

// _project_internal_namer_Namer is an interface wrapper for Namer type
type _project_internal_namer_Namer struct {
	WGenerate func(opts *namer.Options) (string, error)
	WLoad     func(res []byte) error
	WType     func() string
}

func (W _project_internal_namer_Namer) Generate(opts *namer.Options) (string, error) {
	return W.WGenerate(opts)
}
func (W _project_internal_namer_Namer) Load(res []byte) error { return W.WLoad(res) }
func (W _project_internal_namer_Namer) Type() string          { return W.WType() }

func init_project_internal_nettool() {
	Symbols["project/internal/nettool"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CheckPort":             reflect.ValueOf(nettool.CheckPort),
		"CheckPortString":       reflect.ValueOf(nettool.CheckPortString),
		"DeadlineConn":          reflect.ValueOf(nettool.DeadlineConn),
		"DecodeExternalAddress": reflect.ValueOf(nettool.DecodeExternalAddress),
		"EncodeExternalAddress": reflect.ValueOf(nettool.EncodeExternalAddress),
		"ErrEmptyPort":          reflect.ValueOf(&nettool.ErrEmptyPort).Elem(),
		"FprintConn":            reflect.ValueOf(nettool.FprintConn),
		"IPEnabled":             reflect.ValueOf(nettool.IPEnabled),
		"IPToHost":              reflect.ValueOf(nettool.IPToHost),
		"IsNetClosingError":     reflect.ValueOf(nettool.IsNetClosingError),
		"CheckTCPNetwork":       reflect.ValueOf(nettool.CheckTCPNetwork),
		"CheckUDPNetwork":       reflect.ValueOf(nettool.CheckUDPNetwork),
		"JoinHostPort":          reflect.ValueOf(nettool.JoinHostPort),
		"SprintConn":            reflect.ValueOf(nettool.SprintConn),
		"SplitHostPort":         reflect.ValueOf(nettool.SplitHostPort),
		"WaitServerServe":       reflect.ValueOf(nettool.WaitServerServe),

		// type definitions
		"DialContext": reflect.ValueOf((*nettool.DialContext)(nil)),
		"Server":      reflect.ValueOf((*nettool.Server)(nil)),

		// interface wrapper definitions
		"_Server": reflect.ValueOf((*_project_internal_nettool_Server)(nil)),
	}
}

// _project_internal_nettool_Server is an interface wrapper for Server type
type _project_internal_nettool_Server struct {
	WAddresses func() []net.Addr
}

func (W _project_internal_nettool_Server) Addresses() []net.Addr { return W.WAddresses() }

func init_project_internal_option() {
	Symbols["project/internal/option"] = map[string]reflect.Value{
		// type definitions
		"HTTPRequest":   reflect.ValueOf((*option.HTTPRequest)(nil)),
		"HTTPServer":    reflect.ValueOf((*option.HTTPServer)(nil)),
		"HTTPTransport": reflect.ValueOf((*option.HTTPTransport)(nil)),
		"TLSConfig":     reflect.ValueOf((*option.TLSConfig)(nil)),
		"X509KeyPair":   reflect.ValueOf((*option.X509KeyPair)(nil)),
	}
}

func init_project_internal_patch_json() {
	Symbols["project/internal/patch/json"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Marshal":    reflect.ValueOf(json.Marshal),
		"NewDecoder": reflect.ValueOf(json.NewDecoder),
		"NewEncoder": reflect.ValueOf(json.NewEncoder),
		"Unmarshal":  reflect.ValueOf(json.Unmarshal),

		// type definitions
		"Decoder": reflect.ValueOf((*json.Decoder)(nil)),
		"Encoder": reflect.ValueOf((*json.Encoder)(nil)),
	}
}

func init_project_internal_patch_msgpack() {
	Symbols["project/internal/patch/msgpack"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Marshal":    reflect.ValueOf(msgpack.Marshal),
		"NewDecoder": reflect.ValueOf(msgpack.NewDecoder),
		"NewEncoder": reflect.ValueOf(msgpack.NewEncoder),
		"Unmarshal":  reflect.ValueOf(msgpack.Unmarshal),

		// type definitions
		"Decoder": reflect.ValueOf((*msgpack.Decoder)(nil)),
		"Encoder": reflect.ValueOf((*msgpack.Encoder)(nil)),
	}
}

func init_project_internal_patch_toml() {
	Symbols["project/internal/patch/toml"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Marshal":   reflect.ValueOf(toml.Marshal),
		"Unmarshal": reflect.ValueOf(toml.Unmarshal),
	}
}

func init_project_internal_random() {
	Symbols["project/internal/random"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Bytes":            reflect.ValueOf(random.Bytes),
		"Int":              reflect.ValueOf(random.Int),
		"Int64":            reflect.ValueOf(random.Int64),
		"MaxSleepTime":     reflect.ValueOf(random.MaxSleepTime),
		"NewRand":          reflect.ValueOf(random.NewRand),
		"NewSleeper":       reflect.ValueOf(random.NewSleeper),
		"Sleep":            reflect.ValueOf(random.Sleep),
		"SleepMillisecond": reflect.ValueOf(random.SleepMillisecond),
		"SleepSecond":      reflect.ValueOf(random.SleepSecond),
		"String":           reflect.ValueOf(random.String),
		"Uint64":           reflect.ValueOf(random.Uint64),

		// type definitions
		"Rand":    reflect.ValueOf((*random.Rand)(nil)),
		"Sleeper": reflect.ValueOf((*random.Sleeper)(nil)),
	}
}

func init_project_internal_security() {
	Symbols["project/internal/security"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CoverBytes":            reflect.ValueOf(security.CoverBytes),
		"CoverRunes":            reflect.ValueOf(security.CoverRunes),
		"CoverString":           reflect.ValueOf(security.CoverString),
		"ErrHasRemainingData":   reflect.ValueOf(&security.ErrHasRemainingData).Elem(),
		"FlushMemory":           reflect.ValueOf(security.FlushMemory),
		"LimitReadAll":          reflect.ValueOf(security.LimitReadAll),
		"LimitReader":           reflect.ValueOf(security.LimitReader),
		"NewBogo":               reflect.ValueOf(security.NewBogo),
		"NewBytes":              reflect.ValueOf(security.NewBytes),
		"NewMemory":             reflect.ValueOf(security.NewMemory),
		"NewString":             reflect.ValueOf(security.NewString),
		"PaddingMemory":         reflect.ValueOf(security.PaddingMemory),
		"ReadAll":               reflect.ValueOf(security.ReadAll),
		"SwitchThread":          reflect.ValueOf(security.SwitchThread),
		"SwitchThreadAsync":     reflect.ValueOf(security.SwitchThreadAsync),
		"WaitSwitchThreadAsync": reflect.ValueOf(security.WaitSwitchThreadAsync),

		// type definitions
		"Bogo":   reflect.ValueOf((*security.Bogo)(nil)),
		"Bytes":  reflect.ValueOf((*security.Bytes)(nil)),
		"Memory": reflect.ValueOf((*security.Memory)(nil)),
		"String": reflect.ValueOf((*security.String)(nil)),
	}
}

func init_project_internal_system() {
	Symbols["project/internal/system"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ChangeCurrentDirectory": reflect.ValueOf(system.ChangeCurrentDirectory),
		"CheckError":             reflect.ValueOf(system.CheckError),
		"CommandLineToArgv":      reflect.ValueOf(system.CommandLineToArgv),
		"ExecutableName":         reflect.ValueOf(system.ExecutableName),
		"GetConnHandle":          reflect.ValueOf(system.GetConnHandle),
		"IsExist":                reflect.ValueOf(system.IsExist),
		"IsNotExist":             reflect.ValueOf(system.IsNotExist),
		"OpenFile":               reflect.ValueOf(system.OpenFile),
		"PrintError":             reflect.ValueOf(system.PrintError),
		"WriteFile":              reflect.ValueOf(system.WriteFile),
	}
}

func init_project_internal_task() {
	Symbols["project/internal/task"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"EventCancel":   reflect.ValueOf(constant.MakeFromLiteral("\"cancel\"", token.STRING, 0)),
		"EventComplete": reflect.ValueOf(constant.MakeFromLiteral("\"complete\"", token.STRING, 0)),
		"EventContinue": reflect.ValueOf(constant.MakeFromLiteral("\"continue\"", token.STRING, 0)),
		"EventPause":    reflect.ValueOf(constant.MakeFromLiteral("\"pause\"", token.STRING, 0)),
		"EventProcess":  reflect.ValueOf(constant.MakeFromLiteral("\"process\"", token.STRING, 0)),
		"EventStart":    reflect.ValueOf(constant.MakeFromLiteral("\"start\"", token.STRING, 0)),
		"NewGenerator":  reflect.ValueOf(task.New),
		"StateCancel":   reflect.ValueOf(constant.MakeFromLiteral("\"cancel\"", token.STRING, 0)),
		"StateComplete": reflect.ValueOf(constant.MakeFromLiteral("\"complete\"", token.STRING, 0)),
		"StatePause":    reflect.ValueOf(constant.MakeFromLiteral("\"pause\"", token.STRING, 0)),
		"StatePrepare":  reflect.ValueOf(constant.MakeFromLiteral("\"prepare\"", token.STRING, 0)),
		"StateProcess":  reflect.ValueOf(constant.MakeFromLiteral("\"process\"", token.STRING, 0)),
		"StateReady":    reflect.ValueOf(constant.MakeFromLiteral("\"ready\"", token.STRING, 0)),

		// type definitions
		"Interface": reflect.ValueOf((*task.Interface)(nil)),
		"Task":      reflect.ValueOf((*task.Task)(nil)),

		// interface wrapper definitions
		"_Interface": reflect.ValueOf((*_project_internal_task_Interface)(nil)),
	}
}

// _project_internal_task_Interface is an interface wrapper for Interface type
type _project_internal_task_Interface struct {
	WClean    func()
	WDetail   func() string
	WPrepare  func(ctx context.Context) error
	WProcess  func(ctx context.Context, task *task.Task) error
	WProgress func() string
}

func (W _project_internal_task_Interface) Clean()                            { W.WClean() }
func (W _project_internal_task_Interface) Detail() string                    { return W.WDetail() }
func (W _project_internal_task_Interface) Prepare(ctx context.Context) error { return W.WPrepare(ctx) }
func (W _project_internal_task_Interface) Process(ctx context.Context, task *task.Task) error {
	return W.WProcess(ctx, task)
}
func (W _project_internal_task_Interface) Progress() string { return W.WProgress() }

func init_project_internal_xpanic() {
	Symbols["project/internal/xpanic"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Error":           reflect.ValueOf(xpanic.Error),
		"Errorf":          reflect.ValueOf(xpanic.Errorf),
		"Log":             reflect.ValueOf(xpanic.Log),
		"Logf":            reflect.ValueOf(xpanic.Logf),
		"Print":           reflect.ValueOf(xpanic.Print),
		"PrintPanic":      reflect.ValueOf(xpanic.PrintPanic),
		"PrintStack":      reflect.ValueOf(xpanic.PrintStack),
		"PrintStackTrace": reflect.ValueOf(xpanic.PrintStackTrace),
		"Printf":          reflect.ValueOf(xpanic.Printf),
	}
}

func init_project_internal_xreflect() {
	Symbols["project/internal/xreflect"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"GetStructureName":          reflect.ValueOf(xreflect.GetStructureName),
		"StructureToMap":            reflect.ValueOf(xreflect.StructureToMap),
		"StructureToMapWithoutZero": reflect.ValueOf(xreflect.StructureToMapWithoutZero),
	}
}

func init_project_internal_xsync() {
	Symbols["project/internal/xsync"] = map[string]reflect.Value{
		// type definitions
		"Counter": reflect.ValueOf((*xsync.Counter)(nil)),
	}
}
