// Code generated by script/code/yaegi/goroot_test.go. DO NOT EDIT.

// +build go1.12,!go1.13

package goroot

import (
	"archive/tar"
	"archive/zip"
	"bufio"
	"bytes"
	"compress/bzip2"
	"compress/flate"
	"compress/gzip"
	"compress/lzw"
	"compress/zlib"
	"container/heap"
	"container/list"
	"container/ring"
	"context"
	"crypto"
	"crypto/aes" // #nosec
	"crypto/cipher"
	"crypto/des"
	"crypto/dsa" // #nosec
	"crypto/ecdsa"
	"crypto/ed25519"
	"crypto/elliptic"
	"crypto/hmac"
	"crypto/md5" // #nosec
	crypto_rand "crypto/rand"
	"crypto/rc4" // #nosec
	"crypto/rsa"
	"crypto/sha1" // #nosec
	"crypto/sha256"
	"crypto/sha512"
	"crypto/subtle"
	"crypto/tls"
	"crypto/x509"
	"database/sql"
	"debug/dwarf"
	"debug/elf"
	"debug/gosym"
	"debug/macho"
	"debug/pe"
	"debug/plan9obj"
	"encoding"
	"encoding/ascii85"
	"encoding/asn1"
	"encoding/base32"
	"encoding/base64"
	"encoding/binary"
	"encoding/csv"
	"encoding/gob"
	"encoding/hex"
	"encoding/json"
	"encoding/pem"
	"encoding/xml"
	"errors"
	"expvar"
	"flag"
	"fmt"
	"go/constant"
	"go/token"
	"io"
	"math"
	"math/big"
	"math/bits"
	"math/cmplx"
	"math/rand"
	"reflect"
	"strings"
	"time"
)

// Symbols stores the map of unsafe package symbols.
var Symbols = map[string]map[string]reflect.Value{}

func init() {
	init_archive_tar()
	init_archive_zip()
	init_bufio()
	init_bytes()
	init_compress_bzip2()
	init_compress_flate()
	init_compress_gzip()
	init_compress_lzw()
	init_compress_zlib()
	init_container_heap()
	init_container_list()
	init_container_ring()
	init_context()
	init_crypto()
	init_crypto_aes()
	init_crypto_cipher()
	init_crypto_des()
	init_crypto_dsa()
	init_crypto_ecdsa()
	init_crypto_ed25519()
	init_crypto_elliptic()
	init_crypto_hmac()
	init_crypto_md5()
	init_crypto_rand()
	init_crypto_rc4()
	init_crypto_rsa()
	init_crypto_sha1()
	init_crypto_sha256()
	init_crypto_sha512()
	init_crypto_subtle()
	init_crypto_tls()
	init_crypto_x509()
	init_database_sql()
	init_debug_dwarf()
	init_debug_elf()
	init_debug_gosym()
	init_debug_macho()
	init_debug_pe()
	init_debug_plan9obj()
	init_encoding()
	init_encoding_ascii85()
	init_encoding_asn1()
	init_encoding_base32()
	init_encoding_base64()
	init_encoding_binary()
	init_encoding_csv()
	init_encoding_gob()
	init_encoding_hex()
	init_encoding_json()
	init_encoding_pem()
	init_encoding_xml()
	init_errors()
	init_expvar()
	init_flag()
	init_fmt()
	init_io()
	init_math()
	init_math_big()
	init_math_bits()
	init_math_cmplx()
	init_math_rand()
	init_reflect()
	init_strings()
	init_time()
}

func init_archive_tar() {
	Symbols["archive/tar"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrFieldTooLong":    reflect.ValueOf(&tar.ErrFieldTooLong).Elem(),
		"ErrHeader":          reflect.ValueOf(&tar.ErrHeader).Elem(),
		"ErrWriteAfterClose": reflect.ValueOf(&tar.ErrWriteAfterClose).Elem(),
		"ErrWriteTooLong":    reflect.ValueOf(&tar.ErrWriteTooLong).Elem(),
		"FileInfoHeader":     reflect.ValueOf(tar.FileInfoHeader),
		"FormatGNU":          reflect.ValueOf(tar.FormatGNU),
		"FormatPAX":          reflect.ValueOf(tar.FormatPAX),
		"FormatUSTAR":        reflect.ValueOf(tar.FormatUSTAR),
		"FormatUnknown":      reflect.ValueOf(tar.FormatUnknown),
		"NewReader":          reflect.ValueOf(tar.NewReader),
		"NewWriter":          reflect.ValueOf(tar.NewWriter),
		"TypeBlock":          reflect.ValueOf(constant.MakeFromLiteral("52", token.INT, 0)),
		"TypeChar":           reflect.ValueOf(constant.MakeFromLiteral("51", token.INT, 0)),
		"TypeCont":           reflect.ValueOf(constant.MakeFromLiteral("55", token.INT, 0)),
		"TypeDir":            reflect.ValueOf(constant.MakeFromLiteral("53", token.INT, 0)),
		"TypeFifo":           reflect.ValueOf(constant.MakeFromLiteral("54", token.INT, 0)),
		"TypeGNULongLink":    reflect.ValueOf(constant.MakeFromLiteral("75", token.INT, 0)),
		"TypeGNULongName":    reflect.ValueOf(constant.MakeFromLiteral("76", token.INT, 0)),
		"TypeGNUSparse":      reflect.ValueOf(constant.MakeFromLiteral("83", token.INT, 0)),
		"TypeLink":           reflect.ValueOf(constant.MakeFromLiteral("49", token.INT, 0)),
		"TypeReg":            reflect.ValueOf(constant.MakeFromLiteral("48", token.INT, 0)),
		"TypeRegA":           reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"TypeSymlink":        reflect.ValueOf(constant.MakeFromLiteral("50", token.INT, 0)),
		"TypeXGlobalHeader":  reflect.ValueOf(constant.MakeFromLiteral("103", token.INT, 0)),
		"TypeXHeader":        reflect.ValueOf(constant.MakeFromLiteral("120", token.INT, 0)),

		// type definitions
		"Format": reflect.ValueOf((*tar.Format)(nil)),
		"Header": reflect.ValueOf((*tar.Header)(nil)),
		"Reader": reflect.ValueOf((*tar.Reader)(nil)),
		"Writer": reflect.ValueOf((*tar.Writer)(nil)),
	}
}

func init_archive_zip() {
	Symbols["archive/zip"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Deflate":              reflect.ValueOf(zip.Deflate),
		"ErrAlgorithm":         reflect.ValueOf(&zip.ErrAlgorithm).Elem(),
		"ErrChecksum":          reflect.ValueOf(&zip.ErrChecksum).Elem(),
		"ErrFormat":            reflect.ValueOf(&zip.ErrFormat).Elem(),
		"FileInfoHeader":       reflect.ValueOf(zip.FileInfoHeader),
		"NewReader":            reflect.ValueOf(zip.NewReader),
		"NewWriter":            reflect.ValueOf(zip.NewWriter),
		"OpenReader":           reflect.ValueOf(zip.OpenReader),
		"RegisterCompressor":   reflect.ValueOf(zip.RegisterCompressor),
		"RegisterDecompressor": reflect.ValueOf(zip.RegisterDecompressor),
		"Store":                reflect.ValueOf(zip.Store),

		// type definitions
		"Compressor":   reflect.ValueOf((*zip.Compressor)(nil)),
		"Decompressor": reflect.ValueOf((*zip.Decompressor)(nil)),
		"File":         reflect.ValueOf((*zip.File)(nil)),
		"FileHeader":   reflect.ValueOf((*zip.FileHeader)(nil)),
		"ReadCloser":   reflect.ValueOf((*zip.ReadCloser)(nil)),
		"Reader":       reflect.ValueOf((*zip.Reader)(nil)),
		"Writer":       reflect.ValueOf((*zip.Writer)(nil)),
	}
}

func init_bufio() {
	Symbols["bufio"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrAdvanceTooFar":     reflect.ValueOf(&bufio.ErrAdvanceTooFar).Elem(),
		"ErrBufferFull":        reflect.ValueOf(&bufio.ErrBufferFull).Elem(),
		"ErrFinalToken":        reflect.ValueOf(&bufio.ErrFinalToken).Elem(),
		"ErrInvalidUnreadByte": reflect.ValueOf(&bufio.ErrInvalidUnreadByte).Elem(),
		"ErrInvalidUnreadRune": reflect.ValueOf(&bufio.ErrInvalidUnreadRune).Elem(),
		"ErrNegativeAdvance":   reflect.ValueOf(&bufio.ErrNegativeAdvance).Elem(),
		"ErrNegativeCount":     reflect.ValueOf(&bufio.ErrNegativeCount).Elem(),
		"ErrTooLong":           reflect.ValueOf(&bufio.ErrTooLong).Elem(),
		"MaxScanTokenSize":     reflect.ValueOf(constant.MakeFromLiteral("65536", token.INT, 0)),
		"NewReadWriter":        reflect.ValueOf(bufio.NewReadWriter),
		"NewReader":            reflect.ValueOf(bufio.NewReader),
		"NewReaderSize":        reflect.ValueOf(bufio.NewReaderSize),
		"NewScanner":           reflect.ValueOf(bufio.NewScanner),
		"NewWriter":            reflect.ValueOf(bufio.NewWriter),
		"NewWriterSize":        reflect.ValueOf(bufio.NewWriterSize),
		"ScanBytes":            reflect.ValueOf(bufio.ScanBytes),
		"ScanLines":            reflect.ValueOf(bufio.ScanLines),
		"ScanRunes":            reflect.ValueOf(bufio.ScanRunes),
		"ScanWords":            reflect.ValueOf(bufio.ScanWords),

		// type definitions
		"ReadWriter": reflect.ValueOf((*bufio.ReadWriter)(nil)),
		"Reader":     reflect.ValueOf((*bufio.Reader)(nil)),
		"Scanner":    reflect.ValueOf((*bufio.Scanner)(nil)),
		"SplitFunc":  reflect.ValueOf((*bufio.SplitFunc)(nil)),
		"Writer":     reflect.ValueOf((*bufio.Writer)(nil)),
	}
}

func init_bytes() {
	Symbols["bytes"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Compare":         reflect.ValueOf(bytes.Compare),
		"Contains":        reflect.ValueOf(bytes.Contains),
		"ContainsAny":     reflect.ValueOf(bytes.ContainsAny),
		"ContainsRune":    reflect.ValueOf(bytes.ContainsRune),
		"Count":           reflect.ValueOf(bytes.Count),
		"Equal":           reflect.ValueOf(bytes.Equal),
		"EqualFold":       reflect.ValueOf(bytes.EqualFold),
		"ErrTooLarge":     reflect.ValueOf(&bytes.ErrTooLarge).Elem(),
		"Fields":          reflect.ValueOf(bytes.Fields),
		"FieldsFunc":      reflect.ValueOf(bytes.FieldsFunc),
		"HasPrefix":       reflect.ValueOf(bytes.HasPrefix),
		"HasSuffix":       reflect.ValueOf(bytes.HasSuffix),
		"Index":           reflect.ValueOf(bytes.Index),
		"IndexAny":        reflect.ValueOf(bytes.IndexAny),
		"IndexByte":       reflect.ValueOf(bytes.IndexByte),
		"IndexFunc":       reflect.ValueOf(bytes.IndexFunc),
		"IndexRune":       reflect.ValueOf(bytes.IndexRune),
		"Join":            reflect.ValueOf(bytes.Join),
		"LastIndex":       reflect.ValueOf(bytes.LastIndex),
		"LastIndexAny":    reflect.ValueOf(bytes.LastIndexAny),
		"LastIndexByte":   reflect.ValueOf(bytes.LastIndexByte),
		"LastIndexFunc":   reflect.ValueOf(bytes.LastIndexFunc),
		"Map":             reflect.ValueOf(bytes.Map),
		"MinRead":         reflect.ValueOf(constant.MakeFromLiteral("512", token.INT, 0)),
		"NewBuffer":       reflect.ValueOf(bytes.NewBuffer),
		"NewBufferString": reflect.ValueOf(bytes.NewBufferString),
		"NewReader":       reflect.ValueOf(bytes.NewReader),
		"Repeat":          reflect.ValueOf(bytes.Repeat),
		"Replace":         reflect.ValueOf(bytes.Replace),
		"ReplaceAll":      reflect.ValueOf(bytes.ReplaceAll),
		"Runes":           reflect.ValueOf(bytes.Runes),
		"Split":           reflect.ValueOf(bytes.Split),
		"SplitAfter":      reflect.ValueOf(bytes.SplitAfter),
		"SplitAfterN":     reflect.ValueOf(bytes.SplitAfterN),
		"SplitN":          reflect.ValueOf(bytes.SplitN),
		"Title":           reflect.ValueOf(bytes.Title),
		"ToLower":         reflect.ValueOf(bytes.ToLower),
		"ToLowerSpecial":  reflect.ValueOf(bytes.ToLowerSpecial),
		"ToTitle":         reflect.ValueOf(bytes.ToTitle),
		"ToTitleSpecial":  reflect.ValueOf(bytes.ToTitleSpecial),
		"ToUpper":         reflect.ValueOf(bytes.ToUpper),
		"ToUpperSpecial":  reflect.ValueOf(bytes.ToUpperSpecial),
		"ToValidUTF8":     reflect.ValueOf(bytes.ToValidUTF8),
		"Trim":            reflect.ValueOf(bytes.Trim),
		"TrimFunc":        reflect.ValueOf(bytes.TrimFunc),
		"TrimLeft":        reflect.ValueOf(bytes.TrimLeft),
		"TrimLeftFunc":    reflect.ValueOf(bytes.TrimLeftFunc),
		"TrimPrefix":      reflect.ValueOf(bytes.TrimPrefix),
		"TrimRight":       reflect.ValueOf(bytes.TrimRight),
		"TrimRightFunc":   reflect.ValueOf(bytes.TrimRightFunc),
		"TrimSpace":       reflect.ValueOf(bytes.TrimSpace),
		"TrimSuffix":      reflect.ValueOf(bytes.TrimSuffix),

		// type definitions
		"Buffer": reflect.ValueOf((*bytes.Buffer)(nil)),
		"Reader": reflect.ValueOf((*bytes.Reader)(nil)),
	}
}

func init_compress_bzip2() {
	Symbols["compress/bzip2"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewReader": reflect.ValueOf(bzip2.NewReader),

		// type definitions
		"StructuralError": reflect.ValueOf((*bzip2.StructuralError)(nil)),
	}
}

func init_compress_flate() {
	Symbols["compress/flate"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BestCompression":    reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"BestSpeed":          reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DefaultCompression": reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"HuffmanOnly":        reflect.ValueOf(constant.MakeFromLiteral("-2", token.INT, 0)),
		"NewReader":          reflect.ValueOf(flate.NewReader),
		"NewReaderDict":      reflect.ValueOf(flate.NewReaderDict),
		"NewWriter":          reflect.ValueOf(flate.NewWriter),
		"NewWriterDict":      reflect.ValueOf(flate.NewWriterDict),
		"NoCompression":      reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),

		// type definitions
		"CorruptInputError": reflect.ValueOf((*flate.CorruptInputError)(nil)),
		"InternalError":     reflect.ValueOf((*flate.InternalError)(nil)),
		"ReadError":         reflect.ValueOf((*flate.ReadError)(nil)),
		"Reader":            reflect.ValueOf((*flate.Reader)(nil)),
		"Resetter":          reflect.ValueOf((*flate.Resetter)(nil)),
		"WriteError":        reflect.ValueOf((*flate.WriteError)(nil)),
		"Writer":            reflect.ValueOf((*flate.Writer)(nil)),

		// interface wrapper definitions
		"_Reader":   reflect.ValueOf((*_compress_flate_Reader)(nil)),
		"_Resetter": reflect.ValueOf((*_compress_flate_Resetter)(nil)),
	}
}

// _compress_flate_Reader is an interface wrapper for Reader type
type _compress_flate_Reader struct {
	WRead     func(p []byte) (n int, err error)
	WReadByte func() (byte, error)
}

func (W _compress_flate_Reader) Read(p []byte) (n int, err error) { return W.WRead(p) }
func (W _compress_flate_Reader) ReadByte() (byte, error)          { return W.WReadByte() }

// _compress_flate_Resetter is an interface wrapper for Resetter type
type _compress_flate_Resetter struct {
	WReset func(r io.Reader, dict []byte) error
}

func (W _compress_flate_Resetter) Reset(r io.Reader, dict []byte) error { return W.WReset(r, dict) }

func init_compress_gzip() {
	Symbols["compress/gzip"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BestCompression":    reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"BestSpeed":          reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DefaultCompression": reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"ErrChecksum":        reflect.ValueOf(&gzip.ErrChecksum).Elem(),
		"ErrHeader":          reflect.ValueOf(&gzip.ErrHeader).Elem(),
		"HuffmanOnly":        reflect.ValueOf(constant.MakeFromLiteral("-2", token.INT, 0)),
		"NewReader":          reflect.ValueOf(gzip.NewReader),
		"NewWriter":          reflect.ValueOf(gzip.NewWriter),
		"NewWriterLevel":     reflect.ValueOf(gzip.NewWriterLevel),
		"NoCompression":      reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),

		// type definitions
		"Header": reflect.ValueOf((*gzip.Header)(nil)),
		"Reader": reflect.ValueOf((*gzip.Reader)(nil)),
		"Writer": reflect.ValueOf((*gzip.Writer)(nil)),
	}
}

func init_compress_lzw() {
	Symbols["compress/lzw"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"LSB":       reflect.ValueOf(lzw.LSB),
		"MSB":       reflect.ValueOf(lzw.MSB),
		"NewReader": reflect.ValueOf(lzw.NewReader),
		"NewWriter": reflect.ValueOf(lzw.NewWriter),

		// type definitions
		"Order": reflect.ValueOf((*lzw.Order)(nil)),
	}
}

func init_compress_zlib() {
	Symbols["compress/zlib"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BestCompression":    reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"BestSpeed":          reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"DefaultCompression": reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"ErrChecksum":        reflect.ValueOf(&zlib.ErrChecksum).Elem(),
		"ErrDictionary":      reflect.ValueOf(&zlib.ErrDictionary).Elem(),
		"ErrHeader":          reflect.ValueOf(&zlib.ErrHeader).Elem(),
		"HuffmanOnly":        reflect.ValueOf(constant.MakeFromLiteral("-2", token.INT, 0)),
		"NewReader":          reflect.ValueOf(zlib.NewReader),
		"NewReaderDict":      reflect.ValueOf(zlib.NewReaderDict),
		"NewWriter":          reflect.ValueOf(zlib.NewWriter),
		"NewWriterLevel":     reflect.ValueOf(zlib.NewWriterLevel),
		"NewWriterLevelDict": reflect.ValueOf(zlib.NewWriterLevelDict),
		"NoCompression":      reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),

		// type definitions
		"Resetter": reflect.ValueOf((*zlib.Resetter)(nil)),
		"Writer":   reflect.ValueOf((*zlib.Writer)(nil)),

		// interface wrapper definitions
		"_Resetter": reflect.ValueOf((*_compress_zlib_Resetter)(nil)),
	}
}

// _compress_zlib_Resetter is an interface wrapper for Resetter type
type _compress_zlib_Resetter struct {
	WReset func(r io.Reader, dict []byte) error
}

func (W _compress_zlib_Resetter) Reset(r io.Reader, dict []byte) error { return W.WReset(r, dict) }

func init_container_heap() {
	Symbols["container/heap"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Fix":    reflect.ValueOf(heap.Fix),
		"Init":   reflect.ValueOf(heap.Init),
		"Pop":    reflect.ValueOf(heap.Pop),
		"Push":   reflect.ValueOf(heap.Push),
		"Remove": reflect.ValueOf(heap.Remove),

		// type definitions
		"Interface": reflect.ValueOf((*heap.Interface)(nil)),

		// interface wrapper definitions
		"_Interface": reflect.ValueOf((*_container_heap_Interface)(nil)),
	}
}

// _container_heap_Interface is an interface wrapper for Interface type
type _container_heap_Interface struct {
	WLen  func() int
	WLess func(i int, j int) bool
	WPop  func() interface{}
	WPush func(x interface{})
	WSwap func(i int, j int)
}

func (W _container_heap_Interface) Len() int               { return W.WLen() }
func (W _container_heap_Interface) Less(i int, j int) bool { return W.WLess(i, j) }
func (W _container_heap_Interface) Pop() interface{}       { return W.WPop() }
func (W _container_heap_Interface) Push(x interface{})     { W.WPush(x) }
func (W _container_heap_Interface) Swap(i int, j int)      { W.WSwap(i, j) }

func init_container_list() {
	Symbols["container/list"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"New": reflect.ValueOf(list.New),

		// type definitions
		"Element": reflect.ValueOf((*list.Element)(nil)),
		"List":    reflect.ValueOf((*list.List)(nil)),
	}
}

func init_container_ring() {
	Symbols["container/ring"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"New": reflect.ValueOf(ring.New),

		// type definitions
		"Ring": reflect.ValueOf((*ring.Ring)(nil)),
	}
}

func init_context() {
	Symbols["context"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Background":       reflect.ValueOf(context.Background),
		"Canceled":         reflect.ValueOf(&context.Canceled).Elem(),
		"DeadlineExceeded": reflect.ValueOf(&context.DeadlineExceeded).Elem(),
		"TODO":             reflect.ValueOf(context.TODO),
		"WithCancel":       reflect.ValueOf(context.WithCancel),
		"WithDeadline":     reflect.ValueOf(context.WithDeadline),
		"WithTimeout":      reflect.ValueOf(context.WithTimeout),
		"WithValue":        reflect.ValueOf(context.WithValue),

		// type definitions
		"CancelFunc": reflect.ValueOf((*context.CancelFunc)(nil)),
		"Context":    reflect.ValueOf((*context.Context)(nil)),

		// interface wrapper definitions
		"_Context": reflect.ValueOf((*_context_Context)(nil)),
	}
}

// _context_Context is an interface wrapper for Context type
type _context_Context struct {
	WDeadline func() (deadline time.Time, ok bool)
	WDone     func() <-chan struct{}
	WErr      func() error
	WValue    func(key interface{}) interface{}
}

func (W _context_Context) Deadline() (deadline time.Time, ok bool) { return W.WDeadline() }
func (W _context_Context) Done() <-chan struct{}                   { return W.WDone() }
func (W _context_Context) Err() error                              { return W.WErr() }
func (W _context_Context) Value(key interface{}) interface{}       { return W.WValue(key) }

func init_crypto() {
	Symbols["crypto"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BLAKE2b_256":  reflect.ValueOf(crypto.BLAKE2b_256),
		"BLAKE2b_384":  reflect.ValueOf(crypto.BLAKE2b_384),
		"BLAKE2b_512":  reflect.ValueOf(crypto.BLAKE2b_512),
		"BLAKE2s_256":  reflect.ValueOf(crypto.BLAKE2s_256),
		"MD4":          reflect.ValueOf(crypto.MD4),
		"MD5":          reflect.ValueOf(crypto.MD5),
		"MD5SHA1":      reflect.ValueOf(crypto.MD5SHA1),
		"RIPEMD160":    reflect.ValueOf(crypto.RIPEMD160),
		"RegisterHash": reflect.ValueOf(crypto.RegisterHash),
		"SHA1":         reflect.ValueOf(crypto.SHA1),
		"SHA224":       reflect.ValueOf(crypto.SHA224),
		"SHA256":       reflect.ValueOf(crypto.SHA256),
		"SHA384":       reflect.ValueOf(crypto.SHA384),
		"SHA3_224":     reflect.ValueOf(crypto.SHA3_224),
		"SHA3_256":     reflect.ValueOf(crypto.SHA3_256),
		"SHA3_384":     reflect.ValueOf(crypto.SHA3_384),
		"SHA3_512":     reflect.ValueOf(crypto.SHA3_512),
		"SHA512":       reflect.ValueOf(crypto.SHA512),
		"SHA512_224":   reflect.ValueOf(crypto.SHA512_224),
		"SHA512_256":   reflect.ValueOf(crypto.SHA512_256),

		// type definitions
		"Decrypter":     reflect.ValueOf((*crypto.Decrypter)(nil)),
		"DecrypterOpts": reflect.ValueOf((*crypto.DecrypterOpts)(nil)),
		"Hash":          reflect.ValueOf((*crypto.Hash)(nil)),
		"PrivateKey":    reflect.ValueOf((*crypto.PrivateKey)(nil)),
		"PublicKey":     reflect.ValueOf((*crypto.PublicKey)(nil)),
		"Signer":        reflect.ValueOf((*crypto.Signer)(nil)),
		"SignerOpts":    reflect.ValueOf((*crypto.SignerOpts)(nil)),

		// interface wrapper definitions
		"_Decrypter":     reflect.ValueOf((*_crypto_Decrypter)(nil)),
		"_DecrypterOpts": reflect.ValueOf((*_crypto_DecrypterOpts)(nil)),
		"_PrivateKey":    reflect.ValueOf((*_crypto_PrivateKey)(nil)),
		"_PublicKey":     reflect.ValueOf((*_crypto_PublicKey)(nil)),
		"_Signer":        reflect.ValueOf((*_crypto_Signer)(nil)),
		"_SignerOpts":    reflect.ValueOf((*_crypto_SignerOpts)(nil)),
	}
}

// _crypto_Decrypter is an interface wrapper for Decrypter type
type _crypto_Decrypter struct {
	WDecrypt func(rand io.Reader, msg []byte, opts crypto.DecrypterOpts) (plaintext []byte, err error)
	WPublic  func() crypto.PublicKey
}

func (W _crypto_Decrypter) Decrypt(rand io.Reader, msg []byte, opts crypto.DecrypterOpts) (plaintext []byte, err error) {
	return W.WDecrypt(rand, msg, opts)
}
func (W _crypto_Decrypter) Public() crypto.PublicKey { return W.WPublic() }

// _crypto_DecrypterOpts is an interface wrapper for DecrypterOpts type
type _crypto_DecrypterOpts struct {
}

// _crypto_PrivateKey is an interface wrapper for PrivateKey type
type _crypto_PrivateKey struct {
}

// _crypto_PublicKey is an interface wrapper for PublicKey type
type _crypto_PublicKey struct {
}

// _crypto_Signer is an interface wrapper for Signer type
type _crypto_Signer struct {
	WPublic func() crypto.PublicKey
	WSign   func(rand io.Reader, digest []byte, opts crypto.SignerOpts) (signature []byte, err error)
}

func (W _crypto_Signer) Public() crypto.PublicKey { return W.WPublic() }
func (W _crypto_Signer) Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) (signature []byte, err error) {
	return W.WSign(rand, digest, opts)
}

// _crypto_SignerOpts is an interface wrapper for SignerOpts type
type _crypto_SignerOpts struct {
	WHashFunc func() crypto.Hash
}

func (W _crypto_SignerOpts) HashFunc() crypto.Hash { return W.WHashFunc() }

func init_crypto_aes() {
	Symbols["crypto/aes"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BlockSize": reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"NewCipher": reflect.ValueOf(aes.NewCipher),

		// type definitions
		"KeySizeError": reflect.ValueOf((*aes.KeySizeError)(nil)),
	}
}

func init_crypto_cipher() {
	Symbols["crypto/cipher"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewCBCDecrypter":     reflect.ValueOf(cipher.NewCBCDecrypter),
		"NewCBCEncrypter":     reflect.ValueOf(cipher.NewCBCEncrypter),
		"NewCFBDecrypter":     reflect.ValueOf(cipher.NewCFBDecrypter),
		"NewCFBEncrypter":     reflect.ValueOf(cipher.NewCFBEncrypter),
		"NewCTR":              reflect.ValueOf(cipher.NewCTR),
		"NewGCM":              reflect.ValueOf(cipher.NewGCM),
		"NewGCMWithNonceSize": reflect.ValueOf(cipher.NewGCMWithNonceSize),
		"NewGCMWithTagSize":   reflect.ValueOf(cipher.NewGCMWithTagSize),
		"NewOFB":              reflect.ValueOf(cipher.NewOFB),

		// type definitions
		"AEAD":         reflect.ValueOf((*cipher.AEAD)(nil)),
		"Block":        reflect.ValueOf((*cipher.Block)(nil)),
		"BlockMode":    reflect.ValueOf((*cipher.BlockMode)(nil)),
		"Stream":       reflect.ValueOf((*cipher.Stream)(nil)),
		"StreamReader": reflect.ValueOf((*cipher.StreamReader)(nil)),
		"StreamWriter": reflect.ValueOf((*cipher.StreamWriter)(nil)),

		// interface wrapper definitions
		"_AEAD":      reflect.ValueOf((*_crypto_cipher_AEAD)(nil)),
		"_Block":     reflect.ValueOf((*_crypto_cipher_Block)(nil)),
		"_BlockMode": reflect.ValueOf((*_crypto_cipher_BlockMode)(nil)),
		"_Stream":    reflect.ValueOf((*_crypto_cipher_Stream)(nil)),
	}
}

// _crypto_cipher_AEAD is an interface wrapper for AEAD type
type _crypto_cipher_AEAD struct {
	WNonceSize func() int
	WOpen      func(dst []byte, nonce []byte, ciphertext []byte, additionalData []byte) ([]byte, error)
	WOverhead  func() int
	WSeal      func(dst []byte, nonce []byte, plaintext []byte, additionalData []byte) []byte
}

func (W _crypto_cipher_AEAD) NonceSize() int { return W.WNonceSize() }
func (W _crypto_cipher_AEAD) Open(dst []byte, nonce []byte, ciphertext []byte, additionalData []byte) ([]byte, error) {
	return W.WOpen(dst, nonce, ciphertext, additionalData)
}
func (W _crypto_cipher_AEAD) Overhead() int { return W.WOverhead() }
func (W _crypto_cipher_AEAD) Seal(dst []byte, nonce []byte, plaintext []byte, additionalData []byte) []byte {
	return W.WSeal(dst, nonce, plaintext, additionalData)
}

// _crypto_cipher_Block is an interface wrapper for Block type
type _crypto_cipher_Block struct {
	WBlockSize func() int
	WDecrypt   func(dst []byte, src []byte)
	WEncrypt   func(dst []byte, src []byte)
}

func (W _crypto_cipher_Block) BlockSize() int                 { return W.WBlockSize() }
func (W _crypto_cipher_Block) Decrypt(dst []byte, src []byte) { W.WDecrypt(dst, src) }
func (W _crypto_cipher_Block) Encrypt(dst []byte, src []byte) { W.WEncrypt(dst, src) }

// _crypto_cipher_BlockMode is an interface wrapper for BlockMode type
type _crypto_cipher_BlockMode struct {
	WBlockSize   func() int
	WCryptBlocks func(dst []byte, src []byte)
}

func (W _crypto_cipher_BlockMode) BlockSize() int                     { return W.WBlockSize() }
func (W _crypto_cipher_BlockMode) CryptBlocks(dst []byte, src []byte) { W.WCryptBlocks(dst, src) }

// _crypto_cipher_Stream is an interface wrapper for Stream type
type _crypto_cipher_Stream struct {
	WXORKeyStream func(dst []byte, src []byte)
}

func (W _crypto_cipher_Stream) XORKeyStream(dst []byte, src []byte) { W.WXORKeyStream(dst, src) }

func init_crypto_des() {
	Symbols["crypto/des"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BlockSize":          reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"NewCipher":          reflect.ValueOf(des.NewCipher),
		"NewTripleDESCipher": reflect.ValueOf(des.NewTripleDESCipher),

		// type definitions
		"KeySizeError": reflect.ValueOf((*des.KeySizeError)(nil)),
	}
}

func init_crypto_dsa() {
	Symbols["crypto/dsa"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrInvalidPublicKey": reflect.ValueOf(&dsa.ErrInvalidPublicKey).Elem(),
		"GenerateKey":         reflect.ValueOf(dsa.GenerateKey),
		"GenerateParameters":  reflect.ValueOf(dsa.GenerateParameters),
		"L1024N160":           reflect.ValueOf(dsa.L1024N160),
		"L2048N224":           reflect.ValueOf(dsa.L2048N224),
		"L2048N256":           reflect.ValueOf(dsa.L2048N256),
		"L3072N256":           reflect.ValueOf(dsa.L3072N256),
		"Sign":                reflect.ValueOf(dsa.Sign),
		"Verify":              reflect.ValueOf(dsa.Verify),

		// type definitions
		"ParameterSizes": reflect.ValueOf((*dsa.ParameterSizes)(nil)),
		"Parameters":     reflect.ValueOf((*dsa.Parameters)(nil)),
		"PrivateKey":     reflect.ValueOf((*dsa.PrivateKey)(nil)),
		"PublicKey":      reflect.ValueOf((*dsa.PublicKey)(nil)),
	}
}

func init_crypto_ecdsa() {
	Symbols["crypto/ecdsa"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"GenerateKey": reflect.ValueOf(ecdsa.GenerateKey),
		"Sign":        reflect.ValueOf(ecdsa.Sign),
		"Verify":      reflect.ValueOf(ecdsa.Verify),

		// type definitions
		"PrivateKey": reflect.ValueOf((*ecdsa.PrivateKey)(nil)),
		"PublicKey":  reflect.ValueOf((*ecdsa.PublicKey)(nil)),
	}
}

func init_crypto_ed25519() {
	Symbols["crypto/ed25519"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"GenerateKey":    reflect.ValueOf(ed25519.GenerateKey),
		"NewKeyFromSeed": reflect.ValueOf(ed25519.NewKeyFromSeed),
		"PrivateKeySize": reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"PublicKeySize":  reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"SeedSize":       reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"Sign":           reflect.ValueOf(ed25519.Sign),
		"SignatureSize":  reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"Verify":         reflect.ValueOf(ed25519.Verify),

		// type definitions
		"PrivateKey": reflect.ValueOf((*ed25519.PrivateKey)(nil)),
		"PublicKey":  reflect.ValueOf((*ed25519.PublicKey)(nil)),
	}
}

func init_crypto_elliptic() {
	Symbols["crypto/elliptic"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"GenerateKey": reflect.ValueOf(elliptic.GenerateKey),
		"Marshal":     reflect.ValueOf(elliptic.Marshal),
		"P224":        reflect.ValueOf(elliptic.P224),
		"P256":        reflect.ValueOf(elliptic.P256),
		"P384":        reflect.ValueOf(elliptic.P384),
		"P521":        reflect.ValueOf(elliptic.P521),
		"Unmarshal":   reflect.ValueOf(elliptic.Unmarshal),

		// type definitions
		"Curve":       reflect.ValueOf((*elliptic.Curve)(nil)),
		"CurveParams": reflect.ValueOf((*elliptic.CurveParams)(nil)),

		// interface wrapper definitions
		"_Curve": reflect.ValueOf((*_crypto_elliptic_Curve)(nil)),
	}
}

// _crypto_elliptic_Curve is an interface wrapper for Curve type
type _crypto_elliptic_Curve struct {
	WAdd            func(x1 *big.Int, y1 *big.Int, x2 *big.Int, y2 *big.Int) (x *big.Int, y *big.Int)
	WDouble         func(x1 *big.Int, y1 *big.Int) (x *big.Int, y *big.Int)
	WIsOnCurve      func(x *big.Int, y *big.Int) bool
	WParams         func() *elliptic.CurveParams
	WScalarBaseMult func(k []byte) (x *big.Int, y *big.Int)
	WScalarMult     func(x1 *big.Int, y1 *big.Int, k []byte) (x *big.Int, y *big.Int)
}

func (W _crypto_elliptic_Curve) Add(x1 *big.Int, y1 *big.Int, x2 *big.Int, y2 *big.Int) (x *big.Int, y *big.Int) {
	return W.WAdd(x1, y1, x2, y2)
}
func (W _crypto_elliptic_Curve) Double(x1 *big.Int, y1 *big.Int) (x *big.Int, y *big.Int) {
	return W.WDouble(x1, y1)
}
func (W _crypto_elliptic_Curve) IsOnCurve(x *big.Int, y *big.Int) bool { return W.WIsOnCurve(x, y) }
func (W _crypto_elliptic_Curve) Params() *elliptic.CurveParams         { return W.WParams() }
func (W _crypto_elliptic_Curve) ScalarBaseMult(k []byte) (x *big.Int, y *big.Int) {
	return W.WScalarBaseMult(k)
}
func (W _crypto_elliptic_Curve) ScalarMult(x1 *big.Int, y1 *big.Int, k []byte) (x *big.Int, y *big.Int) {
	return W.WScalarMult(x1, y1, k)
}

func init_crypto_hmac() {
	Symbols["crypto/hmac"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Equal": reflect.ValueOf(hmac.Equal),
		"New":   reflect.ValueOf(hmac.New),
	}
}

func init_crypto_md5() {
	Symbols["crypto/md5"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BlockSize": reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"New":       reflect.ValueOf(md5.New),
		"Size":      reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"Sum":       reflect.ValueOf(md5.Sum),
	}
}

func init_crypto_rand() {
	Symbols["crypto/rand"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Int":    reflect.ValueOf(crypto_rand.Int),
		"Prime":  reflect.ValueOf(crypto_rand.Prime),
		"Read":   reflect.ValueOf(crypto_rand.Read),
		"Reader": reflect.ValueOf(&crypto_rand.Reader).Elem(),
	}
}

func init_crypto_rc4() {
	Symbols["crypto/rc4"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewCipher": reflect.ValueOf(rc4.NewCipher),

		// type definitions
		"Cipher":       reflect.ValueOf((*rc4.Cipher)(nil)),
		"KeySizeError": reflect.ValueOf((*rc4.KeySizeError)(nil)),
	}
}

func init_crypto_rsa() {
	Symbols["crypto/rsa"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DecryptOAEP":               reflect.ValueOf(rsa.DecryptOAEP),
		"DecryptPKCS1v15":           reflect.ValueOf(rsa.DecryptPKCS1v15),
		"DecryptPKCS1v15SessionKey": reflect.ValueOf(rsa.DecryptPKCS1v15SessionKey),
		"EncryptOAEP":               reflect.ValueOf(rsa.EncryptOAEP),
		"EncryptPKCS1v15":           reflect.ValueOf(rsa.EncryptPKCS1v15),
		"ErrDecryption":             reflect.ValueOf(&rsa.ErrDecryption).Elem(),
		"ErrMessageTooLong":         reflect.ValueOf(&rsa.ErrMessageTooLong).Elem(),
		"ErrVerification":           reflect.ValueOf(&rsa.ErrVerification).Elem(),
		"GenerateKey":               reflect.ValueOf(rsa.GenerateKey),
		"GenerateMultiPrimeKey":     reflect.ValueOf(rsa.GenerateMultiPrimeKey),
		"PSSSaltLengthAuto":         reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"PSSSaltLengthEqualsHash":   reflect.ValueOf(constant.MakeFromLiteral("-1", token.INT, 0)),
		"SignPKCS1v15":              reflect.ValueOf(rsa.SignPKCS1v15),
		"SignPSS":                   reflect.ValueOf(rsa.SignPSS),
		"VerifyPKCS1v15":            reflect.ValueOf(rsa.VerifyPKCS1v15),
		"VerifyPSS":                 reflect.ValueOf(rsa.VerifyPSS),

		// type definitions
		"CRTValue":               reflect.ValueOf((*rsa.CRTValue)(nil)),
		"OAEPOptions":            reflect.ValueOf((*rsa.OAEPOptions)(nil)),
		"PKCS1v15DecryptOptions": reflect.ValueOf((*rsa.PKCS1v15DecryptOptions)(nil)),
		"PSSOptions":             reflect.ValueOf((*rsa.PSSOptions)(nil)),
		"PrecomputedValues":      reflect.ValueOf((*rsa.PrecomputedValues)(nil)),
		"PrivateKey":             reflect.ValueOf((*rsa.PrivateKey)(nil)),
		"PublicKey":              reflect.ValueOf((*rsa.PublicKey)(nil)),
	}
}

func init_crypto_sha1() {
	Symbols["crypto/sha1"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BlockSize": reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"New":       reflect.ValueOf(sha1.New),
		"Size":      reflect.ValueOf(constant.MakeFromLiteral("20", token.INT, 0)),
		"Sum":       reflect.ValueOf(sha1.Sum),
	}
}

func init_crypto_sha256() {
	Symbols["crypto/sha256"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BlockSize": reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"New":       reflect.ValueOf(sha256.New),
		"New224":    reflect.ValueOf(sha256.New224),
		"Size":      reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"Size224":   reflect.ValueOf(constant.MakeFromLiteral("28", token.INT, 0)),
		"Sum224":    reflect.ValueOf(sha256.Sum224),
		"Sum256":    reflect.ValueOf(sha256.Sum256),
	}
}

func init_crypto_sha512() {
	Symbols["crypto/sha512"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BlockSize":  reflect.ValueOf(constant.MakeFromLiteral("128", token.INT, 0)),
		"New":        reflect.ValueOf(sha512.New),
		"New384":     reflect.ValueOf(sha512.New384),
		"New512_224": reflect.ValueOf(sha512.New512_224),
		"New512_256": reflect.ValueOf(sha512.New512_256),
		"Size":       reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
		"Size224":    reflect.ValueOf(constant.MakeFromLiteral("28", token.INT, 0)),
		"Size256":    reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"Size384":    reflect.ValueOf(constant.MakeFromLiteral("48", token.INT, 0)),
		"Sum384":     reflect.ValueOf(sha512.Sum384),
		"Sum512":     reflect.ValueOf(sha512.Sum512),
		"Sum512_224": reflect.ValueOf(sha512.Sum512_224),
		"Sum512_256": reflect.ValueOf(sha512.Sum512_256),
	}
}

func init_crypto_subtle() {
	Symbols["crypto/subtle"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ConstantTimeByteEq":   reflect.ValueOf(subtle.ConstantTimeByteEq),
		"ConstantTimeCompare":  reflect.ValueOf(subtle.ConstantTimeCompare),
		"ConstantTimeCopy":     reflect.ValueOf(subtle.ConstantTimeCopy),
		"ConstantTimeEq":       reflect.ValueOf(subtle.ConstantTimeEq),
		"ConstantTimeLessOrEq": reflect.ValueOf(subtle.ConstantTimeLessOrEq),
		"ConstantTimeSelect":   reflect.ValueOf(subtle.ConstantTimeSelect),
	}
}

func init_crypto_tls() {
	Symbols["crypto/tls"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Client":                                  reflect.ValueOf(tls.Client),
		"CurveP256":                               reflect.ValueOf(tls.CurveP256),
		"CurveP384":                               reflect.ValueOf(tls.CurveP384),
		"CurveP521":                               reflect.ValueOf(tls.CurveP521),
		"Dial":                                    reflect.ValueOf(tls.Dial),
		"DialWithDialer":                          reflect.ValueOf(tls.DialWithDialer),
		"ECDSAWithP256AndSHA256":                  reflect.ValueOf(tls.ECDSAWithP256AndSHA256),
		"ECDSAWithP384AndSHA384":                  reflect.ValueOf(tls.ECDSAWithP384AndSHA384),
		"ECDSAWithP521AndSHA512":                  reflect.ValueOf(tls.ECDSAWithP521AndSHA512),
		"ECDSAWithSHA1":                           reflect.ValueOf(tls.ECDSAWithSHA1),
		"Listen":                                  reflect.ValueOf(tls.Listen),
		"LoadX509KeyPair":                         reflect.ValueOf(tls.LoadX509KeyPair),
		"NewLRUClientSessionCache":                reflect.ValueOf(tls.NewLRUClientSessionCache),
		"NewListener":                             reflect.ValueOf(tls.NewListener),
		"NoClientCert":                            reflect.ValueOf(tls.NoClientCert),
		"PKCS1WithSHA1":                           reflect.ValueOf(tls.PKCS1WithSHA1),
		"PKCS1WithSHA256":                         reflect.ValueOf(tls.PKCS1WithSHA256),
		"PKCS1WithSHA384":                         reflect.ValueOf(tls.PKCS1WithSHA384),
		"PKCS1WithSHA512":                         reflect.ValueOf(tls.PKCS1WithSHA512),
		"PSSWithSHA256":                           reflect.ValueOf(tls.PSSWithSHA256),
		"PSSWithSHA384":                           reflect.ValueOf(tls.PSSWithSHA384),
		"PSSWithSHA512":                           reflect.ValueOf(tls.PSSWithSHA512),
		"RenegotiateFreelyAsClient":               reflect.ValueOf(tls.RenegotiateFreelyAsClient),
		"RenegotiateNever":                        reflect.ValueOf(tls.RenegotiateNever),
		"RenegotiateOnceAsClient":                 reflect.ValueOf(tls.RenegotiateOnceAsClient),
		"RequestClientCert":                       reflect.ValueOf(tls.RequestClientCert),
		"RequireAndVerifyClientCert":              reflect.ValueOf(tls.RequireAndVerifyClientCert),
		"RequireAnyClientCert":                    reflect.ValueOf(tls.RequireAnyClientCert),
		"Server":                                  reflect.ValueOf(tls.Server),
		"TLS_AES_128_GCM_SHA256":                  reflect.ValueOf(tls.TLS_AES_128_GCM_SHA256),
		"TLS_AES_256_GCM_SHA384":                  reflect.ValueOf(tls.TLS_AES_256_GCM_SHA384),
		"TLS_CHACHA20_POLY1305_SHA256":            reflect.ValueOf(tls.TLS_CHACHA20_POLY1305_SHA256),
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":    reflect.ValueOf(tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA),
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256": reflect.ValueOf(tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256),
		"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256": reflect.ValueOf(tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256),
		"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":    reflect.ValueOf(tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA),
		"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384": reflect.ValueOf(tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384),
		"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305":  reflect.ValueOf(tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305),
		"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":        reflect.ValueOf(tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA),
		"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":     reflect.ValueOf(tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA),
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":      reflect.ValueOf(tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA),
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256":   reflect.ValueOf(tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256),
		"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":   reflect.ValueOf(tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256),
		"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":      reflect.ValueOf(tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA),
		"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384":   reflect.ValueOf(tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384),
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305":    reflect.ValueOf(tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305),
		"TLS_ECDHE_RSA_WITH_RC4_128_SHA":          reflect.ValueOf(tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA),
		"TLS_FALLBACK_SCSV":                       reflect.ValueOf(tls.TLS_FALLBACK_SCSV),
		"TLS_RSA_WITH_3DES_EDE_CBC_SHA":           reflect.ValueOf(tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA),
		"TLS_RSA_WITH_AES_128_CBC_SHA":            reflect.ValueOf(tls.TLS_RSA_WITH_AES_128_CBC_SHA),
		"TLS_RSA_WITH_AES_128_CBC_SHA256":         reflect.ValueOf(tls.TLS_RSA_WITH_AES_128_CBC_SHA256),
		"TLS_RSA_WITH_AES_128_GCM_SHA256":         reflect.ValueOf(tls.TLS_RSA_WITH_AES_128_GCM_SHA256),
		"TLS_RSA_WITH_AES_256_CBC_SHA":            reflect.ValueOf(tls.TLS_RSA_WITH_AES_256_CBC_SHA),
		"TLS_RSA_WITH_AES_256_GCM_SHA384":         reflect.ValueOf(tls.TLS_RSA_WITH_AES_256_GCM_SHA384),
		"TLS_RSA_WITH_RC4_128_SHA":                reflect.ValueOf(tls.TLS_RSA_WITH_RC4_128_SHA),
		"VerifyClientCertIfGiven":                 reflect.ValueOf(tls.VerifyClientCertIfGiven),
		"VersionSSL30":                            reflect.ValueOf(constant.MakeFromLiteral("768", token.INT, 0)),
		"VersionTLS10":                            reflect.ValueOf(constant.MakeFromLiteral("769", token.INT, 0)),
		"VersionTLS11":                            reflect.ValueOf(constant.MakeFromLiteral("770", token.INT, 0)),
		"VersionTLS12":                            reflect.ValueOf(constant.MakeFromLiteral("771", token.INT, 0)),
		"VersionTLS13":                            reflect.ValueOf(constant.MakeFromLiteral("772", token.INT, 0)),
		"X25519":                                  reflect.ValueOf(tls.X25519),
		"X509KeyPair":                             reflect.ValueOf(tls.X509KeyPair),

		// type definitions
		"Certificate":            reflect.ValueOf((*tls.Certificate)(nil)),
		"CertificateRequestInfo": reflect.ValueOf((*tls.CertificateRequestInfo)(nil)),
		"ClientAuthType":         reflect.ValueOf((*tls.ClientAuthType)(nil)),
		"ClientHelloInfo":        reflect.ValueOf((*tls.ClientHelloInfo)(nil)),
		"ClientSessionCache":     reflect.ValueOf((*tls.ClientSessionCache)(nil)),
		"ClientSessionState":     reflect.ValueOf((*tls.ClientSessionState)(nil)),
		"Config":                 reflect.ValueOf((*tls.Config)(nil)),
		"Conn":                   reflect.ValueOf((*tls.Conn)(nil)),
		"ConnectionState":        reflect.ValueOf((*tls.ConnectionState)(nil)),
		"CurveID":                reflect.ValueOf((*tls.CurveID)(nil)),
		"RecordHeaderError":      reflect.ValueOf((*tls.RecordHeaderError)(nil)),
		"RenegotiationSupport":   reflect.ValueOf((*tls.RenegotiationSupport)(nil)),
		"SignatureScheme":        reflect.ValueOf((*tls.SignatureScheme)(nil)),

		// interface wrapper definitions
		"_ClientSessionCache": reflect.ValueOf((*_crypto_tls_ClientSessionCache)(nil)),
	}
}

// _crypto_tls_ClientSessionCache is an interface wrapper for ClientSessionCache type
type _crypto_tls_ClientSessionCache struct {
	WGet func(sessionKey string) (session *tls.ClientSessionState, ok bool)
	WPut func(sessionKey string, cs *tls.ClientSessionState)
}

func (W _crypto_tls_ClientSessionCache) Get(sessionKey string) (session *tls.ClientSessionState, ok bool) {
	return W.WGet(sessionKey)
}
func (W _crypto_tls_ClientSessionCache) Put(sessionKey string, cs *tls.ClientSessionState) {
	W.WPut(sessionKey, cs)
}

func init_crypto_x509() {
	Symbols["crypto/x509"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CANotAuthorizedForExtKeyUsage":             reflect.ValueOf(x509.CANotAuthorizedForExtKeyUsage),
		"CANotAuthorizedForThisName":                reflect.ValueOf(x509.CANotAuthorizedForThisName),
		"CreateCertificate":                         reflect.ValueOf(x509.CreateCertificate),
		"CreateCertificateRequest":                  reflect.ValueOf(x509.CreateCertificateRequest),
		"DSA":                                       reflect.ValueOf(x509.DSA),
		"DSAWithSHA1":                               reflect.ValueOf(x509.DSAWithSHA1),
		"DSAWithSHA256":                             reflect.ValueOf(x509.DSAWithSHA256),
		"DecryptPEMBlock":                           reflect.ValueOf(x509.DecryptPEMBlock),
		"ECDSA":                                     reflect.ValueOf(x509.ECDSA),
		"ECDSAWithSHA1":                             reflect.ValueOf(x509.ECDSAWithSHA1),
		"ECDSAWithSHA256":                           reflect.ValueOf(x509.ECDSAWithSHA256),
		"ECDSAWithSHA384":                           reflect.ValueOf(x509.ECDSAWithSHA384),
		"ECDSAWithSHA512":                           reflect.ValueOf(x509.ECDSAWithSHA512),
		"EncryptPEMBlock":                           reflect.ValueOf(x509.EncryptPEMBlock),
		"ErrUnsupportedAlgorithm":                   reflect.ValueOf(&x509.ErrUnsupportedAlgorithm).Elem(),
		"Expired":                                   reflect.ValueOf(x509.Expired),
		"ExtKeyUsageAny":                            reflect.ValueOf(x509.ExtKeyUsageAny),
		"ExtKeyUsageClientAuth":                     reflect.ValueOf(x509.ExtKeyUsageClientAuth),
		"ExtKeyUsageCodeSigning":                    reflect.ValueOf(x509.ExtKeyUsageCodeSigning),
		"ExtKeyUsageEmailProtection":                reflect.ValueOf(x509.ExtKeyUsageEmailProtection),
		"ExtKeyUsageIPSECEndSystem":                 reflect.ValueOf(x509.ExtKeyUsageIPSECEndSystem),
		"ExtKeyUsageIPSECTunnel":                    reflect.ValueOf(x509.ExtKeyUsageIPSECTunnel),
		"ExtKeyUsageIPSECUser":                      reflect.ValueOf(x509.ExtKeyUsageIPSECUser),
		"ExtKeyUsageMicrosoftCommercialCodeSigning": reflect.ValueOf(x509.ExtKeyUsageMicrosoftCommercialCodeSigning),
		"ExtKeyUsageMicrosoftKernelCodeSigning":     reflect.ValueOf(x509.ExtKeyUsageMicrosoftKernelCodeSigning),
		"ExtKeyUsageMicrosoftServerGatedCrypto":     reflect.ValueOf(x509.ExtKeyUsageMicrosoftServerGatedCrypto),
		"ExtKeyUsageNetscapeServerGatedCrypto":      reflect.ValueOf(x509.ExtKeyUsageNetscapeServerGatedCrypto),
		"ExtKeyUsageOCSPSigning":                    reflect.ValueOf(x509.ExtKeyUsageOCSPSigning),
		"ExtKeyUsageServerAuth":                     reflect.ValueOf(x509.ExtKeyUsageServerAuth),
		"ExtKeyUsageTimeStamping":                   reflect.ValueOf(x509.ExtKeyUsageTimeStamping),
		"IncompatibleUsage":                         reflect.ValueOf(x509.IncompatibleUsage),
		"IncorrectPasswordError":                    reflect.ValueOf(&x509.IncorrectPasswordError).Elem(),
		"IsEncryptedPEMBlock":                       reflect.ValueOf(x509.IsEncryptedPEMBlock),
		"KeyUsageCRLSign":                           reflect.ValueOf(x509.KeyUsageCRLSign),
		"KeyUsageCertSign":                          reflect.ValueOf(x509.KeyUsageCertSign),
		"KeyUsageContentCommitment":                 reflect.ValueOf(x509.KeyUsageContentCommitment),
		"KeyUsageDataEncipherment":                  reflect.ValueOf(x509.KeyUsageDataEncipherment),
		"KeyUsageDecipherOnly":                      reflect.ValueOf(x509.KeyUsageDecipherOnly),
		"KeyUsageDigitalSignature":                  reflect.ValueOf(x509.KeyUsageDigitalSignature),
		"KeyUsageEncipherOnly":                      reflect.ValueOf(x509.KeyUsageEncipherOnly),
		"KeyUsageKeyAgreement":                      reflect.ValueOf(x509.KeyUsageKeyAgreement),
		"KeyUsageKeyEncipherment":                   reflect.ValueOf(x509.KeyUsageKeyEncipherment),
		"MD2WithRSA":                                reflect.ValueOf(x509.MD2WithRSA),
		"MD5WithRSA":                                reflect.ValueOf(x509.MD5WithRSA),
		"MarshalECPrivateKey":                       reflect.ValueOf(x509.MarshalECPrivateKey),
		"MarshalPKCS1PrivateKey":                    reflect.ValueOf(x509.MarshalPKCS1PrivateKey),
		"MarshalPKCS1PublicKey":                     reflect.ValueOf(x509.MarshalPKCS1PublicKey),
		"MarshalPKCS8PrivateKey":                    reflect.ValueOf(x509.MarshalPKCS8PrivateKey),
		"MarshalPKIXPublicKey":                      reflect.ValueOf(x509.MarshalPKIXPublicKey),
		"NameConstraintsWithoutSANs":                reflect.ValueOf(x509.NameConstraintsWithoutSANs),
		"NameMismatch":                              reflect.ValueOf(x509.NameMismatch),
		"NewCertPool":                               reflect.ValueOf(x509.NewCertPool),
		"NotAuthorizedToSign":                       reflect.ValueOf(x509.NotAuthorizedToSign),
		"PEMCipher3DES":                             reflect.ValueOf(x509.PEMCipher3DES),
		"PEMCipherAES128":                           reflect.ValueOf(x509.PEMCipherAES128),
		"PEMCipherAES192":                           reflect.ValueOf(x509.PEMCipherAES192),
		"PEMCipherAES256":                           reflect.ValueOf(x509.PEMCipherAES256),
		"PEMCipherDES":                              reflect.ValueOf(x509.PEMCipherDES),
		"ParseCRL":                                  reflect.ValueOf(x509.ParseCRL),
		"ParseCertificate":                          reflect.ValueOf(x509.ParseCertificate),
		"ParseCertificateRequest":                   reflect.ValueOf(x509.ParseCertificateRequest),
		"ParseCertificates":                         reflect.ValueOf(x509.ParseCertificates),
		"ParseDERCRL":                               reflect.ValueOf(x509.ParseDERCRL),
		"ParseECPrivateKey":                         reflect.ValueOf(x509.ParseECPrivateKey),
		"ParsePKCS1PrivateKey":                      reflect.ValueOf(x509.ParsePKCS1PrivateKey),
		"ParsePKCS1PublicKey":                       reflect.ValueOf(x509.ParsePKCS1PublicKey),
		"ParsePKCS8PrivateKey":                      reflect.ValueOf(x509.ParsePKCS8PrivateKey),
		"ParsePKIXPublicKey":                        reflect.ValueOf(x509.ParsePKIXPublicKey),
		"RSA":                                       reflect.ValueOf(x509.RSA),
		"SHA1WithRSA":                               reflect.ValueOf(x509.SHA1WithRSA),
		"SHA256WithRSA":                             reflect.ValueOf(x509.SHA256WithRSA),
		"SHA256WithRSAPSS":                          reflect.ValueOf(x509.SHA256WithRSAPSS),
		"SHA384WithRSA":                             reflect.ValueOf(x509.SHA384WithRSA),
		"SHA384WithRSAPSS":                          reflect.ValueOf(x509.SHA384WithRSAPSS),
		"SHA512WithRSA":                             reflect.ValueOf(x509.SHA512WithRSA),
		"SHA512WithRSAPSS":                          reflect.ValueOf(x509.SHA512WithRSAPSS),
		"SystemCertPool":                            reflect.ValueOf(x509.SystemCertPool),
		"TooManyConstraints":                        reflect.ValueOf(x509.TooManyConstraints),
		"TooManyIntermediates":                      reflect.ValueOf(x509.TooManyIntermediates),
		"UnconstrainedName":                         reflect.ValueOf(x509.UnconstrainedName),
		"UnknownPublicKeyAlgorithm":                 reflect.ValueOf(x509.UnknownPublicKeyAlgorithm),
		"UnknownSignatureAlgorithm":                 reflect.ValueOf(x509.UnknownSignatureAlgorithm),

		// type definitions
		"CertPool":                   reflect.ValueOf((*x509.CertPool)(nil)),
		"Certificate":                reflect.ValueOf((*x509.Certificate)(nil)),
		"CertificateInvalidError":    reflect.ValueOf((*x509.CertificateInvalidError)(nil)),
		"CertificateRequest":         reflect.ValueOf((*x509.CertificateRequest)(nil)),
		"ConstraintViolationError":   reflect.ValueOf((*x509.ConstraintViolationError)(nil)),
		"ExtKeyUsage":                reflect.ValueOf((*x509.ExtKeyUsage)(nil)),
		"HostnameError":              reflect.ValueOf((*x509.HostnameError)(nil)),
		"InsecureAlgorithmError":     reflect.ValueOf((*x509.InsecureAlgorithmError)(nil)),
		"InvalidReason":              reflect.ValueOf((*x509.InvalidReason)(nil)),
		"KeyUsage":                   reflect.ValueOf((*x509.KeyUsage)(nil)),
		"PEMCipher":                  reflect.ValueOf((*x509.PEMCipher)(nil)),
		"PublicKeyAlgorithm":         reflect.ValueOf((*x509.PublicKeyAlgorithm)(nil)),
		"SignatureAlgorithm":         reflect.ValueOf((*x509.SignatureAlgorithm)(nil)),
		"SystemRootsError":           reflect.ValueOf((*x509.SystemRootsError)(nil)),
		"UnhandledCriticalExtension": reflect.ValueOf((*x509.UnhandledCriticalExtension)(nil)),
		"UnknownAuthorityError":      reflect.ValueOf((*x509.UnknownAuthorityError)(nil)),
		"VerifyOptions":              reflect.ValueOf((*x509.VerifyOptions)(nil)),
	}
}

func init_database_sql() {
	Symbols["database/sql"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Drivers":              reflect.ValueOf(sql.Drivers),
		"ErrConnDone":          reflect.ValueOf(&sql.ErrConnDone).Elem(),
		"ErrNoRows":            reflect.ValueOf(&sql.ErrNoRows).Elem(),
		"ErrTxDone":            reflect.ValueOf(&sql.ErrTxDone).Elem(),
		"LevelDefault":         reflect.ValueOf(sql.LevelDefault),
		"LevelLinearizable":    reflect.ValueOf(sql.LevelLinearizable),
		"LevelReadCommitted":   reflect.ValueOf(sql.LevelReadCommitted),
		"LevelReadUncommitted": reflect.ValueOf(sql.LevelReadUncommitted),
		"LevelRepeatableRead":  reflect.ValueOf(sql.LevelRepeatableRead),
		"LevelSerializable":    reflect.ValueOf(sql.LevelSerializable),
		"LevelSnapshot":        reflect.ValueOf(sql.LevelSnapshot),
		"LevelWriteCommitted":  reflect.ValueOf(sql.LevelWriteCommitted),
		"Named":                reflect.ValueOf(sql.Named),
		"Open":                 reflect.ValueOf(sql.Open),
		"OpenDB":               reflect.ValueOf(sql.OpenDB),
		"Register":             reflect.ValueOf(sql.Register),

		// type definitions
		"ColumnType":     reflect.ValueOf((*sql.ColumnType)(nil)),
		"Conn":           reflect.ValueOf((*sql.Conn)(nil)),
		"DB":             reflect.ValueOf((*sql.DB)(nil)),
		"DBStats":        reflect.ValueOf((*sql.DBStats)(nil)),
		"IsolationLevel": reflect.ValueOf((*sql.IsolationLevel)(nil)),
		"NamedArg":       reflect.ValueOf((*sql.NamedArg)(nil)),
		"NullBool":       reflect.ValueOf((*sql.NullBool)(nil)),
		"NullFloat64":    reflect.ValueOf((*sql.NullFloat64)(nil)),
		"NullInt64":      reflect.ValueOf((*sql.NullInt64)(nil)),
		"NullString":     reflect.ValueOf((*sql.NullString)(nil)),
		"Out":            reflect.ValueOf((*sql.Out)(nil)),
		"RawBytes":       reflect.ValueOf((*sql.RawBytes)(nil)),
		"Result":         reflect.ValueOf((*sql.Result)(nil)),
		"Row":            reflect.ValueOf((*sql.Row)(nil)),
		"Rows":           reflect.ValueOf((*sql.Rows)(nil)),
		"Scanner":        reflect.ValueOf((*sql.Scanner)(nil)),
		"Stmt":           reflect.ValueOf((*sql.Stmt)(nil)),
		"Tx":             reflect.ValueOf((*sql.Tx)(nil)),
		"TxOptions":      reflect.ValueOf((*sql.TxOptions)(nil)),

		// interface wrapper definitions
		"_Result":  reflect.ValueOf((*_database_sql_Result)(nil)),
		"_Scanner": reflect.ValueOf((*_database_sql_Scanner)(nil)),
	}
}

// _database_sql_Result is an interface wrapper for Result type
type _database_sql_Result struct {
	WLastInsertId func() (int64, error)
	WRowsAffected func() (int64, error)
}

func (W _database_sql_Result) LastInsertId() (int64, error) { return W.WLastInsertId() }
func (W _database_sql_Result) RowsAffected() (int64, error) { return W.WRowsAffected() }

// _database_sql_Scanner is an interface wrapper for Scanner type
type _database_sql_Scanner struct {
	WScan func(src interface{}) error
}

func (W _database_sql_Scanner) Scan(src interface{}) error { return W.WScan(src) }

func init_debug_dwarf() {
	Symbols["debug/dwarf"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AttrAbstractOrigin":        reflect.ValueOf(dwarf.AttrAbstractOrigin),
		"AttrAccessibility":         reflect.ValueOf(dwarf.AttrAccessibility),
		"AttrAddrClass":             reflect.ValueOf(dwarf.AttrAddrClass),
		"AttrAllocated":             reflect.ValueOf(dwarf.AttrAllocated),
		"AttrArtificial":            reflect.ValueOf(dwarf.AttrArtificial),
		"AttrAssociated":            reflect.ValueOf(dwarf.AttrAssociated),
		"AttrBaseTypes":             reflect.ValueOf(dwarf.AttrBaseTypes),
		"AttrBitOffset":             reflect.ValueOf(dwarf.AttrBitOffset),
		"AttrBitSize":               reflect.ValueOf(dwarf.AttrBitSize),
		"AttrByteSize":              reflect.ValueOf(dwarf.AttrByteSize),
		"AttrCallColumn":            reflect.ValueOf(dwarf.AttrCallColumn),
		"AttrCallFile":              reflect.ValueOf(dwarf.AttrCallFile),
		"AttrCallLine":              reflect.ValueOf(dwarf.AttrCallLine),
		"AttrCalling":               reflect.ValueOf(dwarf.AttrCalling),
		"AttrCommonRef":             reflect.ValueOf(dwarf.AttrCommonRef),
		"AttrCompDir":               reflect.ValueOf(dwarf.AttrCompDir),
		"AttrConstValue":            reflect.ValueOf(dwarf.AttrConstValue),
		"AttrContainingType":        reflect.ValueOf(dwarf.AttrContainingType),
		"AttrCount":                 reflect.ValueOf(dwarf.AttrCount),
		"AttrDataLocation":          reflect.ValueOf(dwarf.AttrDataLocation),
		"AttrDataMemberLoc":         reflect.ValueOf(dwarf.AttrDataMemberLoc),
		"AttrDeclColumn":            reflect.ValueOf(dwarf.AttrDeclColumn),
		"AttrDeclFile":              reflect.ValueOf(dwarf.AttrDeclFile),
		"AttrDeclLine":              reflect.ValueOf(dwarf.AttrDeclLine),
		"AttrDeclaration":           reflect.ValueOf(dwarf.AttrDeclaration),
		"AttrDefaultValue":          reflect.ValueOf(dwarf.AttrDefaultValue),
		"AttrDescription":           reflect.ValueOf(dwarf.AttrDescription),
		"AttrDiscr":                 reflect.ValueOf(dwarf.AttrDiscr),
		"AttrDiscrList":             reflect.ValueOf(dwarf.AttrDiscrList),
		"AttrDiscrValue":            reflect.ValueOf(dwarf.AttrDiscrValue),
		"AttrEncoding":              reflect.ValueOf(dwarf.AttrEncoding),
		"AttrEntrypc":               reflect.ValueOf(dwarf.AttrEntrypc),
		"AttrExtension":             reflect.ValueOf(dwarf.AttrExtension),
		"AttrExternal":              reflect.ValueOf(dwarf.AttrExternal),
		"AttrFrameBase":             reflect.ValueOf(dwarf.AttrFrameBase),
		"AttrFriend":                reflect.ValueOf(dwarf.AttrFriend),
		"AttrHighpc":                reflect.ValueOf(dwarf.AttrHighpc),
		"AttrIdentifierCase":        reflect.ValueOf(dwarf.AttrIdentifierCase),
		"AttrImport":                reflect.ValueOf(dwarf.AttrImport),
		"AttrInline":                reflect.ValueOf(dwarf.AttrInline),
		"AttrIsOptional":            reflect.ValueOf(dwarf.AttrIsOptional),
		"AttrLanguage":              reflect.ValueOf(dwarf.AttrLanguage),
		"AttrLocation":              reflect.ValueOf(dwarf.AttrLocation),
		"AttrLowerBound":            reflect.ValueOf(dwarf.AttrLowerBound),
		"AttrLowpc":                 reflect.ValueOf(dwarf.AttrLowpc),
		"AttrMacroInfo":             reflect.ValueOf(dwarf.AttrMacroInfo),
		"AttrName":                  reflect.ValueOf(dwarf.AttrName),
		"AttrNamelistItem":          reflect.ValueOf(dwarf.AttrNamelistItem),
		"AttrOrdering":              reflect.ValueOf(dwarf.AttrOrdering),
		"AttrPriority":              reflect.ValueOf(dwarf.AttrPriority),
		"AttrProducer":              reflect.ValueOf(dwarf.AttrProducer),
		"AttrPrototyped":            reflect.ValueOf(dwarf.AttrPrototyped),
		"AttrRanges":                reflect.ValueOf(dwarf.AttrRanges),
		"AttrReturnAddr":            reflect.ValueOf(dwarf.AttrReturnAddr),
		"AttrSegment":               reflect.ValueOf(dwarf.AttrSegment),
		"AttrSibling":               reflect.ValueOf(dwarf.AttrSibling),
		"AttrSpecification":         reflect.ValueOf(dwarf.AttrSpecification),
		"AttrStartScope":            reflect.ValueOf(dwarf.AttrStartScope),
		"AttrStaticLink":            reflect.ValueOf(dwarf.AttrStaticLink),
		"AttrStmtList":              reflect.ValueOf(dwarf.AttrStmtList),
		"AttrStride":                reflect.ValueOf(dwarf.AttrStride),
		"AttrStrideSize":            reflect.ValueOf(dwarf.AttrStrideSize),
		"AttrStringLength":          reflect.ValueOf(dwarf.AttrStringLength),
		"AttrTrampoline":            reflect.ValueOf(dwarf.AttrTrampoline),
		"AttrType":                  reflect.ValueOf(dwarf.AttrType),
		"AttrUpperBound":            reflect.ValueOf(dwarf.AttrUpperBound),
		"AttrUseLocation":           reflect.ValueOf(dwarf.AttrUseLocation),
		"AttrUseUTF8":               reflect.ValueOf(dwarf.AttrUseUTF8),
		"AttrVarParam":              reflect.ValueOf(dwarf.AttrVarParam),
		"AttrVirtuality":            reflect.ValueOf(dwarf.AttrVirtuality),
		"AttrVisibility":            reflect.ValueOf(dwarf.AttrVisibility),
		"AttrVtableElemLoc":         reflect.ValueOf(dwarf.AttrVtableElemLoc),
		"ClassAddress":              reflect.ValueOf(dwarf.ClassAddress),
		"ClassBlock":                reflect.ValueOf(dwarf.ClassBlock),
		"ClassConstant":             reflect.ValueOf(dwarf.ClassConstant),
		"ClassExprLoc":              reflect.ValueOf(dwarf.ClassExprLoc),
		"ClassFlag":                 reflect.ValueOf(dwarf.ClassFlag),
		"ClassLinePtr":              reflect.ValueOf(dwarf.ClassLinePtr),
		"ClassLocListPtr":           reflect.ValueOf(dwarf.ClassLocListPtr),
		"ClassMacPtr":               reflect.ValueOf(dwarf.ClassMacPtr),
		"ClassRangeListPtr":         reflect.ValueOf(dwarf.ClassRangeListPtr),
		"ClassReference":            reflect.ValueOf(dwarf.ClassReference),
		"ClassReferenceAlt":         reflect.ValueOf(dwarf.ClassReferenceAlt),
		"ClassReferenceSig":         reflect.ValueOf(dwarf.ClassReferenceSig),
		"ClassString":               reflect.ValueOf(dwarf.ClassString),
		"ClassStringAlt":            reflect.ValueOf(dwarf.ClassStringAlt),
		"ClassUnknown":              reflect.ValueOf(dwarf.ClassUnknown),
		"ErrUnknownPC":              reflect.ValueOf(&dwarf.ErrUnknownPC).Elem(),
		"New":                       reflect.ValueOf(dwarf.New),
		"TagAccessDeclaration":      reflect.ValueOf(dwarf.TagAccessDeclaration),
		"TagArrayType":              reflect.ValueOf(dwarf.TagArrayType),
		"TagBaseType":               reflect.ValueOf(dwarf.TagBaseType),
		"TagCatchDwarfBlock":        reflect.ValueOf(dwarf.TagCatchDwarfBlock),
		"TagClassType":              reflect.ValueOf(dwarf.TagClassType),
		"TagCommonDwarfBlock":       reflect.ValueOf(dwarf.TagCommonDwarfBlock),
		"TagCommonInclusion":        reflect.ValueOf(dwarf.TagCommonInclusion),
		"TagCompileUnit":            reflect.ValueOf(dwarf.TagCompileUnit),
		"TagCondition":              reflect.ValueOf(dwarf.TagCondition),
		"TagConstType":              reflect.ValueOf(dwarf.TagConstType),
		"TagConstant":               reflect.ValueOf(dwarf.TagConstant),
		"TagDwarfProcedure":         reflect.ValueOf(dwarf.TagDwarfProcedure),
		"TagEntryPoint":             reflect.ValueOf(dwarf.TagEntryPoint),
		"TagEnumerationType":        reflect.ValueOf(dwarf.TagEnumerationType),
		"TagEnumerator":             reflect.ValueOf(dwarf.TagEnumerator),
		"TagFileType":               reflect.ValueOf(dwarf.TagFileType),
		"TagFormalParameter":        reflect.ValueOf(dwarf.TagFormalParameter),
		"TagFriend":                 reflect.ValueOf(dwarf.TagFriend),
		"TagImportedDeclaration":    reflect.ValueOf(dwarf.TagImportedDeclaration),
		"TagImportedModule":         reflect.ValueOf(dwarf.TagImportedModule),
		"TagImportedUnit":           reflect.ValueOf(dwarf.TagImportedUnit),
		"TagInheritance":            reflect.ValueOf(dwarf.TagInheritance),
		"TagInlinedSubroutine":      reflect.ValueOf(dwarf.TagInlinedSubroutine),
		"TagInterfaceType":          reflect.ValueOf(dwarf.TagInterfaceType),
		"TagLabel":                  reflect.ValueOf(dwarf.TagLabel),
		"TagLexDwarfBlock":          reflect.ValueOf(dwarf.TagLexDwarfBlock),
		"TagMember":                 reflect.ValueOf(dwarf.TagMember),
		"TagModule":                 reflect.ValueOf(dwarf.TagModule),
		"TagMutableType":            reflect.ValueOf(dwarf.TagMutableType),
		"TagNamelist":               reflect.ValueOf(dwarf.TagNamelist),
		"TagNamelistItem":           reflect.ValueOf(dwarf.TagNamelistItem),
		"TagNamespace":              reflect.ValueOf(dwarf.TagNamespace),
		"TagPackedType":             reflect.ValueOf(dwarf.TagPackedType),
		"TagPartialUnit":            reflect.ValueOf(dwarf.TagPartialUnit),
		"TagPointerType":            reflect.ValueOf(dwarf.TagPointerType),
		"TagPtrToMemberType":        reflect.ValueOf(dwarf.TagPtrToMemberType),
		"TagReferenceType":          reflect.ValueOf(dwarf.TagReferenceType),
		"TagRestrictType":           reflect.ValueOf(dwarf.TagRestrictType),
		"TagRvalueReferenceType":    reflect.ValueOf(dwarf.TagRvalueReferenceType),
		"TagSetType":                reflect.ValueOf(dwarf.TagSetType),
		"TagSharedType":             reflect.ValueOf(dwarf.TagSharedType),
		"TagStringType":             reflect.ValueOf(dwarf.TagStringType),
		"TagStructType":             reflect.ValueOf(dwarf.TagStructType),
		"TagSubprogram":             reflect.ValueOf(dwarf.TagSubprogram),
		"TagSubrangeType":           reflect.ValueOf(dwarf.TagSubrangeType),
		"TagSubroutineType":         reflect.ValueOf(dwarf.TagSubroutineType),
		"TagTemplateAlias":          reflect.ValueOf(dwarf.TagTemplateAlias),
		"TagTemplateTypeParameter":  reflect.ValueOf(dwarf.TagTemplateTypeParameter),
		"TagTemplateValueParameter": reflect.ValueOf(dwarf.TagTemplateValueParameter),
		"TagThrownType":             reflect.ValueOf(dwarf.TagThrownType),
		"TagTryDwarfBlock":          reflect.ValueOf(dwarf.TagTryDwarfBlock),
		"TagTypeUnit":               reflect.ValueOf(dwarf.TagTypeUnit),
		"TagTypedef":                reflect.ValueOf(dwarf.TagTypedef),
		"TagUnionType":              reflect.ValueOf(dwarf.TagUnionType),
		"TagUnspecifiedParameters":  reflect.ValueOf(dwarf.TagUnspecifiedParameters),
		"TagUnspecifiedType":        reflect.ValueOf(dwarf.TagUnspecifiedType),
		"TagVariable":               reflect.ValueOf(dwarf.TagVariable),
		"TagVariant":                reflect.ValueOf(dwarf.TagVariant),
		"TagVariantPart":            reflect.ValueOf(dwarf.TagVariantPart),
		"TagVolatileType":           reflect.ValueOf(dwarf.TagVolatileType),
		"TagWithStmt":               reflect.ValueOf(dwarf.TagWithStmt),

		// type definitions
		"AddrType":        reflect.ValueOf((*dwarf.AddrType)(nil)),
		"ArrayType":       reflect.ValueOf((*dwarf.ArrayType)(nil)),
		"Attr":            reflect.ValueOf((*dwarf.Attr)(nil)),
		"BasicType":       reflect.ValueOf((*dwarf.BasicType)(nil)),
		"BoolType":        reflect.ValueOf((*dwarf.BoolType)(nil)),
		"CharType":        reflect.ValueOf((*dwarf.CharType)(nil)),
		"Class":           reflect.ValueOf((*dwarf.Class)(nil)),
		"CommonType":      reflect.ValueOf((*dwarf.CommonType)(nil)),
		"ComplexType":     reflect.ValueOf((*dwarf.ComplexType)(nil)),
		"Data":            reflect.ValueOf((*dwarf.Data)(nil)),
		"DecodeError":     reflect.ValueOf((*dwarf.DecodeError)(nil)),
		"DotDotDotType":   reflect.ValueOf((*dwarf.DotDotDotType)(nil)),
		"Entry":           reflect.ValueOf((*dwarf.Entry)(nil)),
		"EnumType":        reflect.ValueOf((*dwarf.EnumType)(nil)),
		"EnumValue":       reflect.ValueOf((*dwarf.EnumValue)(nil)),
		"Field":           reflect.ValueOf((*dwarf.Field)(nil)),
		"FloatType":       reflect.ValueOf((*dwarf.FloatType)(nil)),
		"FuncType":        reflect.ValueOf((*dwarf.FuncType)(nil)),
		"IntType":         reflect.ValueOf((*dwarf.IntType)(nil)),
		"LineEntry":       reflect.ValueOf((*dwarf.LineEntry)(nil)),
		"LineFile":        reflect.ValueOf((*dwarf.LineFile)(nil)),
		"LineReader":      reflect.ValueOf((*dwarf.LineReader)(nil)),
		"LineReaderPos":   reflect.ValueOf((*dwarf.LineReaderPos)(nil)),
		"Offset":          reflect.ValueOf((*dwarf.Offset)(nil)),
		"PtrType":         reflect.ValueOf((*dwarf.PtrType)(nil)),
		"QualType":        reflect.ValueOf((*dwarf.QualType)(nil)),
		"Reader":          reflect.ValueOf((*dwarf.Reader)(nil)),
		"StructField":     reflect.ValueOf((*dwarf.StructField)(nil)),
		"StructType":      reflect.ValueOf((*dwarf.StructType)(nil)),
		"Tag":             reflect.ValueOf((*dwarf.Tag)(nil)),
		"Type":            reflect.ValueOf((*dwarf.Type)(nil)),
		"TypedefType":     reflect.ValueOf((*dwarf.TypedefType)(nil)),
		"UcharType":       reflect.ValueOf((*dwarf.UcharType)(nil)),
		"UintType":        reflect.ValueOf((*dwarf.UintType)(nil)),
		"UnspecifiedType": reflect.ValueOf((*dwarf.UnspecifiedType)(nil)),
		"VoidType":        reflect.ValueOf((*dwarf.VoidType)(nil)),

		// interface wrapper definitions
		"_Type": reflect.ValueOf((*_debug_dwarf_Type)(nil)),
	}
}

// _debug_dwarf_Type is an interface wrapper for Type type
type _debug_dwarf_Type struct {
	WCommon func() *dwarf.CommonType
	WSize   func() int64
	WString func() string
}

func (W _debug_dwarf_Type) Common() *dwarf.CommonType { return W.WCommon() }
func (W _debug_dwarf_Type) Size() int64               { return W.WSize() }
func (W _debug_dwarf_Type) String() string            { return W.WString() }

func init_debug_elf() {
	Symbols["debug/elf"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ARM_MAGIC_TRAMP_NUMBER":             reflect.ValueOf(constant.MakeFromLiteral("1543503875", token.INT, 0)),
		"COMPRESS_HIOS":                      reflect.ValueOf(elf.COMPRESS_HIOS),
		"COMPRESS_HIPROC":                    reflect.ValueOf(elf.COMPRESS_HIPROC),
		"COMPRESS_LOOS":                      reflect.ValueOf(elf.COMPRESS_LOOS),
		"COMPRESS_LOPROC":                    reflect.ValueOf(elf.COMPRESS_LOPROC),
		"COMPRESS_ZLIB":                      reflect.ValueOf(elf.COMPRESS_ZLIB),
		"DF_BIND_NOW":                        reflect.ValueOf(elf.DF_BIND_NOW),
		"DF_ORIGIN":                          reflect.ValueOf(elf.DF_ORIGIN),
		"DF_STATIC_TLS":                      reflect.ValueOf(elf.DF_STATIC_TLS),
		"DF_SYMBOLIC":                        reflect.ValueOf(elf.DF_SYMBOLIC),
		"DF_TEXTREL":                         reflect.ValueOf(elf.DF_TEXTREL),
		"DT_BIND_NOW":                        reflect.ValueOf(elf.DT_BIND_NOW),
		"DT_DEBUG":                           reflect.ValueOf(elf.DT_DEBUG),
		"DT_ENCODING":                        reflect.ValueOf(elf.DT_ENCODING),
		"DT_FINI":                            reflect.ValueOf(elf.DT_FINI),
		"DT_FINI_ARRAY":                      reflect.ValueOf(elf.DT_FINI_ARRAY),
		"DT_FINI_ARRAYSZ":                    reflect.ValueOf(elf.DT_FINI_ARRAYSZ),
		"DT_FLAGS":                           reflect.ValueOf(elf.DT_FLAGS),
		"DT_HASH":                            reflect.ValueOf(elf.DT_HASH),
		"DT_HIOS":                            reflect.ValueOf(elf.DT_HIOS),
		"DT_HIPROC":                          reflect.ValueOf(elf.DT_HIPROC),
		"DT_INIT":                            reflect.ValueOf(elf.DT_INIT),
		"DT_INIT_ARRAY":                      reflect.ValueOf(elf.DT_INIT_ARRAY),
		"DT_INIT_ARRAYSZ":                    reflect.ValueOf(elf.DT_INIT_ARRAYSZ),
		"DT_JMPREL":                          reflect.ValueOf(elf.DT_JMPREL),
		"DT_LOOS":                            reflect.ValueOf(elf.DT_LOOS),
		"DT_LOPROC":                          reflect.ValueOf(elf.DT_LOPROC),
		"DT_NEEDED":                          reflect.ValueOf(elf.DT_NEEDED),
		"DT_NULL":                            reflect.ValueOf(elf.DT_NULL),
		"DT_PLTGOT":                          reflect.ValueOf(elf.DT_PLTGOT),
		"DT_PLTREL":                          reflect.ValueOf(elf.DT_PLTREL),
		"DT_PLTRELSZ":                        reflect.ValueOf(elf.DT_PLTRELSZ),
		"DT_PREINIT_ARRAY":                   reflect.ValueOf(elf.DT_PREINIT_ARRAY),
		"DT_PREINIT_ARRAYSZ":                 reflect.ValueOf(elf.DT_PREINIT_ARRAYSZ),
		"DT_REL":                             reflect.ValueOf(elf.DT_REL),
		"DT_RELA":                            reflect.ValueOf(elf.DT_RELA),
		"DT_RELAENT":                         reflect.ValueOf(elf.DT_RELAENT),
		"DT_RELASZ":                          reflect.ValueOf(elf.DT_RELASZ),
		"DT_RELENT":                          reflect.ValueOf(elf.DT_RELENT),
		"DT_RELSZ":                           reflect.ValueOf(elf.DT_RELSZ),
		"DT_RPATH":                           reflect.ValueOf(elf.DT_RPATH),
		"DT_RUNPATH":                         reflect.ValueOf(elf.DT_RUNPATH),
		"DT_SONAME":                          reflect.ValueOf(elf.DT_SONAME),
		"DT_STRSZ":                           reflect.ValueOf(elf.DT_STRSZ),
		"DT_STRTAB":                          reflect.ValueOf(elf.DT_STRTAB),
		"DT_SYMBOLIC":                        reflect.ValueOf(elf.DT_SYMBOLIC),
		"DT_SYMENT":                          reflect.ValueOf(elf.DT_SYMENT),
		"DT_SYMTAB":                          reflect.ValueOf(elf.DT_SYMTAB),
		"DT_TEXTREL":                         reflect.ValueOf(elf.DT_TEXTREL),
		"DT_VERNEED":                         reflect.ValueOf(elf.DT_VERNEED),
		"DT_VERNEEDNUM":                      reflect.ValueOf(elf.DT_VERNEEDNUM),
		"DT_VERSYM":                          reflect.ValueOf(elf.DT_VERSYM),
		"EI_ABIVERSION":                      reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"EI_CLASS":                           reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"EI_DATA":                            reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"EI_NIDENT":                          reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"EI_OSABI":                           reflect.ValueOf(constant.MakeFromLiteral("7", token.INT, 0)),
		"EI_PAD":                             reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"EI_VERSION":                         reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"ELFCLASS32":                         reflect.ValueOf(elf.ELFCLASS32),
		"ELFCLASS64":                         reflect.ValueOf(elf.ELFCLASS64),
		"ELFCLASSNONE":                       reflect.ValueOf(elf.ELFCLASSNONE),
		"ELFDATA2LSB":                        reflect.ValueOf(elf.ELFDATA2LSB),
		"ELFDATA2MSB":                        reflect.ValueOf(elf.ELFDATA2MSB),
		"ELFDATANONE":                        reflect.ValueOf(elf.ELFDATANONE),
		"ELFMAG":                             reflect.ValueOf(constant.MakeFromLiteral("\"\\u007fELF\"", token.STRING, 0)),
		"ELFOSABI_86OPEN":                    reflect.ValueOf(elf.ELFOSABI_86OPEN),
		"ELFOSABI_AIX":                       reflect.ValueOf(elf.ELFOSABI_AIX),
		"ELFOSABI_ARM":                       reflect.ValueOf(elf.ELFOSABI_ARM),
		"ELFOSABI_AROS":                      reflect.ValueOf(elf.ELFOSABI_AROS),
		"ELFOSABI_CLOUDABI":                  reflect.ValueOf(elf.ELFOSABI_CLOUDABI),
		"ELFOSABI_FENIXOS":                   reflect.ValueOf(elf.ELFOSABI_FENIXOS),
		"ELFOSABI_FREEBSD":                   reflect.ValueOf(elf.ELFOSABI_FREEBSD),
		"ELFOSABI_HPUX":                      reflect.ValueOf(elf.ELFOSABI_HPUX),
		"ELFOSABI_HURD":                      reflect.ValueOf(elf.ELFOSABI_HURD),
		"ELFOSABI_IRIX":                      reflect.ValueOf(elf.ELFOSABI_IRIX),
		"ELFOSABI_LINUX":                     reflect.ValueOf(elf.ELFOSABI_LINUX),
		"ELFOSABI_MODESTO":                   reflect.ValueOf(elf.ELFOSABI_MODESTO),
		"ELFOSABI_NETBSD":                    reflect.ValueOf(elf.ELFOSABI_NETBSD),
		"ELFOSABI_NONE":                      reflect.ValueOf(elf.ELFOSABI_NONE),
		"ELFOSABI_NSK":                       reflect.ValueOf(elf.ELFOSABI_NSK),
		"ELFOSABI_OPENBSD":                   reflect.ValueOf(elf.ELFOSABI_OPENBSD),
		"ELFOSABI_OPENVMS":                   reflect.ValueOf(elf.ELFOSABI_OPENVMS),
		"ELFOSABI_SOLARIS":                   reflect.ValueOf(elf.ELFOSABI_SOLARIS),
		"ELFOSABI_STANDALONE":                reflect.ValueOf(elf.ELFOSABI_STANDALONE),
		"ELFOSABI_TRU64":                     reflect.ValueOf(elf.ELFOSABI_TRU64),
		"EM_386":                             reflect.ValueOf(elf.EM_386),
		"EM_486":                             reflect.ValueOf(elf.EM_486),
		"EM_56800EX":                         reflect.ValueOf(elf.EM_56800EX),
		"EM_68HC05":                          reflect.ValueOf(elf.EM_68HC05),
		"EM_68HC08":                          reflect.ValueOf(elf.EM_68HC08),
		"EM_68HC11":                          reflect.ValueOf(elf.EM_68HC11),
		"EM_68HC12":                          reflect.ValueOf(elf.EM_68HC12),
		"EM_68HC16":                          reflect.ValueOf(elf.EM_68HC16),
		"EM_68K":                             reflect.ValueOf(elf.EM_68K),
		"EM_78KOR":                           reflect.ValueOf(elf.EM_78KOR),
		"EM_8051":                            reflect.ValueOf(elf.EM_8051),
		"EM_860":                             reflect.ValueOf(elf.EM_860),
		"EM_88K":                             reflect.ValueOf(elf.EM_88K),
		"EM_960":                             reflect.ValueOf(elf.EM_960),
		"EM_AARCH64":                         reflect.ValueOf(elf.EM_AARCH64),
		"EM_ALPHA":                           reflect.ValueOf(elf.EM_ALPHA),
		"EM_ALPHA_STD":                       reflect.ValueOf(elf.EM_ALPHA_STD),
		"EM_ALTERA_NIOS2":                    reflect.ValueOf(elf.EM_ALTERA_NIOS2),
		"EM_AMDGPU":                          reflect.ValueOf(elf.EM_AMDGPU),
		"EM_ARC":                             reflect.ValueOf(elf.EM_ARC),
		"EM_ARCA":                            reflect.ValueOf(elf.EM_ARCA),
		"EM_ARC_COMPACT":                     reflect.ValueOf(elf.EM_ARC_COMPACT),
		"EM_ARC_COMPACT2":                    reflect.ValueOf(elf.EM_ARC_COMPACT2),
		"EM_ARM":                             reflect.ValueOf(elf.EM_ARM),
		"EM_AVR":                             reflect.ValueOf(elf.EM_AVR),
		"EM_AVR32":                           reflect.ValueOf(elf.EM_AVR32),
		"EM_BA1":                             reflect.ValueOf(elf.EM_BA1),
		"EM_BA2":                             reflect.ValueOf(elf.EM_BA2),
		"EM_BLACKFIN":                        reflect.ValueOf(elf.EM_BLACKFIN),
		"EM_BPF":                             reflect.ValueOf(elf.EM_BPF),
		"EM_C166":                            reflect.ValueOf(elf.EM_C166),
		"EM_CDP":                             reflect.ValueOf(elf.EM_CDP),
		"EM_CE":                              reflect.ValueOf(elf.EM_CE),
		"EM_CLOUDSHIELD":                     reflect.ValueOf(elf.EM_CLOUDSHIELD),
		"EM_COGE":                            reflect.ValueOf(elf.EM_COGE),
		"EM_COLDFIRE":                        reflect.ValueOf(elf.EM_COLDFIRE),
		"EM_COOL":                            reflect.ValueOf(elf.EM_COOL),
		"EM_COREA_1ST":                       reflect.ValueOf(elf.EM_COREA_1ST),
		"EM_COREA_2ND":                       reflect.ValueOf(elf.EM_COREA_2ND),
		"EM_CR":                              reflect.ValueOf(elf.EM_CR),
		"EM_CR16":                            reflect.ValueOf(elf.EM_CR16),
		"EM_CRAYNV2":                         reflect.ValueOf(elf.EM_CRAYNV2),
		"EM_CRIS":                            reflect.ValueOf(elf.EM_CRIS),
		"EM_CRX":                             reflect.ValueOf(elf.EM_CRX),
		"EM_CSR_KALIMBA":                     reflect.ValueOf(elf.EM_CSR_KALIMBA),
		"EM_CUDA":                            reflect.ValueOf(elf.EM_CUDA),
		"EM_CYPRESS_M8C":                     reflect.ValueOf(elf.EM_CYPRESS_M8C),
		"EM_D10V":                            reflect.ValueOf(elf.EM_D10V),
		"EM_D30V":                            reflect.ValueOf(elf.EM_D30V),
		"EM_DSP24":                           reflect.ValueOf(elf.EM_DSP24),
		"EM_DSPIC30F":                        reflect.ValueOf(elf.EM_DSPIC30F),
		"EM_DXP":                             reflect.ValueOf(elf.EM_DXP),
		"EM_ECOG1":                           reflect.ValueOf(elf.EM_ECOG1),
		"EM_ECOG16":                          reflect.ValueOf(elf.EM_ECOG16),
		"EM_ECOG1X":                          reflect.ValueOf(elf.EM_ECOG1X),
		"EM_ECOG2":                           reflect.ValueOf(elf.EM_ECOG2),
		"EM_ETPU":                            reflect.ValueOf(elf.EM_ETPU),
		"EM_EXCESS":                          reflect.ValueOf(elf.EM_EXCESS),
		"EM_F2MC16":                          reflect.ValueOf(elf.EM_F2MC16),
		"EM_FIREPATH":                        reflect.ValueOf(elf.EM_FIREPATH),
		"EM_FR20":                            reflect.ValueOf(elf.EM_FR20),
		"EM_FR30":                            reflect.ValueOf(elf.EM_FR30),
		"EM_FT32":                            reflect.ValueOf(elf.EM_FT32),
		"EM_FX66":                            reflect.ValueOf(elf.EM_FX66),
		"EM_H8S":                             reflect.ValueOf(elf.EM_H8S),
		"EM_H8_300":                          reflect.ValueOf(elf.EM_H8_300),
		"EM_H8_300H":                         reflect.ValueOf(elf.EM_H8_300H),
		"EM_H8_500":                          reflect.ValueOf(elf.EM_H8_500),
		"EM_HUANY":                           reflect.ValueOf(elf.EM_HUANY),
		"EM_IA_64":                           reflect.ValueOf(elf.EM_IA_64),
		"EM_INTEL205":                        reflect.ValueOf(elf.EM_INTEL205),
		"EM_INTEL206":                        reflect.ValueOf(elf.EM_INTEL206),
		"EM_INTEL207":                        reflect.ValueOf(elf.EM_INTEL207),
		"EM_INTEL208":                        reflect.ValueOf(elf.EM_INTEL208),
		"EM_INTEL209":                        reflect.ValueOf(elf.EM_INTEL209),
		"EM_IP2K":                            reflect.ValueOf(elf.EM_IP2K),
		"EM_JAVELIN":                         reflect.ValueOf(elf.EM_JAVELIN),
		"EM_K10M":                            reflect.ValueOf(elf.EM_K10M),
		"EM_KM32":                            reflect.ValueOf(elf.EM_KM32),
		"EM_KMX16":                           reflect.ValueOf(elf.EM_KMX16),
		"EM_KMX32":                           reflect.ValueOf(elf.EM_KMX32),
		"EM_KMX8":                            reflect.ValueOf(elf.EM_KMX8),
		"EM_KVARC":                           reflect.ValueOf(elf.EM_KVARC),
		"EM_L10M":                            reflect.ValueOf(elf.EM_L10M),
		"EM_LANAI":                           reflect.ValueOf(elf.EM_LANAI),
		"EM_LATTICEMICO32":                   reflect.ValueOf(elf.EM_LATTICEMICO32),
		"EM_M16C":                            reflect.ValueOf(elf.EM_M16C),
		"EM_M32":                             reflect.ValueOf(elf.EM_M32),
		"EM_M32C":                            reflect.ValueOf(elf.EM_M32C),
		"EM_M32R":                            reflect.ValueOf(elf.EM_M32R),
		"EM_MANIK":                           reflect.ValueOf(elf.EM_MANIK),
		"EM_MAX":                             reflect.ValueOf(elf.EM_MAX),
		"EM_MAXQ30":                          reflect.ValueOf(elf.EM_MAXQ30),
		"EM_MCHP_PIC":                        reflect.ValueOf(elf.EM_MCHP_PIC),
		"EM_MCST_ELBRUS":                     reflect.ValueOf(elf.EM_MCST_ELBRUS),
		"EM_ME16":                            reflect.ValueOf(elf.EM_ME16),
		"EM_METAG":                           reflect.ValueOf(elf.EM_METAG),
		"EM_MICROBLAZE":                      reflect.ValueOf(elf.EM_MICROBLAZE),
		"EM_MIPS":                            reflect.ValueOf(elf.EM_MIPS),
		"EM_MIPS_RS3_LE":                     reflect.ValueOf(elf.EM_MIPS_RS3_LE),
		"EM_MIPS_RS4_BE":                     reflect.ValueOf(elf.EM_MIPS_RS4_BE),
		"EM_MIPS_X":                          reflect.ValueOf(elf.EM_MIPS_X),
		"EM_MMA":                             reflect.ValueOf(elf.EM_MMA),
		"EM_MMDSP_PLUS":                      reflect.ValueOf(elf.EM_MMDSP_PLUS),
		"EM_MMIX":                            reflect.ValueOf(elf.EM_MMIX),
		"EM_MN10200":                         reflect.ValueOf(elf.EM_MN10200),
		"EM_MN10300":                         reflect.ValueOf(elf.EM_MN10300),
		"EM_MOXIE":                           reflect.ValueOf(elf.EM_MOXIE),
		"EM_MSP430":                          reflect.ValueOf(elf.EM_MSP430),
		"EM_NCPU":                            reflect.ValueOf(elf.EM_NCPU),
		"EM_NDR1":                            reflect.ValueOf(elf.EM_NDR1),
		"EM_NDS32":                           reflect.ValueOf(elf.EM_NDS32),
		"EM_NONE":                            reflect.ValueOf(elf.EM_NONE),
		"EM_NORC":                            reflect.ValueOf(elf.EM_NORC),
		"EM_NS32K":                           reflect.ValueOf(elf.EM_NS32K),
		"EM_OPEN8":                           reflect.ValueOf(elf.EM_OPEN8),
		"EM_OPENRISC":                        reflect.ValueOf(elf.EM_OPENRISC),
		"EM_PARISC":                          reflect.ValueOf(elf.EM_PARISC),
		"EM_PCP":                             reflect.ValueOf(elf.EM_PCP),
		"EM_PDP10":                           reflect.ValueOf(elf.EM_PDP10),
		"EM_PDP11":                           reflect.ValueOf(elf.EM_PDP11),
		"EM_PDSP":                            reflect.ValueOf(elf.EM_PDSP),
		"EM_PJ":                              reflect.ValueOf(elf.EM_PJ),
		"EM_PPC":                             reflect.ValueOf(elf.EM_PPC),
		"EM_PPC64":                           reflect.ValueOf(elf.EM_PPC64),
		"EM_PRISM":                           reflect.ValueOf(elf.EM_PRISM),
		"EM_QDSP6":                           reflect.ValueOf(elf.EM_QDSP6),
		"EM_R32C":                            reflect.ValueOf(elf.EM_R32C),
		"EM_RCE":                             reflect.ValueOf(elf.EM_RCE),
		"EM_RH32":                            reflect.ValueOf(elf.EM_RH32),
		"EM_RISCV":                           reflect.ValueOf(elf.EM_RISCV),
		"EM_RL78":                            reflect.ValueOf(elf.EM_RL78),
		"EM_RS08":                            reflect.ValueOf(elf.EM_RS08),
		"EM_RX":                              reflect.ValueOf(elf.EM_RX),
		"EM_S370":                            reflect.ValueOf(elf.EM_S370),
		"EM_S390":                            reflect.ValueOf(elf.EM_S390),
		"EM_SCORE7":                          reflect.ValueOf(elf.EM_SCORE7),
		"EM_SEP":                             reflect.ValueOf(elf.EM_SEP),
		"EM_SE_C17":                          reflect.ValueOf(elf.EM_SE_C17),
		"EM_SE_C33":                          reflect.ValueOf(elf.EM_SE_C33),
		"EM_SH":                              reflect.ValueOf(elf.EM_SH),
		"EM_SHARC":                           reflect.ValueOf(elf.EM_SHARC),
		"EM_SLE9X":                           reflect.ValueOf(elf.EM_SLE9X),
		"EM_SNP1K":                           reflect.ValueOf(elf.EM_SNP1K),
		"EM_SPARC":                           reflect.ValueOf(elf.EM_SPARC),
		"EM_SPARC32PLUS":                     reflect.ValueOf(elf.EM_SPARC32PLUS),
		"EM_SPARCV9":                         reflect.ValueOf(elf.EM_SPARCV9),
		"EM_ST100":                           reflect.ValueOf(elf.EM_ST100),
		"EM_ST19":                            reflect.ValueOf(elf.EM_ST19),
		"EM_ST200":                           reflect.ValueOf(elf.EM_ST200),
		"EM_ST7":                             reflect.ValueOf(elf.EM_ST7),
		"EM_ST9PLUS":                         reflect.ValueOf(elf.EM_ST9PLUS),
		"EM_STARCORE":                        reflect.ValueOf(elf.EM_STARCORE),
		"EM_STM8":                            reflect.ValueOf(elf.EM_STM8),
		"EM_STXP7X":                          reflect.ValueOf(elf.EM_STXP7X),
		"EM_SVX":                             reflect.ValueOf(elf.EM_SVX),
		"EM_TILE64":                          reflect.ValueOf(elf.EM_TILE64),
		"EM_TILEGX":                          reflect.ValueOf(elf.EM_TILEGX),
		"EM_TILEPRO":                         reflect.ValueOf(elf.EM_TILEPRO),
		"EM_TINYJ":                           reflect.ValueOf(elf.EM_TINYJ),
		"EM_TI_ARP32":                        reflect.ValueOf(elf.EM_TI_ARP32),
		"EM_TI_C2000":                        reflect.ValueOf(elf.EM_TI_C2000),
		"EM_TI_C5500":                        reflect.ValueOf(elf.EM_TI_C5500),
		"EM_TI_C6000":                        reflect.ValueOf(elf.EM_TI_C6000),
		"EM_TI_PRU":                          reflect.ValueOf(elf.EM_TI_PRU),
		"EM_TMM_GPP":                         reflect.ValueOf(elf.EM_TMM_GPP),
		"EM_TPC":                             reflect.ValueOf(elf.EM_TPC),
		"EM_TRICORE":                         reflect.ValueOf(elf.EM_TRICORE),
		"EM_TRIMEDIA":                        reflect.ValueOf(elf.EM_TRIMEDIA),
		"EM_TSK3000":                         reflect.ValueOf(elf.EM_TSK3000),
		"EM_UNICORE":                         reflect.ValueOf(elf.EM_UNICORE),
		"EM_V800":                            reflect.ValueOf(elf.EM_V800),
		"EM_V850":                            reflect.ValueOf(elf.EM_V850),
		"EM_VAX":                             reflect.ValueOf(elf.EM_VAX),
		"EM_VIDEOCORE":                       reflect.ValueOf(elf.EM_VIDEOCORE),
		"EM_VIDEOCORE3":                      reflect.ValueOf(elf.EM_VIDEOCORE3),
		"EM_VIDEOCORE5":                      reflect.ValueOf(elf.EM_VIDEOCORE5),
		"EM_VISIUM":                          reflect.ValueOf(elf.EM_VISIUM),
		"EM_VPP500":                          reflect.ValueOf(elf.EM_VPP500),
		"EM_X86_64":                          reflect.ValueOf(elf.EM_X86_64),
		"EM_XCORE":                           reflect.ValueOf(elf.EM_XCORE),
		"EM_XGATE":                           reflect.ValueOf(elf.EM_XGATE),
		"EM_XIMO16":                          reflect.ValueOf(elf.EM_XIMO16),
		"EM_XTENSA":                          reflect.ValueOf(elf.EM_XTENSA),
		"EM_Z80":                             reflect.ValueOf(elf.EM_Z80),
		"EM_ZSP":                             reflect.ValueOf(elf.EM_ZSP),
		"ET_CORE":                            reflect.ValueOf(elf.ET_CORE),
		"ET_DYN":                             reflect.ValueOf(elf.ET_DYN),
		"ET_EXEC":                            reflect.ValueOf(elf.ET_EXEC),
		"ET_HIOS":                            reflect.ValueOf(elf.ET_HIOS),
		"ET_HIPROC":                          reflect.ValueOf(elf.ET_HIPROC),
		"ET_LOOS":                            reflect.ValueOf(elf.ET_LOOS),
		"ET_LOPROC":                          reflect.ValueOf(elf.ET_LOPROC),
		"ET_NONE":                            reflect.ValueOf(elf.ET_NONE),
		"ET_REL":                             reflect.ValueOf(elf.ET_REL),
		"EV_CURRENT":                         reflect.ValueOf(elf.EV_CURRENT),
		"EV_NONE":                            reflect.ValueOf(elf.EV_NONE),
		"ErrNoSymbols":                       reflect.ValueOf(&elf.ErrNoSymbols).Elem(),
		"NT_FPREGSET":                        reflect.ValueOf(elf.NT_FPREGSET),
		"NT_PRPSINFO":                        reflect.ValueOf(elf.NT_PRPSINFO),
		"NT_PRSTATUS":                        reflect.ValueOf(elf.NT_PRSTATUS),
		"NewFile":                            reflect.ValueOf(elf.NewFile),
		"Open":                               reflect.ValueOf(elf.Open),
		"PF_MASKOS":                          reflect.ValueOf(elf.PF_MASKOS),
		"PF_MASKPROC":                        reflect.ValueOf(elf.PF_MASKPROC),
		"PF_R":                               reflect.ValueOf(elf.PF_R),
		"PF_W":                               reflect.ValueOf(elf.PF_W),
		"PF_X":                               reflect.ValueOf(elf.PF_X),
		"PT_DYNAMIC":                         reflect.ValueOf(elf.PT_DYNAMIC),
		"PT_HIOS":                            reflect.ValueOf(elf.PT_HIOS),
		"PT_HIPROC":                          reflect.ValueOf(elf.PT_HIPROC),
		"PT_INTERP":                          reflect.ValueOf(elf.PT_INTERP),
		"PT_LOAD":                            reflect.ValueOf(elf.PT_LOAD),
		"PT_LOOS":                            reflect.ValueOf(elf.PT_LOOS),
		"PT_LOPROC":                          reflect.ValueOf(elf.PT_LOPROC),
		"PT_NOTE":                            reflect.ValueOf(elf.PT_NOTE),
		"PT_NULL":                            reflect.ValueOf(elf.PT_NULL),
		"PT_PHDR":                            reflect.ValueOf(elf.PT_PHDR),
		"PT_SHLIB":                           reflect.ValueOf(elf.PT_SHLIB),
		"PT_TLS":                             reflect.ValueOf(elf.PT_TLS),
		"R_386_16":                           reflect.ValueOf(elf.R_386_16),
		"R_386_32":                           reflect.ValueOf(elf.R_386_32),
		"R_386_32PLT":                        reflect.ValueOf(elf.R_386_32PLT),
		"R_386_8":                            reflect.ValueOf(elf.R_386_8),
		"R_386_COPY":                         reflect.ValueOf(elf.R_386_COPY),
		"R_386_GLOB_DAT":                     reflect.ValueOf(elf.R_386_GLOB_DAT),
		"R_386_GOT32":                        reflect.ValueOf(elf.R_386_GOT32),
		"R_386_GOT32X":                       reflect.ValueOf(elf.R_386_GOT32X),
		"R_386_GOTOFF":                       reflect.ValueOf(elf.R_386_GOTOFF),
		"R_386_GOTPC":                        reflect.ValueOf(elf.R_386_GOTPC),
		"R_386_IRELATIVE":                    reflect.ValueOf(elf.R_386_IRELATIVE),
		"R_386_JMP_SLOT":                     reflect.ValueOf(elf.R_386_JMP_SLOT),
		"R_386_NONE":                         reflect.ValueOf(elf.R_386_NONE),
		"R_386_PC16":                         reflect.ValueOf(elf.R_386_PC16),
		"R_386_PC32":                         reflect.ValueOf(elf.R_386_PC32),
		"R_386_PC8":                          reflect.ValueOf(elf.R_386_PC8),
		"R_386_PLT32":                        reflect.ValueOf(elf.R_386_PLT32),
		"R_386_RELATIVE":                     reflect.ValueOf(elf.R_386_RELATIVE),
		"R_386_SIZE32":                       reflect.ValueOf(elf.R_386_SIZE32),
		"R_386_TLS_DESC":                     reflect.ValueOf(elf.R_386_TLS_DESC),
		"R_386_TLS_DESC_CALL":                reflect.ValueOf(elf.R_386_TLS_DESC_CALL),
		"R_386_TLS_DTPMOD32":                 reflect.ValueOf(elf.R_386_TLS_DTPMOD32),
		"R_386_TLS_DTPOFF32":                 reflect.ValueOf(elf.R_386_TLS_DTPOFF32),
		"R_386_TLS_GD":                       reflect.ValueOf(elf.R_386_TLS_GD),
		"R_386_TLS_GD_32":                    reflect.ValueOf(elf.R_386_TLS_GD_32),
		"R_386_TLS_GD_CALL":                  reflect.ValueOf(elf.R_386_TLS_GD_CALL),
		"R_386_TLS_GD_POP":                   reflect.ValueOf(elf.R_386_TLS_GD_POP),
		"R_386_TLS_GD_PUSH":                  reflect.ValueOf(elf.R_386_TLS_GD_PUSH),
		"R_386_TLS_GOTDESC":                  reflect.ValueOf(elf.R_386_TLS_GOTDESC),
		"R_386_TLS_GOTIE":                    reflect.ValueOf(elf.R_386_TLS_GOTIE),
		"R_386_TLS_IE":                       reflect.ValueOf(elf.R_386_TLS_IE),
		"R_386_TLS_IE_32":                    reflect.ValueOf(elf.R_386_TLS_IE_32),
		"R_386_TLS_LDM":                      reflect.ValueOf(elf.R_386_TLS_LDM),
		"R_386_TLS_LDM_32":                   reflect.ValueOf(elf.R_386_TLS_LDM_32),
		"R_386_TLS_LDM_CALL":                 reflect.ValueOf(elf.R_386_TLS_LDM_CALL),
		"R_386_TLS_LDM_POP":                  reflect.ValueOf(elf.R_386_TLS_LDM_POP),
		"R_386_TLS_LDM_PUSH":                 reflect.ValueOf(elf.R_386_TLS_LDM_PUSH),
		"R_386_TLS_LDO_32":                   reflect.ValueOf(elf.R_386_TLS_LDO_32),
		"R_386_TLS_LE":                       reflect.ValueOf(elf.R_386_TLS_LE),
		"R_386_TLS_LE_32":                    reflect.ValueOf(elf.R_386_TLS_LE_32),
		"R_386_TLS_TPOFF":                    reflect.ValueOf(elf.R_386_TLS_TPOFF),
		"R_386_TLS_TPOFF32":                  reflect.ValueOf(elf.R_386_TLS_TPOFF32),
		"R_390_12":                           reflect.ValueOf(elf.R_390_12),
		"R_390_16":                           reflect.ValueOf(elf.R_390_16),
		"R_390_20":                           reflect.ValueOf(elf.R_390_20),
		"R_390_32":                           reflect.ValueOf(elf.R_390_32),
		"R_390_64":                           reflect.ValueOf(elf.R_390_64),
		"R_390_8":                            reflect.ValueOf(elf.R_390_8),
		"R_390_COPY":                         reflect.ValueOf(elf.R_390_COPY),
		"R_390_GLOB_DAT":                     reflect.ValueOf(elf.R_390_GLOB_DAT),
		"R_390_GOT12":                        reflect.ValueOf(elf.R_390_GOT12),
		"R_390_GOT16":                        reflect.ValueOf(elf.R_390_GOT16),
		"R_390_GOT20":                        reflect.ValueOf(elf.R_390_GOT20),
		"R_390_GOT32":                        reflect.ValueOf(elf.R_390_GOT32),
		"R_390_GOT64":                        reflect.ValueOf(elf.R_390_GOT64),
		"R_390_GOTENT":                       reflect.ValueOf(elf.R_390_GOTENT),
		"R_390_GOTOFF":                       reflect.ValueOf(elf.R_390_GOTOFF),
		"R_390_GOTOFF16":                     reflect.ValueOf(elf.R_390_GOTOFF16),
		"R_390_GOTOFF64":                     reflect.ValueOf(elf.R_390_GOTOFF64),
		"R_390_GOTPC":                        reflect.ValueOf(elf.R_390_GOTPC),
		"R_390_GOTPCDBL":                     reflect.ValueOf(elf.R_390_GOTPCDBL),
		"R_390_GOTPLT12":                     reflect.ValueOf(elf.R_390_GOTPLT12),
		"R_390_GOTPLT16":                     reflect.ValueOf(elf.R_390_GOTPLT16),
		"R_390_GOTPLT20":                     reflect.ValueOf(elf.R_390_GOTPLT20),
		"R_390_GOTPLT32":                     reflect.ValueOf(elf.R_390_GOTPLT32),
		"R_390_GOTPLT64":                     reflect.ValueOf(elf.R_390_GOTPLT64),
		"R_390_GOTPLTENT":                    reflect.ValueOf(elf.R_390_GOTPLTENT),
		"R_390_GOTPLTOFF16":                  reflect.ValueOf(elf.R_390_GOTPLTOFF16),
		"R_390_GOTPLTOFF32":                  reflect.ValueOf(elf.R_390_GOTPLTOFF32),
		"R_390_GOTPLTOFF64":                  reflect.ValueOf(elf.R_390_GOTPLTOFF64),
		"R_390_JMP_SLOT":                     reflect.ValueOf(elf.R_390_JMP_SLOT),
		"R_390_NONE":                         reflect.ValueOf(elf.R_390_NONE),
		"R_390_PC16":                         reflect.ValueOf(elf.R_390_PC16),
		"R_390_PC16DBL":                      reflect.ValueOf(elf.R_390_PC16DBL),
		"R_390_PC32":                         reflect.ValueOf(elf.R_390_PC32),
		"R_390_PC32DBL":                      reflect.ValueOf(elf.R_390_PC32DBL),
		"R_390_PC64":                         reflect.ValueOf(elf.R_390_PC64),
		"R_390_PLT16DBL":                     reflect.ValueOf(elf.R_390_PLT16DBL),
		"R_390_PLT32":                        reflect.ValueOf(elf.R_390_PLT32),
		"R_390_PLT32DBL":                     reflect.ValueOf(elf.R_390_PLT32DBL),
		"R_390_PLT64":                        reflect.ValueOf(elf.R_390_PLT64),
		"R_390_RELATIVE":                     reflect.ValueOf(elf.R_390_RELATIVE),
		"R_390_TLS_DTPMOD":                   reflect.ValueOf(elf.R_390_TLS_DTPMOD),
		"R_390_TLS_DTPOFF":                   reflect.ValueOf(elf.R_390_TLS_DTPOFF),
		"R_390_TLS_GD32":                     reflect.ValueOf(elf.R_390_TLS_GD32),
		"R_390_TLS_GD64":                     reflect.ValueOf(elf.R_390_TLS_GD64),
		"R_390_TLS_GDCALL":                   reflect.ValueOf(elf.R_390_TLS_GDCALL),
		"R_390_TLS_GOTIE12":                  reflect.ValueOf(elf.R_390_TLS_GOTIE12),
		"R_390_TLS_GOTIE20":                  reflect.ValueOf(elf.R_390_TLS_GOTIE20),
		"R_390_TLS_GOTIE32":                  reflect.ValueOf(elf.R_390_TLS_GOTIE32),
		"R_390_TLS_GOTIE64":                  reflect.ValueOf(elf.R_390_TLS_GOTIE64),
		"R_390_TLS_IE32":                     reflect.ValueOf(elf.R_390_TLS_IE32),
		"R_390_TLS_IE64":                     reflect.ValueOf(elf.R_390_TLS_IE64),
		"R_390_TLS_IEENT":                    reflect.ValueOf(elf.R_390_TLS_IEENT),
		"R_390_TLS_LDCALL":                   reflect.ValueOf(elf.R_390_TLS_LDCALL),
		"R_390_TLS_LDM32":                    reflect.ValueOf(elf.R_390_TLS_LDM32),
		"R_390_TLS_LDM64":                    reflect.ValueOf(elf.R_390_TLS_LDM64),
		"R_390_TLS_LDO32":                    reflect.ValueOf(elf.R_390_TLS_LDO32),
		"R_390_TLS_LDO64":                    reflect.ValueOf(elf.R_390_TLS_LDO64),
		"R_390_TLS_LE32":                     reflect.ValueOf(elf.R_390_TLS_LE32),
		"R_390_TLS_LE64":                     reflect.ValueOf(elf.R_390_TLS_LE64),
		"R_390_TLS_LOAD":                     reflect.ValueOf(elf.R_390_TLS_LOAD),
		"R_390_TLS_TPOFF":                    reflect.ValueOf(elf.R_390_TLS_TPOFF),
		"R_AARCH64_ABS16":                    reflect.ValueOf(elf.R_AARCH64_ABS16),
		"R_AARCH64_ABS32":                    reflect.ValueOf(elf.R_AARCH64_ABS32),
		"R_AARCH64_ABS64":                    reflect.ValueOf(elf.R_AARCH64_ABS64),
		"R_AARCH64_ADD_ABS_LO12_NC":          reflect.ValueOf(elf.R_AARCH64_ADD_ABS_LO12_NC),
		"R_AARCH64_ADR_GOT_PAGE":             reflect.ValueOf(elf.R_AARCH64_ADR_GOT_PAGE),
		"R_AARCH64_ADR_PREL_LO21":            reflect.ValueOf(elf.R_AARCH64_ADR_PREL_LO21),
		"R_AARCH64_ADR_PREL_PG_HI21":         reflect.ValueOf(elf.R_AARCH64_ADR_PREL_PG_HI21),
		"R_AARCH64_ADR_PREL_PG_HI21_NC":      reflect.ValueOf(elf.R_AARCH64_ADR_PREL_PG_HI21_NC),
		"R_AARCH64_CALL26":                   reflect.ValueOf(elf.R_AARCH64_CALL26),
		"R_AARCH64_CONDBR19":                 reflect.ValueOf(elf.R_AARCH64_CONDBR19),
		"R_AARCH64_COPY":                     reflect.ValueOf(elf.R_AARCH64_COPY),
		"R_AARCH64_GLOB_DAT":                 reflect.ValueOf(elf.R_AARCH64_GLOB_DAT),
		"R_AARCH64_GOT_LD_PREL19":            reflect.ValueOf(elf.R_AARCH64_GOT_LD_PREL19),
		"R_AARCH64_IRELATIVE":                reflect.ValueOf(elf.R_AARCH64_IRELATIVE),
		"R_AARCH64_JUMP26":                   reflect.ValueOf(elf.R_AARCH64_JUMP26),
		"R_AARCH64_JUMP_SLOT":                reflect.ValueOf(elf.R_AARCH64_JUMP_SLOT),
		"R_AARCH64_LD64_GOTOFF_LO15":         reflect.ValueOf(elf.R_AARCH64_LD64_GOTOFF_LO15),
		"R_AARCH64_LD64_GOTPAGE_LO15":        reflect.ValueOf(elf.R_AARCH64_LD64_GOTPAGE_LO15),
		"R_AARCH64_LD64_GOT_LO12_NC":         reflect.ValueOf(elf.R_AARCH64_LD64_GOT_LO12_NC),
		"R_AARCH64_LDST128_ABS_LO12_NC":      reflect.ValueOf(elf.R_AARCH64_LDST128_ABS_LO12_NC),
		"R_AARCH64_LDST16_ABS_LO12_NC":       reflect.ValueOf(elf.R_AARCH64_LDST16_ABS_LO12_NC),
		"R_AARCH64_LDST32_ABS_LO12_NC":       reflect.ValueOf(elf.R_AARCH64_LDST32_ABS_LO12_NC),
		"R_AARCH64_LDST64_ABS_LO12_NC":       reflect.ValueOf(elf.R_AARCH64_LDST64_ABS_LO12_NC),
		"R_AARCH64_LDST8_ABS_LO12_NC":        reflect.ValueOf(elf.R_AARCH64_LDST8_ABS_LO12_NC),
		"R_AARCH64_LD_PREL_LO19":             reflect.ValueOf(elf.R_AARCH64_LD_PREL_LO19),
		"R_AARCH64_MOVW_SABS_G0":             reflect.ValueOf(elf.R_AARCH64_MOVW_SABS_G0),
		"R_AARCH64_MOVW_SABS_G1":             reflect.ValueOf(elf.R_AARCH64_MOVW_SABS_G1),
		"R_AARCH64_MOVW_SABS_G2":             reflect.ValueOf(elf.R_AARCH64_MOVW_SABS_G2),
		"R_AARCH64_MOVW_UABS_G0":             reflect.ValueOf(elf.R_AARCH64_MOVW_UABS_G0),
		"R_AARCH64_MOVW_UABS_G0_NC":          reflect.ValueOf(elf.R_AARCH64_MOVW_UABS_G0_NC),
		"R_AARCH64_MOVW_UABS_G1":             reflect.ValueOf(elf.R_AARCH64_MOVW_UABS_G1),
		"R_AARCH64_MOVW_UABS_G1_NC":          reflect.ValueOf(elf.R_AARCH64_MOVW_UABS_G1_NC),
		"R_AARCH64_MOVW_UABS_G2":             reflect.ValueOf(elf.R_AARCH64_MOVW_UABS_G2),
		"R_AARCH64_MOVW_UABS_G2_NC":          reflect.ValueOf(elf.R_AARCH64_MOVW_UABS_G2_NC),
		"R_AARCH64_MOVW_UABS_G3":             reflect.ValueOf(elf.R_AARCH64_MOVW_UABS_G3),
		"R_AARCH64_NONE":                     reflect.ValueOf(elf.R_AARCH64_NONE),
		"R_AARCH64_NULL":                     reflect.ValueOf(elf.R_AARCH64_NULL),
		"R_AARCH64_P32_ABS16":                reflect.ValueOf(elf.R_AARCH64_P32_ABS16),
		"R_AARCH64_P32_ABS32":                reflect.ValueOf(elf.R_AARCH64_P32_ABS32),
		"R_AARCH64_P32_ADD_ABS_LO12_NC":      reflect.ValueOf(elf.R_AARCH64_P32_ADD_ABS_LO12_NC),
		"R_AARCH64_P32_ADR_GOT_PAGE":         reflect.ValueOf(elf.R_AARCH64_P32_ADR_GOT_PAGE),
		"R_AARCH64_P32_ADR_PREL_LO21":        reflect.ValueOf(elf.R_AARCH64_P32_ADR_PREL_LO21),
		"R_AARCH64_P32_ADR_PREL_PG_HI21":     reflect.ValueOf(elf.R_AARCH64_P32_ADR_PREL_PG_HI21),
		"R_AARCH64_P32_CALL26":               reflect.ValueOf(elf.R_AARCH64_P32_CALL26),
		"R_AARCH64_P32_CONDBR19":             reflect.ValueOf(elf.R_AARCH64_P32_CONDBR19),
		"R_AARCH64_P32_COPY":                 reflect.ValueOf(elf.R_AARCH64_P32_COPY),
		"R_AARCH64_P32_GLOB_DAT":             reflect.ValueOf(elf.R_AARCH64_P32_GLOB_DAT),
		"R_AARCH64_P32_GOT_LD_PREL19":        reflect.ValueOf(elf.R_AARCH64_P32_GOT_LD_PREL19),
		"R_AARCH64_P32_IRELATIVE":            reflect.ValueOf(elf.R_AARCH64_P32_IRELATIVE),
		"R_AARCH64_P32_JUMP26":               reflect.ValueOf(elf.R_AARCH64_P32_JUMP26),
		"R_AARCH64_P32_JUMP_SLOT":            reflect.ValueOf(elf.R_AARCH64_P32_JUMP_SLOT),
		"R_AARCH64_P32_LD32_GOT_LO12_NC":     reflect.ValueOf(elf.R_AARCH64_P32_LD32_GOT_LO12_NC),
		"R_AARCH64_P32_LDST128_ABS_LO12_NC":  reflect.ValueOf(elf.R_AARCH64_P32_LDST128_ABS_LO12_NC),
		"R_AARCH64_P32_LDST16_ABS_LO12_NC":   reflect.ValueOf(elf.R_AARCH64_P32_LDST16_ABS_LO12_NC),
		"R_AARCH64_P32_LDST32_ABS_LO12_NC":   reflect.ValueOf(elf.R_AARCH64_P32_LDST32_ABS_LO12_NC),
		"R_AARCH64_P32_LDST64_ABS_LO12_NC":   reflect.ValueOf(elf.R_AARCH64_P32_LDST64_ABS_LO12_NC),
		"R_AARCH64_P32_LDST8_ABS_LO12_NC":    reflect.ValueOf(elf.R_AARCH64_P32_LDST8_ABS_LO12_NC),
		"R_AARCH64_P32_LD_PREL_LO19":         reflect.ValueOf(elf.R_AARCH64_P32_LD_PREL_LO19),
		"R_AARCH64_P32_MOVW_SABS_G0":         reflect.ValueOf(elf.R_AARCH64_P32_MOVW_SABS_G0),
		"R_AARCH64_P32_MOVW_UABS_G0":         reflect.ValueOf(elf.R_AARCH64_P32_MOVW_UABS_G0),
		"R_AARCH64_P32_MOVW_UABS_G0_NC":      reflect.ValueOf(elf.R_AARCH64_P32_MOVW_UABS_G0_NC),
		"R_AARCH64_P32_MOVW_UABS_G1":         reflect.ValueOf(elf.R_AARCH64_P32_MOVW_UABS_G1),
		"R_AARCH64_P32_PREL16":               reflect.ValueOf(elf.R_AARCH64_P32_PREL16),
		"R_AARCH64_P32_PREL32":               reflect.ValueOf(elf.R_AARCH64_P32_PREL32),
		"R_AARCH64_P32_RELATIVE":             reflect.ValueOf(elf.R_AARCH64_P32_RELATIVE),
		"R_AARCH64_P32_TLSDESC":              reflect.ValueOf(elf.R_AARCH64_P32_TLSDESC),
		"R_AARCH64_P32_TLSDESC_ADD_LO12_NC":  reflect.ValueOf(elf.R_AARCH64_P32_TLSDESC_ADD_LO12_NC),
		"R_AARCH64_P32_TLSDESC_ADR_PAGE21":   reflect.ValueOf(elf.R_AARCH64_P32_TLSDESC_ADR_PAGE21),
		"R_AARCH64_P32_TLSDESC_ADR_PREL21":   reflect.ValueOf(elf.R_AARCH64_P32_TLSDESC_ADR_PREL21),
		"R_AARCH64_P32_TLSDESC_CALL":         reflect.ValueOf(elf.R_AARCH64_P32_TLSDESC_CALL),
		"R_AARCH64_P32_TLSDESC_LD32_LO12_NC": reflect.ValueOf(elf.R_AARCH64_P32_TLSDESC_LD32_LO12_NC),
		"R_AARCH64_P32_TLSDESC_LD_PREL19":    reflect.ValueOf(elf.R_AARCH64_P32_TLSDESC_LD_PREL19),
		"R_AARCH64_P32_TLSGD_ADD_LO12_NC":    reflect.ValueOf(elf.R_AARCH64_P32_TLSGD_ADD_LO12_NC),
		"R_AARCH64_P32_TLSGD_ADR_PAGE21":     reflect.ValueOf(elf.R_AARCH64_P32_TLSGD_ADR_PAGE21),
		"R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21":   reflect.ValueOf(elf.R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21),
		"R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC": reflect.ValueOf(elf.R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC),
		"R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19":    reflect.ValueOf(elf.R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19),
		"R_AARCH64_P32_TLSLE_ADD_TPREL_HI12":        reflect.ValueOf(elf.R_AARCH64_P32_TLSLE_ADD_TPREL_HI12),
		"R_AARCH64_P32_TLSLE_ADD_TPREL_LO12":        reflect.ValueOf(elf.R_AARCH64_P32_TLSLE_ADD_TPREL_LO12),
		"R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC":     reflect.ValueOf(elf.R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC),
		"R_AARCH64_P32_TLSLE_MOVW_TPREL_G0":         reflect.ValueOf(elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G0),
		"R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC":      reflect.ValueOf(elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC),
		"R_AARCH64_P32_TLSLE_MOVW_TPREL_G1":         reflect.ValueOf(elf.R_AARCH64_P32_TLSLE_MOVW_TPREL_G1),
		"R_AARCH64_P32_TLS_DTPMOD":                  reflect.ValueOf(elf.R_AARCH64_P32_TLS_DTPMOD),
		"R_AARCH64_P32_TLS_DTPREL":                  reflect.ValueOf(elf.R_AARCH64_P32_TLS_DTPREL),
		"R_AARCH64_P32_TLS_TPREL":                   reflect.ValueOf(elf.R_AARCH64_P32_TLS_TPREL),
		"R_AARCH64_P32_TSTBR14":                     reflect.ValueOf(elf.R_AARCH64_P32_TSTBR14),
		"R_AARCH64_PREL16":                          reflect.ValueOf(elf.R_AARCH64_PREL16),
		"R_AARCH64_PREL32":                          reflect.ValueOf(elf.R_AARCH64_PREL32),
		"R_AARCH64_PREL64":                          reflect.ValueOf(elf.R_AARCH64_PREL64),
		"R_AARCH64_RELATIVE":                        reflect.ValueOf(elf.R_AARCH64_RELATIVE),
		"R_AARCH64_TLSDESC":                         reflect.ValueOf(elf.R_AARCH64_TLSDESC),
		"R_AARCH64_TLSDESC_ADD":                     reflect.ValueOf(elf.R_AARCH64_TLSDESC_ADD),
		"R_AARCH64_TLSDESC_ADD_LO12_NC":             reflect.ValueOf(elf.R_AARCH64_TLSDESC_ADD_LO12_NC),
		"R_AARCH64_TLSDESC_ADR_PAGE21":              reflect.ValueOf(elf.R_AARCH64_TLSDESC_ADR_PAGE21),
		"R_AARCH64_TLSDESC_ADR_PREL21":              reflect.ValueOf(elf.R_AARCH64_TLSDESC_ADR_PREL21),
		"R_AARCH64_TLSDESC_CALL":                    reflect.ValueOf(elf.R_AARCH64_TLSDESC_CALL),
		"R_AARCH64_TLSDESC_LD64_LO12_NC":            reflect.ValueOf(elf.R_AARCH64_TLSDESC_LD64_LO12_NC),
		"R_AARCH64_TLSDESC_LDR":                     reflect.ValueOf(elf.R_AARCH64_TLSDESC_LDR),
		"R_AARCH64_TLSDESC_LD_PREL19":               reflect.ValueOf(elf.R_AARCH64_TLSDESC_LD_PREL19),
		"R_AARCH64_TLSDESC_OFF_G0_NC":               reflect.ValueOf(elf.R_AARCH64_TLSDESC_OFF_G0_NC),
		"R_AARCH64_TLSDESC_OFF_G1":                  reflect.ValueOf(elf.R_AARCH64_TLSDESC_OFF_G1),
		"R_AARCH64_TLSGD_ADD_LO12_NC":               reflect.ValueOf(elf.R_AARCH64_TLSGD_ADD_LO12_NC),
		"R_AARCH64_TLSGD_ADR_PAGE21":                reflect.ValueOf(elf.R_AARCH64_TLSGD_ADR_PAGE21),
		"R_AARCH64_TLSGD_ADR_PREL21":                reflect.ValueOf(elf.R_AARCH64_TLSGD_ADR_PREL21),
		"R_AARCH64_TLSGD_MOVW_G0_NC":                reflect.ValueOf(elf.R_AARCH64_TLSGD_MOVW_G0_NC),
		"R_AARCH64_TLSGD_MOVW_G1":                   reflect.ValueOf(elf.R_AARCH64_TLSGD_MOVW_G1),
		"R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21":       reflect.ValueOf(elf.R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21),
		"R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC":     reflect.ValueOf(elf.R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC),
		"R_AARCH64_TLSIE_LD_GOTTPREL_PREL19":        reflect.ValueOf(elf.R_AARCH64_TLSIE_LD_GOTTPREL_PREL19),
		"R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC":       reflect.ValueOf(elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC),
		"R_AARCH64_TLSIE_MOVW_GOTTPREL_G1":          reflect.ValueOf(elf.R_AARCH64_TLSIE_MOVW_GOTTPREL_G1),
		"R_AARCH64_TLSLD_ADR_PAGE21":                reflect.ValueOf(elf.R_AARCH64_TLSLD_ADR_PAGE21),
		"R_AARCH64_TLSLD_ADR_PREL21":                reflect.ValueOf(elf.R_AARCH64_TLSLD_ADR_PREL21),
		"R_AARCH64_TLSLD_LDST128_DTPREL_LO12":       reflect.ValueOf(elf.R_AARCH64_TLSLD_LDST128_DTPREL_LO12),
		"R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC":    reflect.ValueOf(elf.R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC),
		"R_AARCH64_TLSLE_ADD_TPREL_HI12":            reflect.ValueOf(elf.R_AARCH64_TLSLE_ADD_TPREL_HI12),
		"R_AARCH64_TLSLE_ADD_TPREL_LO12":            reflect.ValueOf(elf.R_AARCH64_TLSLE_ADD_TPREL_LO12),
		"R_AARCH64_TLSLE_ADD_TPREL_LO12_NC":         reflect.ValueOf(elf.R_AARCH64_TLSLE_ADD_TPREL_LO12_NC),
		"R_AARCH64_TLSLE_LDST128_TPREL_LO12":        reflect.ValueOf(elf.R_AARCH64_TLSLE_LDST128_TPREL_LO12),
		"R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC":     reflect.ValueOf(elf.R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC),
		"R_AARCH64_TLSLE_MOVW_TPREL_G0":             reflect.ValueOf(elf.R_AARCH64_TLSLE_MOVW_TPREL_G0),
		"R_AARCH64_TLSLE_MOVW_TPREL_G0_NC":          reflect.ValueOf(elf.R_AARCH64_TLSLE_MOVW_TPREL_G0_NC),
		"R_AARCH64_TLSLE_MOVW_TPREL_G1":             reflect.ValueOf(elf.R_AARCH64_TLSLE_MOVW_TPREL_G1),
		"R_AARCH64_TLSLE_MOVW_TPREL_G1_NC":          reflect.ValueOf(elf.R_AARCH64_TLSLE_MOVW_TPREL_G1_NC),
		"R_AARCH64_TLSLE_MOVW_TPREL_G2":             reflect.ValueOf(elf.R_AARCH64_TLSLE_MOVW_TPREL_G2),
		"R_AARCH64_TLS_DTPMOD64":                    reflect.ValueOf(elf.R_AARCH64_TLS_DTPMOD64),
		"R_AARCH64_TLS_DTPREL64":                    reflect.ValueOf(elf.R_AARCH64_TLS_DTPREL64),
		"R_AARCH64_TLS_TPREL64":                     reflect.ValueOf(elf.R_AARCH64_TLS_TPREL64),
		"R_AARCH64_TSTBR14":                         reflect.ValueOf(elf.R_AARCH64_TSTBR14),
		"R_ALPHA_BRADDR":                            reflect.ValueOf(elf.R_ALPHA_BRADDR),
		"R_ALPHA_COPY":                              reflect.ValueOf(elf.R_ALPHA_COPY),
		"R_ALPHA_GLOB_DAT":                          reflect.ValueOf(elf.R_ALPHA_GLOB_DAT),
		"R_ALPHA_GPDISP":                            reflect.ValueOf(elf.R_ALPHA_GPDISP),
		"R_ALPHA_GPREL32":                           reflect.ValueOf(elf.R_ALPHA_GPREL32),
		"R_ALPHA_GPRELHIGH":                         reflect.ValueOf(elf.R_ALPHA_GPRELHIGH),
		"R_ALPHA_GPRELLOW":                          reflect.ValueOf(elf.R_ALPHA_GPRELLOW),
		"R_ALPHA_GPVALUE":                           reflect.ValueOf(elf.R_ALPHA_GPVALUE),
		"R_ALPHA_HINT":                              reflect.ValueOf(elf.R_ALPHA_HINT),
		"R_ALPHA_IMMED_BR_HI32":                     reflect.ValueOf(elf.R_ALPHA_IMMED_BR_HI32),
		"R_ALPHA_IMMED_GP_16":                       reflect.ValueOf(elf.R_ALPHA_IMMED_GP_16),
		"R_ALPHA_IMMED_GP_HI32":                     reflect.ValueOf(elf.R_ALPHA_IMMED_GP_HI32),
		"R_ALPHA_IMMED_LO32":                        reflect.ValueOf(elf.R_ALPHA_IMMED_LO32),
		"R_ALPHA_IMMED_SCN_HI32":                    reflect.ValueOf(elf.R_ALPHA_IMMED_SCN_HI32),
		"R_ALPHA_JMP_SLOT":                          reflect.ValueOf(elf.R_ALPHA_JMP_SLOT),
		"R_ALPHA_LITERAL":                           reflect.ValueOf(elf.R_ALPHA_LITERAL),
		"R_ALPHA_LITUSE":                            reflect.ValueOf(elf.R_ALPHA_LITUSE),
		"R_ALPHA_NONE":                              reflect.ValueOf(elf.R_ALPHA_NONE),
		"R_ALPHA_OP_PRSHIFT":                        reflect.ValueOf(elf.R_ALPHA_OP_PRSHIFT),
		"R_ALPHA_OP_PSUB":                           reflect.ValueOf(elf.R_ALPHA_OP_PSUB),
		"R_ALPHA_OP_PUSH":                           reflect.ValueOf(elf.R_ALPHA_OP_PUSH),
		"R_ALPHA_OP_STORE":                          reflect.ValueOf(elf.R_ALPHA_OP_STORE),
		"R_ALPHA_REFLONG":                           reflect.ValueOf(elf.R_ALPHA_REFLONG),
		"R_ALPHA_REFQUAD":                           reflect.ValueOf(elf.R_ALPHA_REFQUAD),
		"R_ALPHA_RELATIVE":                          reflect.ValueOf(elf.R_ALPHA_RELATIVE),
		"R_ALPHA_SREL16":                            reflect.ValueOf(elf.R_ALPHA_SREL16),
		"R_ALPHA_SREL32":                            reflect.ValueOf(elf.R_ALPHA_SREL32),
		"R_ALPHA_SREL64":                            reflect.ValueOf(elf.R_ALPHA_SREL64),
		"R_ARM_ABS12":                               reflect.ValueOf(elf.R_ARM_ABS12),
		"R_ARM_ABS16":                               reflect.ValueOf(elf.R_ARM_ABS16),
		"R_ARM_ABS32":                               reflect.ValueOf(elf.R_ARM_ABS32),
		"R_ARM_ABS32_NOI":                           reflect.ValueOf(elf.R_ARM_ABS32_NOI),
		"R_ARM_ABS8":                                reflect.ValueOf(elf.R_ARM_ABS8),
		"R_ARM_ALU_PCREL_15_8":                      reflect.ValueOf(elf.R_ARM_ALU_PCREL_15_8),
		"R_ARM_ALU_PCREL_23_15":                     reflect.ValueOf(elf.R_ARM_ALU_PCREL_23_15),
		"R_ARM_ALU_PCREL_7_0":                       reflect.ValueOf(elf.R_ARM_ALU_PCREL_7_0),
		"R_ARM_ALU_PC_G0":                           reflect.ValueOf(elf.R_ARM_ALU_PC_G0),
		"R_ARM_ALU_PC_G0_NC":                        reflect.ValueOf(elf.R_ARM_ALU_PC_G0_NC),
		"R_ARM_ALU_PC_G1":                           reflect.ValueOf(elf.R_ARM_ALU_PC_G1),
		"R_ARM_ALU_PC_G1_NC":                        reflect.ValueOf(elf.R_ARM_ALU_PC_G1_NC),
		"R_ARM_ALU_PC_G2":                           reflect.ValueOf(elf.R_ARM_ALU_PC_G2),
		"R_ARM_ALU_SBREL_19_12_NC":                  reflect.ValueOf(elf.R_ARM_ALU_SBREL_19_12_NC),
		"R_ARM_ALU_SBREL_27_20_CK":                  reflect.ValueOf(elf.R_ARM_ALU_SBREL_27_20_CK),
		"R_ARM_ALU_SB_G0":                           reflect.ValueOf(elf.R_ARM_ALU_SB_G0),
		"R_ARM_ALU_SB_G0_NC":                        reflect.ValueOf(elf.R_ARM_ALU_SB_G0_NC),
		"R_ARM_ALU_SB_G1":                           reflect.ValueOf(elf.R_ARM_ALU_SB_G1),
		"R_ARM_ALU_SB_G1_NC":                        reflect.ValueOf(elf.R_ARM_ALU_SB_G1_NC),
		"R_ARM_ALU_SB_G2":                           reflect.ValueOf(elf.R_ARM_ALU_SB_G2),
		"R_ARM_AMP_VCALL9":                          reflect.ValueOf(elf.R_ARM_AMP_VCALL9),
		"R_ARM_BASE_ABS":                            reflect.ValueOf(elf.R_ARM_BASE_ABS),
		"R_ARM_CALL":                                reflect.ValueOf(elf.R_ARM_CALL),
		"R_ARM_COPY":                                reflect.ValueOf(elf.R_ARM_COPY),
		"R_ARM_GLOB_DAT":                            reflect.ValueOf(elf.R_ARM_GLOB_DAT),
		"R_ARM_GNU_VTENTRY":                         reflect.ValueOf(elf.R_ARM_GNU_VTENTRY),
		"R_ARM_GNU_VTINHERIT":                       reflect.ValueOf(elf.R_ARM_GNU_VTINHERIT),
		"R_ARM_GOT32":                               reflect.ValueOf(elf.R_ARM_GOT32),
		"R_ARM_GOTOFF":                              reflect.ValueOf(elf.R_ARM_GOTOFF),
		"R_ARM_GOTOFF12":                            reflect.ValueOf(elf.R_ARM_GOTOFF12),
		"R_ARM_GOTPC":                               reflect.ValueOf(elf.R_ARM_GOTPC),
		"R_ARM_GOTRELAX":                            reflect.ValueOf(elf.R_ARM_GOTRELAX),
		"R_ARM_GOT_ABS":                             reflect.ValueOf(elf.R_ARM_GOT_ABS),
		"R_ARM_GOT_BREL12":                          reflect.ValueOf(elf.R_ARM_GOT_BREL12),
		"R_ARM_GOT_PREL":                            reflect.ValueOf(elf.R_ARM_GOT_PREL),
		"R_ARM_IRELATIVE":                           reflect.ValueOf(elf.R_ARM_IRELATIVE),
		"R_ARM_JUMP24":                              reflect.ValueOf(elf.R_ARM_JUMP24),
		"R_ARM_JUMP_SLOT":                           reflect.ValueOf(elf.R_ARM_JUMP_SLOT),
		"R_ARM_LDC_PC_G0":                           reflect.ValueOf(elf.R_ARM_LDC_PC_G0),
		"R_ARM_LDC_PC_G1":                           reflect.ValueOf(elf.R_ARM_LDC_PC_G1),
		"R_ARM_LDC_PC_G2":                           reflect.ValueOf(elf.R_ARM_LDC_PC_G2),
		"R_ARM_LDC_SB_G0":                           reflect.ValueOf(elf.R_ARM_LDC_SB_G0),
		"R_ARM_LDC_SB_G1":                           reflect.ValueOf(elf.R_ARM_LDC_SB_G1),
		"R_ARM_LDC_SB_G2":                           reflect.ValueOf(elf.R_ARM_LDC_SB_G2),
		"R_ARM_LDRS_PC_G0":                          reflect.ValueOf(elf.R_ARM_LDRS_PC_G0),
		"R_ARM_LDRS_PC_G1":                          reflect.ValueOf(elf.R_ARM_LDRS_PC_G1),
		"R_ARM_LDRS_PC_G2":                          reflect.ValueOf(elf.R_ARM_LDRS_PC_G2),
		"R_ARM_LDRS_SB_G0":                          reflect.ValueOf(elf.R_ARM_LDRS_SB_G0),
		"R_ARM_LDRS_SB_G1":                          reflect.ValueOf(elf.R_ARM_LDRS_SB_G1),
		"R_ARM_LDRS_SB_G2":                          reflect.ValueOf(elf.R_ARM_LDRS_SB_G2),
		"R_ARM_LDR_PC_G1":                           reflect.ValueOf(elf.R_ARM_LDR_PC_G1),
		"R_ARM_LDR_PC_G2":                           reflect.ValueOf(elf.R_ARM_LDR_PC_G2),
		"R_ARM_LDR_SBREL_11_10_NC":                  reflect.ValueOf(elf.R_ARM_LDR_SBREL_11_10_NC),
		"R_ARM_LDR_SB_G0":                           reflect.ValueOf(elf.R_ARM_LDR_SB_G0),
		"R_ARM_LDR_SB_G1":                           reflect.ValueOf(elf.R_ARM_LDR_SB_G1),
		"R_ARM_LDR_SB_G2":                           reflect.ValueOf(elf.R_ARM_LDR_SB_G2),
		"R_ARM_ME_TOO":                              reflect.ValueOf(elf.R_ARM_ME_TOO),
		"R_ARM_MOVT_ABS":                            reflect.ValueOf(elf.R_ARM_MOVT_ABS),
		"R_ARM_MOVT_BREL":                           reflect.ValueOf(elf.R_ARM_MOVT_BREL),
		"R_ARM_MOVT_PREL":                           reflect.ValueOf(elf.R_ARM_MOVT_PREL),
		"R_ARM_MOVW_ABS_NC":                         reflect.ValueOf(elf.R_ARM_MOVW_ABS_NC),
		"R_ARM_MOVW_BREL":                           reflect.ValueOf(elf.R_ARM_MOVW_BREL),
		"R_ARM_MOVW_BREL_NC":                        reflect.ValueOf(elf.R_ARM_MOVW_BREL_NC),
		"R_ARM_MOVW_PREL_NC":                        reflect.ValueOf(elf.R_ARM_MOVW_PREL_NC),
		"R_ARM_NONE":                                reflect.ValueOf(elf.R_ARM_NONE),
		"R_ARM_PC13":                                reflect.ValueOf(elf.R_ARM_PC13),
		"R_ARM_PC24":                                reflect.ValueOf(elf.R_ARM_PC24),
		"R_ARM_PLT32":                               reflect.ValueOf(elf.R_ARM_PLT32),
		"R_ARM_PLT32_ABS":                           reflect.ValueOf(elf.R_ARM_PLT32_ABS),
		"R_ARM_PREL31":                              reflect.ValueOf(elf.R_ARM_PREL31),
		"R_ARM_PRIVATE_0":                           reflect.ValueOf(elf.R_ARM_PRIVATE_0),
		"R_ARM_PRIVATE_1":                           reflect.ValueOf(elf.R_ARM_PRIVATE_1),
		"R_ARM_PRIVATE_10":                          reflect.ValueOf(elf.R_ARM_PRIVATE_10),
		"R_ARM_PRIVATE_11":                          reflect.ValueOf(elf.R_ARM_PRIVATE_11),
		"R_ARM_PRIVATE_12":                          reflect.ValueOf(elf.R_ARM_PRIVATE_12),
		"R_ARM_PRIVATE_13":                          reflect.ValueOf(elf.R_ARM_PRIVATE_13),
		"R_ARM_PRIVATE_14":                          reflect.ValueOf(elf.R_ARM_PRIVATE_14),
		"R_ARM_PRIVATE_15":                          reflect.ValueOf(elf.R_ARM_PRIVATE_15),
		"R_ARM_PRIVATE_2":                           reflect.ValueOf(elf.R_ARM_PRIVATE_2),
		"R_ARM_PRIVATE_3":                           reflect.ValueOf(elf.R_ARM_PRIVATE_3),
		"R_ARM_PRIVATE_4":                           reflect.ValueOf(elf.R_ARM_PRIVATE_4),
		"R_ARM_PRIVATE_5":                           reflect.ValueOf(elf.R_ARM_PRIVATE_5),
		"R_ARM_PRIVATE_6":                           reflect.ValueOf(elf.R_ARM_PRIVATE_6),
		"R_ARM_PRIVATE_7":                           reflect.ValueOf(elf.R_ARM_PRIVATE_7),
		"R_ARM_PRIVATE_8":                           reflect.ValueOf(elf.R_ARM_PRIVATE_8),
		"R_ARM_PRIVATE_9":                           reflect.ValueOf(elf.R_ARM_PRIVATE_9),
		"R_ARM_RABS32":                              reflect.ValueOf(elf.R_ARM_RABS32),
		"R_ARM_RBASE":                               reflect.ValueOf(elf.R_ARM_RBASE),
		"R_ARM_REL32":                               reflect.ValueOf(elf.R_ARM_REL32),
		"R_ARM_REL32_NOI":                           reflect.ValueOf(elf.R_ARM_REL32_NOI),
		"R_ARM_RELATIVE":                            reflect.ValueOf(elf.R_ARM_RELATIVE),
		"R_ARM_RPC24":                               reflect.ValueOf(elf.R_ARM_RPC24),
		"R_ARM_RREL32":                              reflect.ValueOf(elf.R_ARM_RREL32),
		"R_ARM_RSBREL32":                            reflect.ValueOf(elf.R_ARM_RSBREL32),
		"R_ARM_RXPC25":                              reflect.ValueOf(elf.R_ARM_RXPC25),
		"R_ARM_SBREL31":                             reflect.ValueOf(elf.R_ARM_SBREL31),
		"R_ARM_SBREL32":                             reflect.ValueOf(elf.R_ARM_SBREL32),
		"R_ARM_SWI24":                               reflect.ValueOf(elf.R_ARM_SWI24),
		"R_ARM_TARGET1":                             reflect.ValueOf(elf.R_ARM_TARGET1),
		"R_ARM_TARGET2":                             reflect.ValueOf(elf.R_ARM_TARGET2),
		"R_ARM_THM_ABS5":                            reflect.ValueOf(elf.R_ARM_THM_ABS5),
		"R_ARM_THM_ALU_ABS_G0_NC":                   reflect.ValueOf(elf.R_ARM_THM_ALU_ABS_G0_NC),
		"R_ARM_THM_ALU_ABS_G1_NC":                   reflect.ValueOf(elf.R_ARM_THM_ALU_ABS_G1_NC),
		"R_ARM_THM_ALU_ABS_G2_NC":                   reflect.ValueOf(elf.R_ARM_THM_ALU_ABS_G2_NC),
		"R_ARM_THM_ALU_ABS_G3":                      reflect.ValueOf(elf.R_ARM_THM_ALU_ABS_G3),
		"R_ARM_THM_ALU_PREL_11_0":                   reflect.ValueOf(elf.R_ARM_THM_ALU_PREL_11_0),
		"R_ARM_THM_GOT_BREL12":                      reflect.ValueOf(elf.R_ARM_THM_GOT_BREL12),
		"R_ARM_THM_JUMP11":                          reflect.ValueOf(elf.R_ARM_THM_JUMP11),
		"R_ARM_THM_JUMP19":                          reflect.ValueOf(elf.R_ARM_THM_JUMP19),
		"R_ARM_THM_JUMP24":                          reflect.ValueOf(elf.R_ARM_THM_JUMP24),
		"R_ARM_THM_JUMP6":                           reflect.ValueOf(elf.R_ARM_THM_JUMP6),
		"R_ARM_THM_JUMP8":                           reflect.ValueOf(elf.R_ARM_THM_JUMP8),
		"R_ARM_THM_MOVT_ABS":                        reflect.ValueOf(elf.R_ARM_THM_MOVT_ABS),
		"R_ARM_THM_MOVT_BREL":                       reflect.ValueOf(elf.R_ARM_THM_MOVT_BREL),
		"R_ARM_THM_MOVT_PREL":                       reflect.ValueOf(elf.R_ARM_THM_MOVT_PREL),
		"R_ARM_THM_MOVW_ABS_NC":                     reflect.ValueOf(elf.R_ARM_THM_MOVW_ABS_NC),
		"R_ARM_THM_MOVW_BREL":                       reflect.ValueOf(elf.R_ARM_THM_MOVW_BREL),
		"R_ARM_THM_MOVW_BREL_NC":                    reflect.ValueOf(elf.R_ARM_THM_MOVW_BREL_NC),
		"R_ARM_THM_MOVW_PREL_NC":                    reflect.ValueOf(elf.R_ARM_THM_MOVW_PREL_NC),
		"R_ARM_THM_PC12":                            reflect.ValueOf(elf.R_ARM_THM_PC12),
		"R_ARM_THM_PC22":                            reflect.ValueOf(elf.R_ARM_THM_PC22),
		"R_ARM_THM_PC8":                             reflect.ValueOf(elf.R_ARM_THM_PC8),
		"R_ARM_THM_RPC22":                           reflect.ValueOf(elf.R_ARM_THM_RPC22),
		"R_ARM_THM_SWI8":                            reflect.ValueOf(elf.R_ARM_THM_SWI8),
		"R_ARM_THM_TLS_CALL":                        reflect.ValueOf(elf.R_ARM_THM_TLS_CALL),
		"R_ARM_THM_TLS_DESCSEQ16":                   reflect.ValueOf(elf.R_ARM_THM_TLS_DESCSEQ16),
		"R_ARM_THM_TLS_DESCSEQ32":                   reflect.ValueOf(elf.R_ARM_THM_TLS_DESCSEQ32),
		"R_ARM_THM_XPC22":                           reflect.ValueOf(elf.R_ARM_THM_XPC22),
		"R_ARM_TLS_CALL":                            reflect.ValueOf(elf.R_ARM_TLS_CALL),
		"R_ARM_TLS_DESCSEQ":                         reflect.ValueOf(elf.R_ARM_TLS_DESCSEQ),
		"R_ARM_TLS_DTPMOD32":                        reflect.ValueOf(elf.R_ARM_TLS_DTPMOD32),
		"R_ARM_TLS_DTPOFF32":                        reflect.ValueOf(elf.R_ARM_TLS_DTPOFF32),
		"R_ARM_TLS_GD32":                            reflect.ValueOf(elf.R_ARM_TLS_GD32),
		"R_ARM_TLS_GOTDESC":                         reflect.ValueOf(elf.R_ARM_TLS_GOTDESC),
		"R_ARM_TLS_IE12GP":                          reflect.ValueOf(elf.R_ARM_TLS_IE12GP),
		"R_ARM_TLS_IE32":                            reflect.ValueOf(elf.R_ARM_TLS_IE32),
		"R_ARM_TLS_LDM32":                           reflect.ValueOf(elf.R_ARM_TLS_LDM32),
		"R_ARM_TLS_LDO12":                           reflect.ValueOf(elf.R_ARM_TLS_LDO12),
		"R_ARM_TLS_LDO32":                           reflect.ValueOf(elf.R_ARM_TLS_LDO32),
		"R_ARM_TLS_LE12":                            reflect.ValueOf(elf.R_ARM_TLS_LE12),
		"R_ARM_TLS_LE32":                            reflect.ValueOf(elf.R_ARM_TLS_LE32),
		"R_ARM_TLS_TPOFF32":                         reflect.ValueOf(elf.R_ARM_TLS_TPOFF32),
		"R_ARM_V4BX":                                reflect.ValueOf(elf.R_ARM_V4BX),
		"R_ARM_XPC25":                               reflect.ValueOf(elf.R_ARM_XPC25),
		"R_INFO":                                    reflect.ValueOf(elf.R_INFO),
		"R_INFO32":                                  reflect.ValueOf(elf.R_INFO32),
		"R_MIPS_16":                                 reflect.ValueOf(elf.R_MIPS_16),
		"R_MIPS_26":                                 reflect.ValueOf(elf.R_MIPS_26),
		"R_MIPS_32":                                 reflect.ValueOf(elf.R_MIPS_32),
		"R_MIPS_64":                                 reflect.ValueOf(elf.R_MIPS_64),
		"R_MIPS_ADD_IMMEDIATE":                      reflect.ValueOf(elf.R_MIPS_ADD_IMMEDIATE),
		"R_MIPS_CALL16":                             reflect.ValueOf(elf.R_MIPS_CALL16),
		"R_MIPS_CALL_HI16":                          reflect.ValueOf(elf.R_MIPS_CALL_HI16),
		"R_MIPS_CALL_LO16":                          reflect.ValueOf(elf.R_MIPS_CALL_LO16),
		"R_MIPS_DELETE":                             reflect.ValueOf(elf.R_MIPS_DELETE),
		"R_MIPS_GOT16":                              reflect.ValueOf(elf.R_MIPS_GOT16),
		"R_MIPS_GOT_DISP":                           reflect.ValueOf(elf.R_MIPS_GOT_DISP),
		"R_MIPS_GOT_HI16":                           reflect.ValueOf(elf.R_MIPS_GOT_HI16),
		"R_MIPS_GOT_LO16":                           reflect.ValueOf(elf.R_MIPS_GOT_LO16),
		"R_MIPS_GOT_OFST":                           reflect.ValueOf(elf.R_MIPS_GOT_OFST),
		"R_MIPS_GOT_PAGE":                           reflect.ValueOf(elf.R_MIPS_GOT_PAGE),
		"R_MIPS_GPREL16":                            reflect.ValueOf(elf.R_MIPS_GPREL16),
		"R_MIPS_GPREL32":                            reflect.ValueOf(elf.R_MIPS_GPREL32),
		"R_MIPS_HI16":                               reflect.ValueOf(elf.R_MIPS_HI16),
		"R_MIPS_HIGHER":                             reflect.ValueOf(elf.R_MIPS_HIGHER),
		"R_MIPS_HIGHEST":                            reflect.ValueOf(elf.R_MIPS_HIGHEST),
		"R_MIPS_INSERT_A":                           reflect.ValueOf(elf.R_MIPS_INSERT_A),
		"R_MIPS_INSERT_B":                           reflect.ValueOf(elf.R_MIPS_INSERT_B),
		"R_MIPS_JALR":                               reflect.ValueOf(elf.R_MIPS_JALR),
		"R_MIPS_LITERAL":                            reflect.ValueOf(elf.R_MIPS_LITERAL),
		"R_MIPS_LO16":                               reflect.ValueOf(elf.R_MIPS_LO16),
		"R_MIPS_NONE":                               reflect.ValueOf(elf.R_MIPS_NONE),
		"R_MIPS_PC16":                               reflect.ValueOf(elf.R_MIPS_PC16),
		"R_MIPS_PJUMP":                              reflect.ValueOf(elf.R_MIPS_PJUMP),
		"R_MIPS_REL16":                              reflect.ValueOf(elf.R_MIPS_REL16),
		"R_MIPS_REL32":                              reflect.ValueOf(elf.R_MIPS_REL32),
		"R_MIPS_RELGOT":                             reflect.ValueOf(elf.R_MIPS_RELGOT),
		"R_MIPS_SCN_DISP":                           reflect.ValueOf(elf.R_MIPS_SCN_DISP),
		"R_MIPS_SHIFT5":                             reflect.ValueOf(elf.R_MIPS_SHIFT5),
		"R_MIPS_SHIFT6":                             reflect.ValueOf(elf.R_MIPS_SHIFT6),
		"R_MIPS_SUB":                                reflect.ValueOf(elf.R_MIPS_SUB),
		"R_MIPS_TLS_DTPMOD32":                       reflect.ValueOf(elf.R_MIPS_TLS_DTPMOD32),
		"R_MIPS_TLS_DTPMOD64":                       reflect.ValueOf(elf.R_MIPS_TLS_DTPMOD64),
		"R_MIPS_TLS_DTPREL32":                       reflect.ValueOf(elf.R_MIPS_TLS_DTPREL32),
		"R_MIPS_TLS_DTPREL64":                       reflect.ValueOf(elf.R_MIPS_TLS_DTPREL64),
		"R_MIPS_TLS_DTPREL_HI16":                    reflect.ValueOf(elf.R_MIPS_TLS_DTPREL_HI16),
		"R_MIPS_TLS_DTPREL_LO16":                    reflect.ValueOf(elf.R_MIPS_TLS_DTPREL_LO16),
		"R_MIPS_TLS_GD":                             reflect.ValueOf(elf.R_MIPS_TLS_GD),
		"R_MIPS_TLS_GOTTPREL":                       reflect.ValueOf(elf.R_MIPS_TLS_GOTTPREL),
		"R_MIPS_TLS_LDM":                            reflect.ValueOf(elf.R_MIPS_TLS_LDM),
		"R_MIPS_TLS_TPREL32":                        reflect.ValueOf(elf.R_MIPS_TLS_TPREL32),
		"R_MIPS_TLS_TPREL64":                        reflect.ValueOf(elf.R_MIPS_TLS_TPREL64),
		"R_MIPS_TLS_TPREL_HI16":                     reflect.ValueOf(elf.R_MIPS_TLS_TPREL_HI16),
		"R_MIPS_TLS_TPREL_LO16":                     reflect.ValueOf(elf.R_MIPS_TLS_TPREL_LO16),
		"R_PPC64_ADDR14":                            reflect.ValueOf(elf.R_PPC64_ADDR14),
		"R_PPC64_ADDR14_BRNTAKEN":                   reflect.ValueOf(elf.R_PPC64_ADDR14_BRNTAKEN),
		"R_PPC64_ADDR14_BRTAKEN":                    reflect.ValueOf(elf.R_PPC64_ADDR14_BRTAKEN),
		"R_PPC64_ADDR16":                            reflect.ValueOf(elf.R_PPC64_ADDR16),
		"R_PPC64_ADDR16_DS":                         reflect.ValueOf(elf.R_PPC64_ADDR16_DS),
		"R_PPC64_ADDR16_HA":                         reflect.ValueOf(elf.R_PPC64_ADDR16_HA),
		"R_PPC64_ADDR16_HI":                         reflect.ValueOf(elf.R_PPC64_ADDR16_HI),
		"R_PPC64_ADDR16_HIGH":                       reflect.ValueOf(elf.R_PPC64_ADDR16_HIGH),
		"R_PPC64_ADDR16_HIGHA":                      reflect.ValueOf(elf.R_PPC64_ADDR16_HIGHA),
		"R_PPC64_ADDR16_HIGHER":                     reflect.ValueOf(elf.R_PPC64_ADDR16_HIGHER),
		"R_PPC64_ADDR16_HIGHERA":                    reflect.ValueOf(elf.R_PPC64_ADDR16_HIGHERA),
		"R_PPC64_ADDR16_HIGHEST":                    reflect.ValueOf(elf.R_PPC64_ADDR16_HIGHEST),
		"R_PPC64_ADDR16_HIGHESTA":                   reflect.ValueOf(elf.R_PPC64_ADDR16_HIGHESTA),
		"R_PPC64_ADDR16_LO":                         reflect.ValueOf(elf.R_PPC64_ADDR16_LO),
		"R_PPC64_ADDR16_LO_DS":                      reflect.ValueOf(elf.R_PPC64_ADDR16_LO_DS),
		"R_PPC64_ADDR24":                            reflect.ValueOf(elf.R_PPC64_ADDR24),
		"R_PPC64_ADDR32":                            reflect.ValueOf(elf.R_PPC64_ADDR32),
		"R_PPC64_ADDR64":                            reflect.ValueOf(elf.R_PPC64_ADDR64),
		"R_PPC64_ADDR64_LOCAL":                      reflect.ValueOf(elf.R_PPC64_ADDR64_LOCAL),
		"R_PPC64_DTPMOD64":                          reflect.ValueOf(elf.R_PPC64_DTPMOD64),
		"R_PPC64_DTPREL16":                          reflect.ValueOf(elf.R_PPC64_DTPREL16),
		"R_PPC64_DTPREL16_DS":                       reflect.ValueOf(elf.R_PPC64_DTPREL16_DS),
		"R_PPC64_DTPREL16_HA":                       reflect.ValueOf(elf.R_PPC64_DTPREL16_HA),
		"R_PPC64_DTPREL16_HI":                       reflect.ValueOf(elf.R_PPC64_DTPREL16_HI),
		"R_PPC64_DTPREL16_HIGH":                     reflect.ValueOf(elf.R_PPC64_DTPREL16_HIGH),
		"R_PPC64_DTPREL16_HIGHA":                    reflect.ValueOf(elf.R_PPC64_DTPREL16_HIGHA),
		"R_PPC64_DTPREL16_HIGHER":                   reflect.ValueOf(elf.R_PPC64_DTPREL16_HIGHER),
		"R_PPC64_DTPREL16_HIGHERA":                  reflect.ValueOf(elf.R_PPC64_DTPREL16_HIGHERA),
		"R_PPC64_DTPREL16_HIGHEST":                  reflect.ValueOf(elf.R_PPC64_DTPREL16_HIGHEST),
		"R_PPC64_DTPREL16_HIGHESTA":                 reflect.ValueOf(elf.R_PPC64_DTPREL16_HIGHESTA),
		"R_PPC64_DTPREL16_LO":                       reflect.ValueOf(elf.R_PPC64_DTPREL16_LO),
		"R_PPC64_DTPREL16_LO_DS":                    reflect.ValueOf(elf.R_PPC64_DTPREL16_LO_DS),
		"R_PPC64_DTPREL64":                          reflect.ValueOf(elf.R_PPC64_DTPREL64),
		"R_PPC64_ENTRY":                             reflect.ValueOf(elf.R_PPC64_ENTRY),
		"R_PPC64_GOT16":                             reflect.ValueOf(elf.R_PPC64_GOT16),
		"R_PPC64_GOT16_DS":                          reflect.ValueOf(elf.R_PPC64_GOT16_DS),
		"R_PPC64_GOT16_HA":                          reflect.ValueOf(elf.R_PPC64_GOT16_HA),
		"R_PPC64_GOT16_HI":                          reflect.ValueOf(elf.R_PPC64_GOT16_HI),
		"R_PPC64_GOT16_LO":                          reflect.ValueOf(elf.R_PPC64_GOT16_LO),
		"R_PPC64_GOT16_LO_DS":                       reflect.ValueOf(elf.R_PPC64_GOT16_LO_DS),
		"R_PPC64_GOT_DTPREL16_DS":                   reflect.ValueOf(elf.R_PPC64_GOT_DTPREL16_DS),
		"R_PPC64_GOT_DTPREL16_HA":                   reflect.ValueOf(elf.R_PPC64_GOT_DTPREL16_HA),
		"R_PPC64_GOT_DTPREL16_HI":                   reflect.ValueOf(elf.R_PPC64_GOT_DTPREL16_HI),
		"R_PPC64_GOT_DTPREL16_LO_DS":                reflect.ValueOf(elf.R_PPC64_GOT_DTPREL16_LO_DS),
		"R_PPC64_GOT_TLSGD16":                       reflect.ValueOf(elf.R_PPC64_GOT_TLSGD16),
		"R_PPC64_GOT_TLSGD16_HA":                    reflect.ValueOf(elf.R_PPC64_GOT_TLSGD16_HA),
		"R_PPC64_GOT_TLSGD16_HI":                    reflect.ValueOf(elf.R_PPC64_GOT_TLSGD16_HI),
		"R_PPC64_GOT_TLSGD16_LO":                    reflect.ValueOf(elf.R_PPC64_GOT_TLSGD16_LO),
		"R_PPC64_GOT_TLSLD16":                       reflect.ValueOf(elf.R_PPC64_GOT_TLSLD16),
		"R_PPC64_GOT_TLSLD16_HA":                    reflect.ValueOf(elf.R_PPC64_GOT_TLSLD16_HA),
		"R_PPC64_GOT_TLSLD16_HI":                    reflect.ValueOf(elf.R_PPC64_GOT_TLSLD16_HI),
		"R_PPC64_GOT_TLSLD16_LO":                    reflect.ValueOf(elf.R_PPC64_GOT_TLSLD16_LO),
		"R_PPC64_GOT_TPREL16_DS":                    reflect.ValueOf(elf.R_PPC64_GOT_TPREL16_DS),
		"R_PPC64_GOT_TPREL16_HA":                    reflect.ValueOf(elf.R_PPC64_GOT_TPREL16_HA),
		"R_PPC64_GOT_TPREL16_HI":                    reflect.ValueOf(elf.R_PPC64_GOT_TPREL16_HI),
		"R_PPC64_GOT_TPREL16_LO_DS":                 reflect.ValueOf(elf.R_PPC64_GOT_TPREL16_LO_DS),
		"R_PPC64_IRELATIVE":                         reflect.ValueOf(elf.R_PPC64_IRELATIVE),
		"R_PPC64_JMP_IREL":                          reflect.ValueOf(elf.R_PPC64_JMP_IREL),
		"R_PPC64_JMP_SLOT":                          reflect.ValueOf(elf.R_PPC64_JMP_SLOT),
		"R_PPC64_NONE":                              reflect.ValueOf(elf.R_PPC64_NONE),
		"R_PPC64_PLT16_LO_DS":                       reflect.ValueOf(elf.R_PPC64_PLT16_LO_DS),
		"R_PPC64_PLTGOT16":                          reflect.ValueOf(elf.R_PPC64_PLTGOT16),
		"R_PPC64_PLTGOT16_DS":                       reflect.ValueOf(elf.R_PPC64_PLTGOT16_DS),
		"R_PPC64_PLTGOT16_HA":                       reflect.ValueOf(elf.R_PPC64_PLTGOT16_HA),
		"R_PPC64_PLTGOT16_HI":                       reflect.ValueOf(elf.R_PPC64_PLTGOT16_HI),
		"R_PPC64_PLTGOT16_LO":                       reflect.ValueOf(elf.R_PPC64_PLTGOT16_LO),
		"R_PPC64_PLTGOT_LO_DS":                      reflect.ValueOf(elf.R_PPC64_PLTGOT_LO_DS),
		"R_PPC64_REL14":                             reflect.ValueOf(elf.R_PPC64_REL14),
		"R_PPC64_REL14_BRNTAKEN":                    reflect.ValueOf(elf.R_PPC64_REL14_BRNTAKEN),
		"R_PPC64_REL14_BRTAKEN":                     reflect.ValueOf(elf.R_PPC64_REL14_BRTAKEN),
		"R_PPC64_REL16":                             reflect.ValueOf(elf.R_PPC64_REL16),
		"R_PPC64_REL16DX_HA":                        reflect.ValueOf(elf.R_PPC64_REL16DX_HA),
		"R_PPC64_REL16_HA":                          reflect.ValueOf(elf.R_PPC64_REL16_HA),
		"R_PPC64_REL16_HI":                          reflect.ValueOf(elf.R_PPC64_REL16_HI),
		"R_PPC64_REL16_LO":                          reflect.ValueOf(elf.R_PPC64_REL16_LO),
		"R_PPC64_REL24":                             reflect.ValueOf(elf.R_PPC64_REL24),
		"R_PPC64_REL24_NOTOC":                       reflect.ValueOf(elf.R_PPC64_REL24_NOTOC),
		"R_PPC64_REL32":                             reflect.ValueOf(elf.R_PPC64_REL32),
		"R_PPC64_REL64":                             reflect.ValueOf(elf.R_PPC64_REL64),
		"R_PPC64_SECTOFF_DS":                        reflect.ValueOf(elf.R_PPC64_SECTOFF_DS),
		"R_PPC64_SECTOFF_LO_DS":                     reflect.ValueOf(elf.R_PPC64_SECTOFF_LO_DS),
		"R_PPC64_TLS":                               reflect.ValueOf(elf.R_PPC64_TLS),
		"R_PPC64_TLSGD":                             reflect.ValueOf(elf.R_PPC64_TLSGD),
		"R_PPC64_TLSLD":                             reflect.ValueOf(elf.R_PPC64_TLSLD),
		"R_PPC64_TOC":                               reflect.ValueOf(elf.R_PPC64_TOC),
		"R_PPC64_TOC16":                             reflect.ValueOf(elf.R_PPC64_TOC16),
		"R_PPC64_TOC16_DS":                          reflect.ValueOf(elf.R_PPC64_TOC16_DS),
		"R_PPC64_TOC16_HA":                          reflect.ValueOf(elf.R_PPC64_TOC16_HA),
		"R_PPC64_TOC16_HI":                          reflect.ValueOf(elf.R_PPC64_TOC16_HI),
		"R_PPC64_TOC16_LO":                          reflect.ValueOf(elf.R_PPC64_TOC16_LO),
		"R_PPC64_TOC16_LO_DS":                       reflect.ValueOf(elf.R_PPC64_TOC16_LO_DS),
		"R_PPC64_TOCSAVE":                           reflect.ValueOf(elf.R_PPC64_TOCSAVE),
		"R_PPC64_TPREL16":                           reflect.ValueOf(elf.R_PPC64_TPREL16),
		"R_PPC64_TPREL16_DS":                        reflect.ValueOf(elf.R_PPC64_TPREL16_DS),
		"R_PPC64_TPREL16_HA":                        reflect.ValueOf(elf.R_PPC64_TPREL16_HA),
		"R_PPC64_TPREL16_HI":                        reflect.ValueOf(elf.R_PPC64_TPREL16_HI),
		"R_PPC64_TPREL16_HIGH":                      reflect.ValueOf(elf.R_PPC64_TPREL16_HIGH),
		"R_PPC64_TPREL16_HIGHA":                     reflect.ValueOf(elf.R_PPC64_TPREL16_HIGHA),
		"R_PPC64_TPREL16_HIGHER":                    reflect.ValueOf(elf.R_PPC64_TPREL16_HIGHER),
		"R_PPC64_TPREL16_HIGHERA":                   reflect.ValueOf(elf.R_PPC64_TPREL16_HIGHERA),
		"R_PPC64_TPREL16_HIGHEST":                   reflect.ValueOf(elf.R_PPC64_TPREL16_HIGHEST),
		"R_PPC64_TPREL16_HIGHESTA":                  reflect.ValueOf(elf.R_PPC64_TPREL16_HIGHESTA),
		"R_PPC64_TPREL16_LO":                        reflect.ValueOf(elf.R_PPC64_TPREL16_LO),
		"R_PPC64_TPREL16_LO_DS":                     reflect.ValueOf(elf.R_PPC64_TPREL16_LO_DS),
		"R_PPC64_TPREL64":                           reflect.ValueOf(elf.R_PPC64_TPREL64),
		"R_PPC_ADDR14":                              reflect.ValueOf(elf.R_PPC_ADDR14),
		"R_PPC_ADDR14_BRNTAKEN":                     reflect.ValueOf(elf.R_PPC_ADDR14_BRNTAKEN),
		"R_PPC_ADDR14_BRTAKEN":                      reflect.ValueOf(elf.R_PPC_ADDR14_BRTAKEN),
		"R_PPC_ADDR16":                              reflect.ValueOf(elf.R_PPC_ADDR16),
		"R_PPC_ADDR16_HA":                           reflect.ValueOf(elf.R_PPC_ADDR16_HA),
		"R_PPC_ADDR16_HI":                           reflect.ValueOf(elf.R_PPC_ADDR16_HI),
		"R_PPC_ADDR16_LO":                           reflect.ValueOf(elf.R_PPC_ADDR16_LO),
		"R_PPC_ADDR24":                              reflect.ValueOf(elf.R_PPC_ADDR24),
		"R_PPC_ADDR32":                              reflect.ValueOf(elf.R_PPC_ADDR32),
		"R_PPC_COPY":                                reflect.ValueOf(elf.R_PPC_COPY),
		"R_PPC_DTPMOD32":                            reflect.ValueOf(elf.R_PPC_DTPMOD32),
		"R_PPC_DTPREL16":                            reflect.ValueOf(elf.R_PPC_DTPREL16),
		"R_PPC_DTPREL16_HA":                         reflect.ValueOf(elf.R_PPC_DTPREL16_HA),
		"R_PPC_DTPREL16_HI":                         reflect.ValueOf(elf.R_PPC_DTPREL16_HI),
		"R_PPC_DTPREL16_LO":                         reflect.ValueOf(elf.R_PPC_DTPREL16_LO),
		"R_PPC_DTPREL32":                            reflect.ValueOf(elf.R_PPC_DTPREL32),
		"R_PPC_EMB_BIT_FLD":                         reflect.ValueOf(elf.R_PPC_EMB_BIT_FLD),
		"R_PPC_EMB_MRKREF":                          reflect.ValueOf(elf.R_PPC_EMB_MRKREF),
		"R_PPC_EMB_NADDR16":                         reflect.ValueOf(elf.R_PPC_EMB_NADDR16),
		"R_PPC_EMB_NADDR16_HA":                      reflect.ValueOf(elf.R_PPC_EMB_NADDR16_HA),
		"R_PPC_EMB_NADDR16_HI":                      reflect.ValueOf(elf.R_PPC_EMB_NADDR16_HI),
		"R_PPC_EMB_NADDR16_LO":                      reflect.ValueOf(elf.R_PPC_EMB_NADDR16_LO),
		"R_PPC_EMB_NADDR32":                         reflect.ValueOf(elf.R_PPC_EMB_NADDR32),
		"R_PPC_EMB_RELSDA":                          reflect.ValueOf(elf.R_PPC_EMB_RELSDA),
		"R_PPC_EMB_RELSEC16":                        reflect.ValueOf(elf.R_PPC_EMB_RELSEC16),
		"R_PPC_EMB_RELST_HA":                        reflect.ValueOf(elf.R_PPC_EMB_RELST_HA),
		"R_PPC_EMB_RELST_HI":                        reflect.ValueOf(elf.R_PPC_EMB_RELST_HI),
		"R_PPC_EMB_RELST_LO":                        reflect.ValueOf(elf.R_PPC_EMB_RELST_LO),
		"R_PPC_EMB_SDA21":                           reflect.ValueOf(elf.R_PPC_EMB_SDA21),
		"R_PPC_EMB_SDA2I16":                         reflect.ValueOf(elf.R_PPC_EMB_SDA2I16),
		"R_PPC_EMB_SDA2REL":                         reflect.ValueOf(elf.R_PPC_EMB_SDA2REL),
		"R_PPC_EMB_SDAI16":                          reflect.ValueOf(elf.R_PPC_EMB_SDAI16),
		"R_PPC_GLOB_DAT":                            reflect.ValueOf(elf.R_PPC_GLOB_DAT),
		"R_PPC_GOT16":                               reflect.ValueOf(elf.R_PPC_GOT16),
		"R_PPC_GOT16_HA":                            reflect.ValueOf(elf.R_PPC_GOT16_HA),
		"R_PPC_GOT16_HI":                            reflect.ValueOf(elf.R_PPC_GOT16_HI),
		"R_PPC_GOT16_LO":                            reflect.ValueOf(elf.R_PPC_GOT16_LO),
		"R_PPC_GOT_TLSGD16":                         reflect.ValueOf(elf.R_PPC_GOT_TLSGD16),
		"R_PPC_GOT_TLSGD16_HA":                      reflect.ValueOf(elf.R_PPC_GOT_TLSGD16_HA),
		"R_PPC_GOT_TLSGD16_HI":                      reflect.ValueOf(elf.R_PPC_GOT_TLSGD16_HI),
		"R_PPC_GOT_TLSGD16_LO":                      reflect.ValueOf(elf.R_PPC_GOT_TLSGD16_LO),
		"R_PPC_GOT_TLSLD16":                         reflect.ValueOf(elf.R_PPC_GOT_TLSLD16),
		"R_PPC_GOT_TLSLD16_HA":                      reflect.ValueOf(elf.R_PPC_GOT_TLSLD16_HA),
		"R_PPC_GOT_TLSLD16_HI":                      reflect.ValueOf(elf.R_PPC_GOT_TLSLD16_HI),
		"R_PPC_GOT_TLSLD16_LO":                      reflect.ValueOf(elf.R_PPC_GOT_TLSLD16_LO),
		"R_PPC_GOT_TPREL16":                         reflect.ValueOf(elf.R_PPC_GOT_TPREL16),
		"R_PPC_GOT_TPREL16_HA":                      reflect.ValueOf(elf.R_PPC_GOT_TPREL16_HA),
		"R_PPC_GOT_TPREL16_HI":                      reflect.ValueOf(elf.R_PPC_GOT_TPREL16_HI),
		"R_PPC_GOT_TPREL16_LO":                      reflect.ValueOf(elf.R_PPC_GOT_TPREL16_LO),
		"R_PPC_JMP_SLOT":                            reflect.ValueOf(elf.R_PPC_JMP_SLOT),
		"R_PPC_LOCAL24PC":                           reflect.ValueOf(elf.R_PPC_LOCAL24PC),
		"R_PPC_NONE":                                reflect.ValueOf(elf.R_PPC_NONE),
		"R_PPC_PLT16_HA":                            reflect.ValueOf(elf.R_PPC_PLT16_HA),
		"R_PPC_PLT16_HI":                            reflect.ValueOf(elf.R_PPC_PLT16_HI),
		"R_PPC_PLT16_LO":                            reflect.ValueOf(elf.R_PPC_PLT16_LO),
		"R_PPC_PLT32":                               reflect.ValueOf(elf.R_PPC_PLT32),
		"R_PPC_PLTREL24":                            reflect.ValueOf(elf.R_PPC_PLTREL24),
		"R_PPC_PLTREL32":                            reflect.ValueOf(elf.R_PPC_PLTREL32),
		"R_PPC_REL14":                               reflect.ValueOf(elf.R_PPC_REL14),
		"R_PPC_REL14_BRNTAKEN":                      reflect.ValueOf(elf.R_PPC_REL14_BRNTAKEN),
		"R_PPC_REL14_BRTAKEN":                       reflect.ValueOf(elf.R_PPC_REL14_BRTAKEN),
		"R_PPC_REL24":                               reflect.ValueOf(elf.R_PPC_REL24),
		"R_PPC_REL32":                               reflect.ValueOf(elf.R_PPC_REL32),
		"R_PPC_RELATIVE":                            reflect.ValueOf(elf.R_PPC_RELATIVE),
		"R_PPC_SDAREL16":                            reflect.ValueOf(elf.R_PPC_SDAREL16),
		"R_PPC_SECTOFF":                             reflect.ValueOf(elf.R_PPC_SECTOFF),
		"R_PPC_SECTOFF_HA":                          reflect.ValueOf(elf.R_PPC_SECTOFF_HA),
		"R_PPC_SECTOFF_HI":                          reflect.ValueOf(elf.R_PPC_SECTOFF_HI),
		"R_PPC_SECTOFF_LO":                          reflect.ValueOf(elf.R_PPC_SECTOFF_LO),
		"R_PPC_TLS":                                 reflect.ValueOf(elf.R_PPC_TLS),
		"R_PPC_TPREL16":                             reflect.ValueOf(elf.R_PPC_TPREL16),
		"R_PPC_TPREL16_HA":                          reflect.ValueOf(elf.R_PPC_TPREL16_HA),
		"R_PPC_TPREL16_HI":                          reflect.ValueOf(elf.R_PPC_TPREL16_HI),
		"R_PPC_TPREL16_LO":                          reflect.ValueOf(elf.R_PPC_TPREL16_LO),
		"R_PPC_TPREL32":                             reflect.ValueOf(elf.R_PPC_TPREL32),
		"R_PPC_UADDR16":                             reflect.ValueOf(elf.R_PPC_UADDR16),
		"R_PPC_UADDR32":                             reflect.ValueOf(elf.R_PPC_UADDR32),
		"R_RISCV_32":                                reflect.ValueOf(elf.R_RISCV_32),
		"R_RISCV_32_PCREL":                          reflect.ValueOf(elf.R_RISCV_32_PCREL),
		"R_RISCV_64":                                reflect.ValueOf(elf.R_RISCV_64),
		"R_RISCV_ADD16":                             reflect.ValueOf(elf.R_RISCV_ADD16),
		"R_RISCV_ADD32":                             reflect.ValueOf(elf.R_RISCV_ADD32),
		"R_RISCV_ADD64":                             reflect.ValueOf(elf.R_RISCV_ADD64),
		"R_RISCV_ADD8":                              reflect.ValueOf(elf.R_RISCV_ADD8),
		"R_RISCV_ALIGN":                             reflect.ValueOf(elf.R_RISCV_ALIGN),
		"R_RISCV_BRANCH":                            reflect.ValueOf(elf.R_RISCV_BRANCH),
		"R_RISCV_CALL":                              reflect.ValueOf(elf.R_RISCV_CALL),
		"R_RISCV_CALL_PLT":                          reflect.ValueOf(elf.R_RISCV_CALL_PLT),
		"R_RISCV_COPY":                              reflect.ValueOf(elf.R_RISCV_COPY),
		"R_RISCV_GNU_VTENTRY":                       reflect.ValueOf(elf.R_RISCV_GNU_VTENTRY),
		"R_RISCV_GNU_VTINHERIT":                     reflect.ValueOf(elf.R_RISCV_GNU_VTINHERIT),
		"R_RISCV_GOT_HI20":                          reflect.ValueOf(elf.R_RISCV_GOT_HI20),
		"R_RISCV_GPREL_I":                           reflect.ValueOf(elf.R_RISCV_GPREL_I),
		"R_RISCV_GPREL_S":                           reflect.ValueOf(elf.R_RISCV_GPREL_S),
		"R_RISCV_HI20":                              reflect.ValueOf(elf.R_RISCV_HI20),
		"R_RISCV_JAL":                               reflect.ValueOf(elf.R_RISCV_JAL),
		"R_RISCV_JUMP_SLOT":                         reflect.ValueOf(elf.R_RISCV_JUMP_SLOT),
		"R_RISCV_LO12_I":                            reflect.ValueOf(elf.R_RISCV_LO12_I),
		"R_RISCV_LO12_S":                            reflect.ValueOf(elf.R_RISCV_LO12_S),
		"R_RISCV_NONE":                              reflect.ValueOf(elf.R_RISCV_NONE),
		"R_RISCV_PCREL_HI20":                        reflect.ValueOf(elf.R_RISCV_PCREL_HI20),
		"R_RISCV_PCREL_LO12_I":                      reflect.ValueOf(elf.R_RISCV_PCREL_LO12_I),
		"R_RISCV_PCREL_LO12_S":                      reflect.ValueOf(elf.R_RISCV_PCREL_LO12_S),
		"R_RISCV_RELATIVE":                          reflect.ValueOf(elf.R_RISCV_RELATIVE),
		"R_RISCV_RELAX":                             reflect.ValueOf(elf.R_RISCV_RELAX),
		"R_RISCV_RVC_BRANCH":                        reflect.ValueOf(elf.R_RISCV_RVC_BRANCH),
		"R_RISCV_RVC_JUMP":                          reflect.ValueOf(elf.R_RISCV_RVC_JUMP),
		"R_RISCV_RVC_LUI":                           reflect.ValueOf(elf.R_RISCV_RVC_LUI),
		"R_RISCV_SET16":                             reflect.ValueOf(elf.R_RISCV_SET16),
		"R_RISCV_SET32":                             reflect.ValueOf(elf.R_RISCV_SET32),
		"R_RISCV_SET6":                              reflect.ValueOf(elf.R_RISCV_SET6),
		"R_RISCV_SET8":                              reflect.ValueOf(elf.R_RISCV_SET8),
		"R_RISCV_SUB16":                             reflect.ValueOf(elf.R_RISCV_SUB16),
		"R_RISCV_SUB32":                             reflect.ValueOf(elf.R_RISCV_SUB32),
		"R_RISCV_SUB6":                              reflect.ValueOf(elf.R_RISCV_SUB6),
		"R_RISCV_SUB64":                             reflect.ValueOf(elf.R_RISCV_SUB64),
		"R_RISCV_SUB8":                              reflect.ValueOf(elf.R_RISCV_SUB8),
		"R_RISCV_TLS_DTPMOD32":                      reflect.ValueOf(elf.R_RISCV_TLS_DTPMOD32),
		"R_RISCV_TLS_DTPMOD64":                      reflect.ValueOf(elf.R_RISCV_TLS_DTPMOD64),
		"R_RISCV_TLS_DTPREL32":                      reflect.ValueOf(elf.R_RISCV_TLS_DTPREL32),
		"R_RISCV_TLS_DTPREL64":                      reflect.ValueOf(elf.R_RISCV_TLS_DTPREL64),
		"R_RISCV_TLS_GD_HI20":                       reflect.ValueOf(elf.R_RISCV_TLS_GD_HI20),
		"R_RISCV_TLS_GOT_HI20":                      reflect.ValueOf(elf.R_RISCV_TLS_GOT_HI20),
		"R_RISCV_TLS_TPREL32":                       reflect.ValueOf(elf.R_RISCV_TLS_TPREL32),
		"R_RISCV_TLS_TPREL64":                       reflect.ValueOf(elf.R_RISCV_TLS_TPREL64),
		"R_RISCV_TPREL_ADD":                         reflect.ValueOf(elf.R_RISCV_TPREL_ADD),
		"R_RISCV_TPREL_HI20":                        reflect.ValueOf(elf.R_RISCV_TPREL_HI20),
		"R_RISCV_TPREL_I":                           reflect.ValueOf(elf.R_RISCV_TPREL_I),
		"R_RISCV_TPREL_LO12_I":                      reflect.ValueOf(elf.R_RISCV_TPREL_LO12_I),
		"R_RISCV_TPREL_LO12_S":                      reflect.ValueOf(elf.R_RISCV_TPREL_LO12_S),
		"R_RISCV_TPREL_S":                           reflect.ValueOf(elf.R_RISCV_TPREL_S),
		"R_SPARC_10":                                reflect.ValueOf(elf.R_SPARC_10),
		"R_SPARC_11":                                reflect.ValueOf(elf.R_SPARC_11),
		"R_SPARC_13":                                reflect.ValueOf(elf.R_SPARC_13),
		"R_SPARC_16":                                reflect.ValueOf(elf.R_SPARC_16),
		"R_SPARC_22":                                reflect.ValueOf(elf.R_SPARC_22),
		"R_SPARC_32":                                reflect.ValueOf(elf.R_SPARC_32),
		"R_SPARC_5":                                 reflect.ValueOf(elf.R_SPARC_5),
		"R_SPARC_6":                                 reflect.ValueOf(elf.R_SPARC_6),
		"R_SPARC_64":                                reflect.ValueOf(elf.R_SPARC_64),
		"R_SPARC_7":                                 reflect.ValueOf(elf.R_SPARC_7),
		"R_SPARC_8":                                 reflect.ValueOf(elf.R_SPARC_8),
		"R_SPARC_COPY":                              reflect.ValueOf(elf.R_SPARC_COPY),
		"R_SPARC_DISP16":                            reflect.ValueOf(elf.R_SPARC_DISP16),
		"R_SPARC_DISP32":                            reflect.ValueOf(elf.R_SPARC_DISP32),
		"R_SPARC_DISP64":                            reflect.ValueOf(elf.R_SPARC_DISP64),
		"R_SPARC_DISP8":                             reflect.ValueOf(elf.R_SPARC_DISP8),
		"R_SPARC_GLOB_DAT":                          reflect.ValueOf(elf.R_SPARC_GLOB_DAT),
		"R_SPARC_GLOB_JMP":                          reflect.ValueOf(elf.R_SPARC_GLOB_JMP),
		"R_SPARC_GOT10":                             reflect.ValueOf(elf.R_SPARC_GOT10),
		"R_SPARC_GOT13":                             reflect.ValueOf(elf.R_SPARC_GOT13),
		"R_SPARC_GOT22":                             reflect.ValueOf(elf.R_SPARC_GOT22),
		"R_SPARC_H44":                               reflect.ValueOf(elf.R_SPARC_H44),
		"R_SPARC_HH22":                              reflect.ValueOf(elf.R_SPARC_HH22),
		"R_SPARC_HI22":                              reflect.ValueOf(elf.R_SPARC_HI22),
		"R_SPARC_HIPLT22":                           reflect.ValueOf(elf.R_SPARC_HIPLT22),
		"R_SPARC_HIX22":                             reflect.ValueOf(elf.R_SPARC_HIX22),
		"R_SPARC_HM10":                              reflect.ValueOf(elf.R_SPARC_HM10),
		"R_SPARC_JMP_SLOT":                          reflect.ValueOf(elf.R_SPARC_JMP_SLOT),
		"R_SPARC_L44":                               reflect.ValueOf(elf.R_SPARC_L44),
		"R_SPARC_LM22":                              reflect.ValueOf(elf.R_SPARC_LM22),
		"R_SPARC_LO10":                              reflect.ValueOf(elf.R_SPARC_LO10),
		"R_SPARC_LOPLT10":                           reflect.ValueOf(elf.R_SPARC_LOPLT10),
		"R_SPARC_LOX10":                             reflect.ValueOf(elf.R_SPARC_LOX10),
		"R_SPARC_M44":                               reflect.ValueOf(elf.R_SPARC_M44),
		"R_SPARC_NONE":                              reflect.ValueOf(elf.R_SPARC_NONE),
		"R_SPARC_OLO10":                             reflect.ValueOf(elf.R_SPARC_OLO10),
		"R_SPARC_PC10":                              reflect.ValueOf(elf.R_SPARC_PC10),
		"R_SPARC_PC22":                              reflect.ValueOf(elf.R_SPARC_PC22),
		"R_SPARC_PCPLT10":                           reflect.ValueOf(elf.R_SPARC_PCPLT10),
		"R_SPARC_PCPLT22":                           reflect.ValueOf(elf.R_SPARC_PCPLT22),
		"R_SPARC_PCPLT32":                           reflect.ValueOf(elf.R_SPARC_PCPLT32),
		"R_SPARC_PC_HH22":                           reflect.ValueOf(elf.R_SPARC_PC_HH22),
		"R_SPARC_PC_HM10":                           reflect.ValueOf(elf.R_SPARC_PC_HM10),
		"R_SPARC_PC_LM22":                           reflect.ValueOf(elf.R_SPARC_PC_LM22),
		"R_SPARC_PLT32":                             reflect.ValueOf(elf.R_SPARC_PLT32),
		"R_SPARC_PLT64":                             reflect.ValueOf(elf.R_SPARC_PLT64),
		"R_SPARC_REGISTER":                          reflect.ValueOf(elf.R_SPARC_REGISTER),
		"R_SPARC_RELATIVE":                          reflect.ValueOf(elf.R_SPARC_RELATIVE),
		"R_SPARC_UA16":                              reflect.ValueOf(elf.R_SPARC_UA16),
		"R_SPARC_UA32":                              reflect.ValueOf(elf.R_SPARC_UA32),
		"R_SPARC_UA64":                              reflect.ValueOf(elf.R_SPARC_UA64),
		"R_SPARC_WDISP16":                           reflect.ValueOf(elf.R_SPARC_WDISP16),
		"R_SPARC_WDISP19":                           reflect.ValueOf(elf.R_SPARC_WDISP19),
		"R_SPARC_WDISP22":                           reflect.ValueOf(elf.R_SPARC_WDISP22),
		"R_SPARC_WDISP30":                           reflect.ValueOf(elf.R_SPARC_WDISP30),
		"R_SPARC_WPLT30":                            reflect.ValueOf(elf.R_SPARC_WPLT30),
		"R_SYM32":                                   reflect.ValueOf(elf.R_SYM32),
		"R_SYM64":                                   reflect.ValueOf(elf.R_SYM64),
		"R_TYPE32":                                  reflect.ValueOf(elf.R_TYPE32),
		"R_TYPE64":                                  reflect.ValueOf(elf.R_TYPE64),
		"R_X86_64_16":                               reflect.ValueOf(elf.R_X86_64_16),
		"R_X86_64_32":                               reflect.ValueOf(elf.R_X86_64_32),
		"R_X86_64_32S":                              reflect.ValueOf(elf.R_X86_64_32S),
		"R_X86_64_64":                               reflect.ValueOf(elf.R_X86_64_64),
		"R_X86_64_8":                                reflect.ValueOf(elf.R_X86_64_8),
		"R_X86_64_COPY":                             reflect.ValueOf(elf.R_X86_64_COPY),
		"R_X86_64_DTPMOD64":                         reflect.ValueOf(elf.R_X86_64_DTPMOD64),
		"R_X86_64_DTPOFF32":                         reflect.ValueOf(elf.R_X86_64_DTPOFF32),
		"R_X86_64_DTPOFF64":                         reflect.ValueOf(elf.R_X86_64_DTPOFF64),
		"R_X86_64_GLOB_DAT":                         reflect.ValueOf(elf.R_X86_64_GLOB_DAT),
		"R_X86_64_GOT32":                            reflect.ValueOf(elf.R_X86_64_GOT32),
		"R_X86_64_GOT64":                            reflect.ValueOf(elf.R_X86_64_GOT64),
		"R_X86_64_GOTOFF64":                         reflect.ValueOf(elf.R_X86_64_GOTOFF64),
		"R_X86_64_GOTPC32":                          reflect.ValueOf(elf.R_X86_64_GOTPC32),
		"R_X86_64_GOTPC32_TLSDESC":                  reflect.ValueOf(elf.R_X86_64_GOTPC32_TLSDESC),
		"R_X86_64_GOTPC64":                          reflect.ValueOf(elf.R_X86_64_GOTPC64),
		"R_X86_64_GOTPCREL":                         reflect.ValueOf(elf.R_X86_64_GOTPCREL),
		"R_X86_64_GOTPCREL64":                       reflect.ValueOf(elf.R_X86_64_GOTPCREL64),
		"R_X86_64_GOTPCRELX":                        reflect.ValueOf(elf.R_X86_64_GOTPCRELX),
		"R_X86_64_GOTPLT64":                         reflect.ValueOf(elf.R_X86_64_GOTPLT64),
		"R_X86_64_GOTTPOFF":                         reflect.ValueOf(elf.R_X86_64_GOTTPOFF),
		"R_X86_64_IRELATIVE":                        reflect.ValueOf(elf.R_X86_64_IRELATIVE),
		"R_X86_64_JMP_SLOT":                         reflect.ValueOf(elf.R_X86_64_JMP_SLOT),
		"R_X86_64_NONE":                             reflect.ValueOf(elf.R_X86_64_NONE),
		"R_X86_64_PC16":                             reflect.ValueOf(elf.R_X86_64_PC16),
		"R_X86_64_PC32":                             reflect.ValueOf(elf.R_X86_64_PC32),
		"R_X86_64_PC32_BND":                         reflect.ValueOf(elf.R_X86_64_PC32_BND),
		"R_X86_64_PC64":                             reflect.ValueOf(elf.R_X86_64_PC64),
		"R_X86_64_PC8":                              reflect.ValueOf(elf.R_X86_64_PC8),
		"R_X86_64_PLT32":                            reflect.ValueOf(elf.R_X86_64_PLT32),
		"R_X86_64_PLT32_BND":                        reflect.ValueOf(elf.R_X86_64_PLT32_BND),
		"R_X86_64_PLTOFF64":                         reflect.ValueOf(elf.R_X86_64_PLTOFF64),
		"R_X86_64_RELATIVE":                         reflect.ValueOf(elf.R_X86_64_RELATIVE),
		"R_X86_64_RELATIVE64":                       reflect.ValueOf(elf.R_X86_64_RELATIVE64),
		"R_X86_64_REX_GOTPCRELX":                    reflect.ValueOf(elf.R_X86_64_REX_GOTPCRELX),
		"R_X86_64_SIZE32":                           reflect.ValueOf(elf.R_X86_64_SIZE32),
		"R_X86_64_SIZE64":                           reflect.ValueOf(elf.R_X86_64_SIZE64),
		"R_X86_64_TLSDESC":                          reflect.ValueOf(elf.R_X86_64_TLSDESC),
		"R_X86_64_TLSDESC_CALL":                     reflect.ValueOf(elf.R_X86_64_TLSDESC_CALL),
		"R_X86_64_TLSGD":                            reflect.ValueOf(elf.R_X86_64_TLSGD),
		"R_X86_64_TLSLD":                            reflect.ValueOf(elf.R_X86_64_TLSLD),
		"R_X86_64_TPOFF32":                          reflect.ValueOf(elf.R_X86_64_TPOFF32),
		"R_X86_64_TPOFF64":                          reflect.ValueOf(elf.R_X86_64_TPOFF64),
		"SHF_ALLOC":                                 reflect.ValueOf(elf.SHF_ALLOC),
		"SHF_COMPRESSED":                            reflect.ValueOf(elf.SHF_COMPRESSED),
		"SHF_EXECINSTR":                             reflect.ValueOf(elf.SHF_EXECINSTR),
		"SHF_GROUP":                                 reflect.ValueOf(elf.SHF_GROUP),
		"SHF_INFO_LINK":                             reflect.ValueOf(elf.SHF_INFO_LINK),
		"SHF_LINK_ORDER":                            reflect.ValueOf(elf.SHF_LINK_ORDER),
		"SHF_MASKOS":                                reflect.ValueOf(elf.SHF_MASKOS),
		"SHF_MASKPROC":                              reflect.ValueOf(elf.SHF_MASKPROC),
		"SHF_MERGE":                                 reflect.ValueOf(elf.SHF_MERGE),
		"SHF_OS_NONCONFORMING":                      reflect.ValueOf(elf.SHF_OS_NONCONFORMING),
		"SHF_STRINGS":                               reflect.ValueOf(elf.SHF_STRINGS),
		"SHF_TLS":                                   reflect.ValueOf(elf.SHF_TLS),
		"SHF_WRITE":                                 reflect.ValueOf(elf.SHF_WRITE),
		"SHN_ABS":                                   reflect.ValueOf(elf.SHN_ABS),
		"SHN_COMMON":                                reflect.ValueOf(elf.SHN_COMMON),
		"SHN_HIOS":                                  reflect.ValueOf(elf.SHN_HIOS),
		"SHN_HIPROC":                                reflect.ValueOf(elf.SHN_HIPROC),
		"SHN_HIRESERVE":                             reflect.ValueOf(elf.SHN_HIRESERVE),
		"SHN_LOOS":                                  reflect.ValueOf(elf.SHN_LOOS),
		"SHN_LOPROC":                                reflect.ValueOf(elf.SHN_LOPROC),
		"SHN_LORESERVE":                             reflect.ValueOf(elf.SHN_LORESERVE),
		"SHN_UNDEF":                                 reflect.ValueOf(elf.SHN_UNDEF),
		"SHN_XINDEX":                                reflect.ValueOf(elf.SHN_XINDEX),
		"SHT_DYNAMIC":                               reflect.ValueOf(elf.SHT_DYNAMIC),
		"SHT_DYNSYM":                                reflect.ValueOf(elf.SHT_DYNSYM),
		"SHT_FINI_ARRAY":                            reflect.ValueOf(elf.SHT_FINI_ARRAY),
		"SHT_GNU_ATTRIBUTES":                        reflect.ValueOf(elf.SHT_GNU_ATTRIBUTES),
		"SHT_GNU_HASH":                              reflect.ValueOf(elf.SHT_GNU_HASH),
		"SHT_GNU_LIBLIST":                           reflect.ValueOf(elf.SHT_GNU_LIBLIST),
		"SHT_GNU_VERDEF":                            reflect.ValueOf(elf.SHT_GNU_VERDEF),
		"SHT_GNU_VERNEED":                           reflect.ValueOf(elf.SHT_GNU_VERNEED),
		"SHT_GNU_VERSYM":                            reflect.ValueOf(elf.SHT_GNU_VERSYM),
		"SHT_GROUP":                                 reflect.ValueOf(elf.SHT_GROUP),
		"SHT_HASH":                                  reflect.ValueOf(elf.SHT_HASH),
		"SHT_HIOS":                                  reflect.ValueOf(elf.SHT_HIOS),
		"SHT_HIPROC":                                reflect.ValueOf(elf.SHT_HIPROC),
		"SHT_HIUSER":                                reflect.ValueOf(elf.SHT_HIUSER),
		"SHT_INIT_ARRAY":                            reflect.ValueOf(elf.SHT_INIT_ARRAY),
		"SHT_LOOS":                                  reflect.ValueOf(elf.SHT_LOOS),
		"SHT_LOPROC":                                reflect.ValueOf(elf.SHT_LOPROC),
		"SHT_LOUSER":                                reflect.ValueOf(elf.SHT_LOUSER),
		"SHT_NOBITS":                                reflect.ValueOf(elf.SHT_NOBITS),
		"SHT_NOTE":                                  reflect.ValueOf(elf.SHT_NOTE),
		"SHT_NULL":                                  reflect.ValueOf(elf.SHT_NULL),
		"SHT_PREINIT_ARRAY":                         reflect.ValueOf(elf.SHT_PREINIT_ARRAY),
		"SHT_PROGBITS":                              reflect.ValueOf(elf.SHT_PROGBITS),
		"SHT_REL":                                   reflect.ValueOf(elf.SHT_REL),
		"SHT_RELA":                                  reflect.ValueOf(elf.SHT_RELA),
		"SHT_SHLIB":                                 reflect.ValueOf(elf.SHT_SHLIB),
		"SHT_STRTAB":                                reflect.ValueOf(elf.SHT_STRTAB),
		"SHT_SYMTAB":                                reflect.ValueOf(elf.SHT_SYMTAB),
		"SHT_SYMTAB_SHNDX":                          reflect.ValueOf(elf.SHT_SYMTAB_SHNDX),
		"STB_GLOBAL":                                reflect.ValueOf(elf.STB_GLOBAL),
		"STB_HIOS":                                  reflect.ValueOf(elf.STB_HIOS),
		"STB_HIPROC":                                reflect.ValueOf(elf.STB_HIPROC),
		"STB_LOCAL":                                 reflect.ValueOf(elf.STB_LOCAL),
		"STB_LOOS":                                  reflect.ValueOf(elf.STB_LOOS),
		"STB_LOPROC":                                reflect.ValueOf(elf.STB_LOPROC),
		"STB_WEAK":                                  reflect.ValueOf(elf.STB_WEAK),
		"STT_COMMON":                                reflect.ValueOf(elf.STT_COMMON),
		"STT_FILE":                                  reflect.ValueOf(elf.STT_FILE),
		"STT_FUNC":                                  reflect.ValueOf(elf.STT_FUNC),
		"STT_HIOS":                                  reflect.ValueOf(elf.STT_HIOS),
		"STT_HIPROC":                                reflect.ValueOf(elf.STT_HIPROC),
		"STT_LOOS":                                  reflect.ValueOf(elf.STT_LOOS),
		"STT_LOPROC":                                reflect.ValueOf(elf.STT_LOPROC),
		"STT_NOTYPE":                                reflect.ValueOf(elf.STT_NOTYPE),
		"STT_OBJECT":                                reflect.ValueOf(elf.STT_OBJECT),
		"STT_SECTION":                               reflect.ValueOf(elf.STT_SECTION),
		"STT_TLS":                                   reflect.ValueOf(elf.STT_TLS),
		"STV_DEFAULT":                               reflect.ValueOf(elf.STV_DEFAULT),
		"STV_HIDDEN":                                reflect.ValueOf(elf.STV_HIDDEN),
		"STV_INTERNAL":                              reflect.ValueOf(elf.STV_INTERNAL),
		"STV_PROTECTED":                             reflect.ValueOf(elf.STV_PROTECTED),
		"ST_BIND":                                   reflect.ValueOf(elf.ST_BIND),
		"ST_INFO":                                   reflect.ValueOf(elf.ST_INFO),
		"ST_TYPE":                                   reflect.ValueOf(elf.ST_TYPE),
		"ST_VISIBILITY":                             reflect.ValueOf(elf.ST_VISIBILITY),
		"Sym32Size":                                 reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"Sym64Size":                                 reflect.ValueOf(constant.MakeFromLiteral("24", token.INT, 0)),

		// type definitions
		"Chdr32":          reflect.ValueOf((*elf.Chdr32)(nil)),
		"Chdr64":          reflect.ValueOf((*elf.Chdr64)(nil)),
		"Class":           reflect.ValueOf((*elf.Class)(nil)),
		"CompressionType": reflect.ValueOf((*elf.CompressionType)(nil)),
		"Data":            reflect.ValueOf((*elf.Data)(nil)),
		"Dyn32":           reflect.ValueOf((*elf.Dyn32)(nil)),
		"Dyn64":           reflect.ValueOf((*elf.Dyn64)(nil)),
		"DynFlag":         reflect.ValueOf((*elf.DynFlag)(nil)),
		"DynTag":          reflect.ValueOf((*elf.DynTag)(nil)),
		"File":            reflect.ValueOf((*elf.File)(nil)),
		"FileHeader":      reflect.ValueOf((*elf.FileHeader)(nil)),
		"FormatError":     reflect.ValueOf((*elf.FormatError)(nil)),
		"Header32":        reflect.ValueOf((*elf.Header32)(nil)),
		"Header64":        reflect.ValueOf((*elf.Header64)(nil)),
		"ImportedSymbol":  reflect.ValueOf((*elf.ImportedSymbol)(nil)),
		"Machine":         reflect.ValueOf((*elf.Machine)(nil)),
		"NType":           reflect.ValueOf((*elf.NType)(nil)),
		"OSABI":           reflect.ValueOf((*elf.OSABI)(nil)),
		"Prog":            reflect.ValueOf((*elf.Prog)(nil)),
		"Prog32":          reflect.ValueOf((*elf.Prog32)(nil)),
		"Prog64":          reflect.ValueOf((*elf.Prog64)(nil)),
		"ProgFlag":        reflect.ValueOf((*elf.ProgFlag)(nil)),
		"ProgHeader":      reflect.ValueOf((*elf.ProgHeader)(nil)),
		"ProgType":        reflect.ValueOf((*elf.ProgType)(nil)),
		"R_386":           reflect.ValueOf((*elf.R_386)(nil)),
		"R_390":           reflect.ValueOf((*elf.R_390)(nil)),
		"R_AARCH64":       reflect.ValueOf((*elf.R_AARCH64)(nil)),
		"R_ALPHA":         reflect.ValueOf((*elf.R_ALPHA)(nil)),
		"R_ARM":           reflect.ValueOf((*elf.R_ARM)(nil)),
		"R_MIPS":          reflect.ValueOf((*elf.R_MIPS)(nil)),
		"R_PPC":           reflect.ValueOf((*elf.R_PPC)(nil)),
		"R_PPC64":         reflect.ValueOf((*elf.R_PPC64)(nil)),
		"R_RISCV":         reflect.ValueOf((*elf.R_RISCV)(nil)),
		"R_SPARC":         reflect.ValueOf((*elf.R_SPARC)(nil)),
		"R_X86_64":        reflect.ValueOf((*elf.R_X86_64)(nil)),
		"Rel32":           reflect.ValueOf((*elf.Rel32)(nil)),
		"Rel64":           reflect.ValueOf((*elf.Rel64)(nil)),
		"Rela32":          reflect.ValueOf((*elf.Rela32)(nil)),
		"Rela64":          reflect.ValueOf((*elf.Rela64)(nil)),
		"Section":         reflect.ValueOf((*elf.Section)(nil)),
		"Section32":       reflect.ValueOf((*elf.Section32)(nil)),
		"Section64":       reflect.ValueOf((*elf.Section64)(nil)),
		"SectionFlag":     reflect.ValueOf((*elf.SectionFlag)(nil)),
		"SectionHeader":   reflect.ValueOf((*elf.SectionHeader)(nil)),
		"SectionIndex":    reflect.ValueOf((*elf.SectionIndex)(nil)),
		"SectionType":     reflect.ValueOf((*elf.SectionType)(nil)),
		"Sym32":           reflect.ValueOf((*elf.Sym32)(nil)),
		"Sym64":           reflect.ValueOf((*elf.Sym64)(nil)),
		"SymBind":         reflect.ValueOf((*elf.SymBind)(nil)),
		"SymType":         reflect.ValueOf((*elf.SymType)(nil)),
		"SymVis":          reflect.ValueOf((*elf.SymVis)(nil)),
		"Symbol":          reflect.ValueOf((*elf.Symbol)(nil)),
		"Type":            reflect.ValueOf((*elf.Type)(nil)),
		"Version":         reflect.ValueOf((*elf.Version)(nil)),
	}
}

func init_debug_gosym() {
	Symbols["debug/gosym"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewLineTable": reflect.ValueOf(gosym.NewLineTable),
		"NewTable":     reflect.ValueOf(gosym.NewTable),

		// type definitions
		"DecodingError":    reflect.ValueOf((*gosym.DecodingError)(nil)),
		"Func":             reflect.ValueOf((*gosym.Func)(nil)),
		"LineTable":        reflect.ValueOf((*gosym.LineTable)(nil)),
		"Obj":              reflect.ValueOf((*gosym.Obj)(nil)),
		"Sym":              reflect.ValueOf((*gosym.Sym)(nil)),
		"Table":            reflect.ValueOf((*gosym.Table)(nil)),
		"UnknownFileError": reflect.ValueOf((*gosym.UnknownFileError)(nil)),
		"UnknownLineError": reflect.ValueOf((*gosym.UnknownLineError)(nil)),
	}
}

func init_debug_macho() {
	Symbols["debug/macho"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ARM64_RELOC_ADDEND":              reflect.ValueOf(macho.ARM64_RELOC_ADDEND),
		"ARM64_RELOC_BRANCH26":            reflect.ValueOf(macho.ARM64_RELOC_BRANCH26),
		"ARM64_RELOC_GOT_LOAD_PAGE21":     reflect.ValueOf(macho.ARM64_RELOC_GOT_LOAD_PAGE21),
		"ARM64_RELOC_GOT_LOAD_PAGEOFF12":  reflect.ValueOf(macho.ARM64_RELOC_GOT_LOAD_PAGEOFF12),
		"ARM64_RELOC_PAGE21":              reflect.ValueOf(macho.ARM64_RELOC_PAGE21),
		"ARM64_RELOC_PAGEOFF12":           reflect.ValueOf(macho.ARM64_RELOC_PAGEOFF12),
		"ARM64_RELOC_POINTER_TO_GOT":      reflect.ValueOf(macho.ARM64_RELOC_POINTER_TO_GOT),
		"ARM64_RELOC_SUBTRACTOR":          reflect.ValueOf(macho.ARM64_RELOC_SUBTRACTOR),
		"ARM64_RELOC_TLVP_LOAD_PAGE21":    reflect.ValueOf(macho.ARM64_RELOC_TLVP_LOAD_PAGE21),
		"ARM64_RELOC_TLVP_LOAD_PAGEOFF12": reflect.ValueOf(macho.ARM64_RELOC_TLVP_LOAD_PAGEOFF12),
		"ARM64_RELOC_UNSIGNED":            reflect.ValueOf(macho.ARM64_RELOC_UNSIGNED),
		"ARM_RELOC_BR24":                  reflect.ValueOf(macho.ARM_RELOC_BR24),
		"ARM_RELOC_HALF":                  reflect.ValueOf(macho.ARM_RELOC_HALF),
		"ARM_RELOC_HALF_SECTDIFF":         reflect.ValueOf(macho.ARM_RELOC_HALF_SECTDIFF),
		"ARM_RELOC_LOCAL_SECTDIFF":        reflect.ValueOf(macho.ARM_RELOC_LOCAL_SECTDIFF),
		"ARM_RELOC_PAIR":                  reflect.ValueOf(macho.ARM_RELOC_PAIR),
		"ARM_RELOC_PB_LA_PTR":             reflect.ValueOf(macho.ARM_RELOC_PB_LA_PTR),
		"ARM_RELOC_SECTDIFF":              reflect.ValueOf(macho.ARM_RELOC_SECTDIFF),
		"ARM_RELOC_VANILLA":               reflect.ValueOf(macho.ARM_RELOC_VANILLA),
		"ARM_THUMB_32BIT_BRANCH":          reflect.ValueOf(macho.ARM_THUMB_32BIT_BRANCH),
		"ARM_THUMB_RELOC_BR22":            reflect.ValueOf(macho.ARM_THUMB_RELOC_BR22),
		"Cpu386":                          reflect.ValueOf(macho.Cpu386),
		"CpuAmd64":                        reflect.ValueOf(macho.CpuAmd64),
		"CpuArm":                          reflect.ValueOf(macho.CpuArm),
		"CpuArm64":                        reflect.ValueOf(macho.CpuArm64),
		"CpuPpc":                          reflect.ValueOf(macho.CpuPpc),
		"CpuPpc64":                        reflect.ValueOf(macho.CpuPpc64),
		"ErrNotFat":                       reflect.ValueOf(&macho.ErrNotFat).Elem(),
		"FlagAllModsBound":                reflect.ValueOf(macho.FlagAllModsBound),
		"FlagAllowStackExecution":         reflect.ValueOf(macho.FlagAllowStackExecution),
		"FlagAppExtensionSafe":            reflect.ValueOf(macho.FlagAppExtensionSafe),
		"FlagBindAtLoad":                  reflect.ValueOf(macho.FlagBindAtLoad),
		"FlagBindsToWeak":                 reflect.ValueOf(macho.FlagBindsToWeak),
		"FlagCanonical":                   reflect.ValueOf(macho.FlagCanonical),
		"FlagDeadStrippableDylib":         reflect.ValueOf(macho.FlagDeadStrippableDylib),
		"FlagDyldLink":                    reflect.ValueOf(macho.FlagDyldLink),
		"FlagForceFlat":                   reflect.ValueOf(macho.FlagForceFlat),
		"FlagHasTLVDescriptors":           reflect.ValueOf(macho.FlagHasTLVDescriptors),
		"FlagIncrLink":                    reflect.ValueOf(macho.FlagIncrLink),
		"FlagLazyInit":                    reflect.ValueOf(macho.FlagLazyInit),
		"FlagNoFixPrebinding":             reflect.ValueOf(macho.FlagNoFixPrebinding),
		"FlagNoHeapExecution":             reflect.ValueOf(macho.FlagNoHeapExecution),
		"FlagNoMultiDefs":                 reflect.ValueOf(macho.FlagNoMultiDefs),
		"FlagNoReexportedDylibs":          reflect.ValueOf(macho.FlagNoReexportedDylibs),
		"FlagNoUndefs":                    reflect.ValueOf(macho.FlagNoUndefs),
		"FlagPIE":                         reflect.ValueOf(macho.FlagPIE),
		"FlagPrebindable":                 reflect.ValueOf(macho.FlagPrebindable),
		"FlagPrebound":                    reflect.ValueOf(macho.FlagPrebound),
		"FlagRootSafe":                    reflect.ValueOf(macho.FlagRootSafe),
		"FlagSetuidSafe":                  reflect.ValueOf(macho.FlagSetuidSafe),
		"FlagSplitSegs":                   reflect.ValueOf(macho.FlagSplitSegs),
		"FlagSubsectionsViaSymbols":       reflect.ValueOf(macho.FlagSubsectionsViaSymbols),
		"FlagTwoLevel":                    reflect.ValueOf(macho.FlagTwoLevel),
		"FlagWeakDefines":                 reflect.ValueOf(macho.FlagWeakDefines),
		"GENERIC_RELOC_LOCAL_SECTDIFF":    reflect.ValueOf(macho.GENERIC_RELOC_LOCAL_SECTDIFF),
		"GENERIC_RELOC_PAIR":              reflect.ValueOf(macho.GENERIC_RELOC_PAIR),
		"GENERIC_RELOC_PB_LA_PTR":         reflect.ValueOf(macho.GENERIC_RELOC_PB_LA_PTR),
		"GENERIC_RELOC_SECTDIFF":          reflect.ValueOf(macho.GENERIC_RELOC_SECTDIFF),
		"GENERIC_RELOC_TLV":               reflect.ValueOf(macho.GENERIC_RELOC_TLV),
		"GENERIC_RELOC_VANILLA":           reflect.ValueOf(macho.GENERIC_RELOC_VANILLA),
		"LoadCmdDylib":                    reflect.ValueOf(macho.LoadCmdDylib),
		"LoadCmdDylinker":                 reflect.ValueOf(macho.LoadCmdDylinker),
		"LoadCmdDysymtab":                 reflect.ValueOf(macho.LoadCmdDysymtab),
		"LoadCmdRpath":                    reflect.ValueOf(macho.LoadCmdRpath),
		"LoadCmdSegment":                  reflect.ValueOf(macho.LoadCmdSegment),
		"LoadCmdSegment64":                reflect.ValueOf(macho.LoadCmdSegment64),
		"LoadCmdSymtab":                   reflect.ValueOf(macho.LoadCmdSymtab),
		"LoadCmdThread":                   reflect.ValueOf(macho.LoadCmdThread),
		"LoadCmdUnixThread":               reflect.ValueOf(macho.LoadCmdUnixThread),
		"Magic32":                         reflect.ValueOf(macho.Magic32),
		"Magic64":                         reflect.ValueOf(macho.Magic64),
		"MagicFat":                        reflect.ValueOf(macho.MagicFat),
		"NewFatFile":                      reflect.ValueOf(macho.NewFatFile),
		"NewFile":                         reflect.ValueOf(macho.NewFile),
		"Open":                            reflect.ValueOf(macho.Open),
		"OpenFat":                         reflect.ValueOf(macho.OpenFat),
		"TypeBundle":                      reflect.ValueOf(macho.TypeBundle),
		"TypeDylib":                       reflect.ValueOf(macho.TypeDylib),
		"TypeExec":                        reflect.ValueOf(macho.TypeExec),
		"TypeObj":                         reflect.ValueOf(macho.TypeObj),
		"X86_64_RELOC_BRANCH":             reflect.ValueOf(macho.X86_64_RELOC_BRANCH),
		"X86_64_RELOC_GOT":                reflect.ValueOf(macho.X86_64_RELOC_GOT),
		"X86_64_RELOC_GOT_LOAD":           reflect.ValueOf(macho.X86_64_RELOC_GOT_LOAD),
		"X86_64_RELOC_SIGNED":             reflect.ValueOf(macho.X86_64_RELOC_SIGNED),
		"X86_64_RELOC_SIGNED_1":           reflect.ValueOf(macho.X86_64_RELOC_SIGNED_1),
		"X86_64_RELOC_SIGNED_2":           reflect.ValueOf(macho.X86_64_RELOC_SIGNED_2),
		"X86_64_RELOC_SIGNED_4":           reflect.ValueOf(macho.X86_64_RELOC_SIGNED_4),
		"X86_64_RELOC_SUBTRACTOR":         reflect.ValueOf(macho.X86_64_RELOC_SUBTRACTOR),
		"X86_64_RELOC_TLV":                reflect.ValueOf(macho.X86_64_RELOC_TLV),
		"X86_64_RELOC_UNSIGNED":           reflect.ValueOf(macho.X86_64_RELOC_UNSIGNED),

		// type definitions
		"Cpu":              reflect.ValueOf((*macho.Cpu)(nil)),
		"Dylib":            reflect.ValueOf((*macho.Dylib)(nil)),
		"DylibCmd":         reflect.ValueOf((*macho.DylibCmd)(nil)),
		"Dysymtab":         reflect.ValueOf((*macho.Dysymtab)(nil)),
		"DysymtabCmd":      reflect.ValueOf((*macho.DysymtabCmd)(nil)),
		"FatArch":          reflect.ValueOf((*macho.FatArch)(nil)),
		"FatArchHeader":    reflect.ValueOf((*macho.FatArchHeader)(nil)),
		"FatFile":          reflect.ValueOf((*macho.FatFile)(nil)),
		"File":             reflect.ValueOf((*macho.File)(nil)),
		"FileHeader":       reflect.ValueOf((*macho.FileHeader)(nil)),
		"FormatError":      reflect.ValueOf((*macho.FormatError)(nil)),
		"Load":             reflect.ValueOf((*macho.Load)(nil)),
		"LoadBytes":        reflect.ValueOf((*macho.LoadBytes)(nil)),
		"LoadCmd":          reflect.ValueOf((*macho.LoadCmd)(nil)),
		"Nlist32":          reflect.ValueOf((*macho.Nlist32)(nil)),
		"Nlist64":          reflect.ValueOf((*macho.Nlist64)(nil)),
		"Regs386":          reflect.ValueOf((*macho.Regs386)(nil)),
		"RegsAMD64":        reflect.ValueOf((*macho.RegsAMD64)(nil)),
		"Reloc":            reflect.ValueOf((*macho.Reloc)(nil)),
		"RelocTypeARM":     reflect.ValueOf((*macho.RelocTypeARM)(nil)),
		"RelocTypeARM64":   reflect.ValueOf((*macho.RelocTypeARM64)(nil)),
		"RelocTypeGeneric": reflect.ValueOf((*macho.RelocTypeGeneric)(nil)),
		"RelocTypeX86_64":  reflect.ValueOf((*macho.RelocTypeX86_64)(nil)),
		"Rpath":            reflect.ValueOf((*macho.Rpath)(nil)),
		"RpathCmd":         reflect.ValueOf((*macho.RpathCmd)(nil)),
		"Section":          reflect.ValueOf((*macho.Section)(nil)),
		"Section32":        reflect.ValueOf((*macho.Section32)(nil)),
		"Section64":        reflect.ValueOf((*macho.Section64)(nil)),
		"SectionHeader":    reflect.ValueOf((*macho.SectionHeader)(nil)),
		"Segment":          reflect.ValueOf((*macho.Segment)(nil)),
		"Segment32":        reflect.ValueOf((*macho.Segment32)(nil)),
		"Segment64":        reflect.ValueOf((*macho.Segment64)(nil)),
		"SegmentHeader":    reflect.ValueOf((*macho.SegmentHeader)(nil)),
		"Symbol":           reflect.ValueOf((*macho.Symbol)(nil)),
		"Symtab":           reflect.ValueOf((*macho.Symtab)(nil)),
		"SymtabCmd":        reflect.ValueOf((*macho.SymtabCmd)(nil)),
		"Thread":           reflect.ValueOf((*macho.Thread)(nil)),
		"Type":             reflect.ValueOf((*macho.Type)(nil)),

		// interface wrapper definitions
		"_Load": reflect.ValueOf((*_debug_macho_Load)(nil)),
	}
}

// _debug_macho_Load is an interface wrapper for Load type
type _debug_macho_Load struct {
	WRaw func() []byte
}

func (W _debug_macho_Load) Raw() []byte { return W.WRaw() }

func init_debug_pe() {
	Symbols["debug/pe"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"COFFSymbolSize":                       reflect.ValueOf(constant.MakeFromLiteral("18", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_ARCHITECTURE":   reflect.ValueOf(constant.MakeFromLiteral("7", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_BASERELOC":      reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT":   reflect.ValueOf(constant.MakeFromLiteral("11", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR": reflect.ValueOf(constant.MakeFromLiteral("14", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_DEBUG":          reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT":   reflect.ValueOf(constant.MakeFromLiteral("13", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_EXCEPTION":      reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_EXPORT":         reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_GLOBALPTR":      reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_IAT":            reflect.ValueOf(constant.MakeFromLiteral("12", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_IMPORT":         reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG":    reflect.ValueOf(constant.MakeFromLiteral("10", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_RESOURCE":       reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_SECURITY":       reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"IMAGE_DIRECTORY_ENTRY_TLS":            reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"IMAGE_FILE_MACHINE_AM33":              reflect.ValueOf(constant.MakeFromLiteral("467", token.INT, 0)),
		"IMAGE_FILE_MACHINE_AMD64":             reflect.ValueOf(constant.MakeFromLiteral("34404", token.INT, 0)),
		"IMAGE_FILE_MACHINE_ARM":               reflect.ValueOf(constant.MakeFromLiteral("448", token.INT, 0)),
		"IMAGE_FILE_MACHINE_ARM64":             reflect.ValueOf(constant.MakeFromLiteral("43620", token.INT, 0)),
		"IMAGE_FILE_MACHINE_ARMNT":             reflect.ValueOf(constant.MakeFromLiteral("452", token.INT, 0)),
		"IMAGE_FILE_MACHINE_EBC":               reflect.ValueOf(constant.MakeFromLiteral("3772", token.INT, 0)),
		"IMAGE_FILE_MACHINE_I386":              reflect.ValueOf(constant.MakeFromLiteral("332", token.INT, 0)),
		"IMAGE_FILE_MACHINE_IA64":              reflect.ValueOf(constant.MakeFromLiteral("512", token.INT, 0)),
		"IMAGE_FILE_MACHINE_M32R":              reflect.ValueOf(constant.MakeFromLiteral("36929", token.INT, 0)),
		"IMAGE_FILE_MACHINE_MIPS16":            reflect.ValueOf(constant.MakeFromLiteral("614", token.INT, 0)),
		"IMAGE_FILE_MACHINE_MIPSFPU":           reflect.ValueOf(constant.MakeFromLiteral("870", token.INT, 0)),
		"IMAGE_FILE_MACHINE_MIPSFPU16":         reflect.ValueOf(constant.MakeFromLiteral("1126", token.INT, 0)),
		"IMAGE_FILE_MACHINE_POWERPC":           reflect.ValueOf(constant.MakeFromLiteral("496", token.INT, 0)),
		"IMAGE_FILE_MACHINE_POWERPCFP":         reflect.ValueOf(constant.MakeFromLiteral("497", token.INT, 0)),
		"IMAGE_FILE_MACHINE_R4000":             reflect.ValueOf(constant.MakeFromLiteral("358", token.INT, 0)),
		"IMAGE_FILE_MACHINE_SH3":               reflect.ValueOf(constant.MakeFromLiteral("418", token.INT, 0)),
		"IMAGE_FILE_MACHINE_SH3DSP":            reflect.ValueOf(constant.MakeFromLiteral("419", token.INT, 0)),
		"IMAGE_FILE_MACHINE_SH4":               reflect.ValueOf(constant.MakeFromLiteral("422", token.INT, 0)),
		"IMAGE_FILE_MACHINE_SH5":               reflect.ValueOf(constant.MakeFromLiteral("424", token.INT, 0)),
		"IMAGE_FILE_MACHINE_THUMB":             reflect.ValueOf(constant.MakeFromLiteral("450", token.INT, 0)),
		"IMAGE_FILE_MACHINE_UNKNOWN":           reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"IMAGE_FILE_MACHINE_WCEMIPSV2":         reflect.ValueOf(constant.MakeFromLiteral("361", token.INT, 0)),
		"NewFile":                              reflect.ValueOf(pe.NewFile),
		"Open":                                 reflect.ValueOf(pe.Open),

		// type definitions
		"COFFSymbol":       reflect.ValueOf((*pe.COFFSymbol)(nil)),
		"DataDirectory":    reflect.ValueOf((*pe.DataDirectory)(nil)),
		"File":             reflect.ValueOf((*pe.File)(nil)),
		"FileHeader":       reflect.ValueOf((*pe.FileHeader)(nil)),
		"FormatError":      reflect.ValueOf((*pe.FormatError)(nil)),
		"ImportDirectory":  reflect.ValueOf((*pe.ImportDirectory)(nil)),
		"OptionalHeader32": reflect.ValueOf((*pe.OptionalHeader32)(nil)),
		"OptionalHeader64": reflect.ValueOf((*pe.OptionalHeader64)(nil)),
		"Reloc":            reflect.ValueOf((*pe.Reloc)(nil)),
		"Section":          reflect.ValueOf((*pe.Section)(nil)),
		"SectionHeader":    reflect.ValueOf((*pe.SectionHeader)(nil)),
		"SectionHeader32":  reflect.ValueOf((*pe.SectionHeader32)(nil)),
		"StringTable":      reflect.ValueOf((*pe.StringTable)(nil)),
		"Symbol":           reflect.ValueOf((*pe.Symbol)(nil)),
	}
}

func init_debug_plan9obj() {
	Symbols["debug/plan9obj"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Magic386":   reflect.ValueOf(constant.MakeFromLiteral("491", token.INT, 0)),
		"Magic64":    reflect.ValueOf(constant.MakeFromLiteral("32768", token.INT, 0)),
		"MagicAMD64": reflect.ValueOf(constant.MakeFromLiteral("35479", token.INT, 0)),
		"MagicARM":   reflect.ValueOf(constant.MakeFromLiteral("1607", token.INT, 0)),
		"NewFile":    reflect.ValueOf(plan9obj.NewFile),
		"Open":       reflect.ValueOf(plan9obj.Open),

		// type definitions
		"File":          reflect.ValueOf((*plan9obj.File)(nil)),
		"FileHeader":    reflect.ValueOf((*plan9obj.FileHeader)(nil)),
		"Section":       reflect.ValueOf((*plan9obj.Section)(nil)),
		"SectionHeader": reflect.ValueOf((*plan9obj.SectionHeader)(nil)),
		"Sym":           reflect.ValueOf((*plan9obj.Sym)(nil)),
	}
}

func init_encoding() {
	Symbols["encoding"] = map[string]reflect.Value{
		// type definitions
		"BinaryMarshaler":   reflect.ValueOf((*encoding.BinaryMarshaler)(nil)),
		"BinaryUnmarshaler": reflect.ValueOf((*encoding.BinaryUnmarshaler)(nil)),
		"TextMarshaler":     reflect.ValueOf((*encoding.TextMarshaler)(nil)),
		"TextUnmarshaler":   reflect.ValueOf((*encoding.TextUnmarshaler)(nil)),

		// interface wrapper definitions
		"_BinaryMarshaler":   reflect.ValueOf((*_encoding_BinaryMarshaler)(nil)),
		"_BinaryUnmarshaler": reflect.ValueOf((*_encoding_BinaryUnmarshaler)(nil)),
		"_TextMarshaler":     reflect.ValueOf((*_encoding_TextMarshaler)(nil)),
		"_TextUnmarshaler":   reflect.ValueOf((*_encoding_TextUnmarshaler)(nil)),
	}
}

// _encoding_BinaryMarshaler is an interface wrapper for BinaryMarshaler type
type _encoding_BinaryMarshaler struct {
	WMarshalBinary func() (data []byte, err error)
}

func (W _encoding_BinaryMarshaler) MarshalBinary() (data []byte, err error) {
	return W.WMarshalBinary()
}

// _encoding_BinaryUnmarshaler is an interface wrapper for BinaryUnmarshaler type
type _encoding_BinaryUnmarshaler struct {
	WUnmarshalBinary func(data []byte) error
}

func (W _encoding_BinaryUnmarshaler) UnmarshalBinary(data []byte) error {
	return W.WUnmarshalBinary(data)
}

// _encoding_TextMarshaler is an interface wrapper for TextMarshaler type
type _encoding_TextMarshaler struct {
	WMarshalText func() (text []byte, err error)
}

func (W _encoding_TextMarshaler) MarshalText() (text []byte, err error) { return W.WMarshalText() }

// _encoding_TextUnmarshaler is an interface wrapper for TextUnmarshaler type
type _encoding_TextUnmarshaler struct {
	WUnmarshalText func(text []byte) error
}

func (W _encoding_TextUnmarshaler) UnmarshalText(text []byte) error { return W.WUnmarshalText(text) }

func init_encoding_ascii85() {
	Symbols["encoding/ascii85"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Decode":        reflect.ValueOf(ascii85.Decode),
		"Encode":        reflect.ValueOf(ascii85.Encode),
		"MaxEncodedLen": reflect.ValueOf(ascii85.MaxEncodedLen),
		"NewDecoder":    reflect.ValueOf(ascii85.NewDecoder),
		"NewEncoder":    reflect.ValueOf(ascii85.NewEncoder),

		// type definitions
		"CorruptInputError": reflect.ValueOf((*ascii85.CorruptInputError)(nil)),
	}
}

func init_encoding_asn1() {
	Symbols["encoding/asn1"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ClassApplication":     reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"ClassContextSpecific": reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"ClassPrivate":         reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"ClassUniversal":       reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"Marshal":              reflect.ValueOf(asn1.Marshal),
		"MarshalWithParams":    reflect.ValueOf(asn1.MarshalWithParams),
		"NullBytes":            reflect.ValueOf(&asn1.NullBytes).Elem(),
		"NullRawValue":         reflect.ValueOf(&asn1.NullRawValue).Elem(),
		"TagBitString":         reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"TagBoolean":           reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"TagEnum":              reflect.ValueOf(constant.MakeFromLiteral("10", token.INT, 0)),
		"TagGeneralString":     reflect.ValueOf(constant.MakeFromLiteral("27", token.INT, 0)),
		"TagGeneralizedTime":   reflect.ValueOf(constant.MakeFromLiteral("24", token.INT, 0)),
		"TagIA5String":         reflect.ValueOf(constant.MakeFromLiteral("22", token.INT, 0)),
		"TagInteger":           reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"TagNull":              reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"TagNumericString":     reflect.ValueOf(constant.MakeFromLiteral("18", token.INT, 0)),
		"TagOID":               reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"TagOctetString":       reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"TagPrintableString":   reflect.ValueOf(constant.MakeFromLiteral("19", token.INT, 0)),
		"TagSequence":          reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"TagSet":               reflect.ValueOf(constant.MakeFromLiteral("17", token.INT, 0)),
		"TagT61String":         reflect.ValueOf(constant.MakeFromLiteral("20", token.INT, 0)),
		"TagUTCTime":           reflect.ValueOf(constant.MakeFromLiteral("23", token.INT, 0)),
		"TagUTF8String":        reflect.ValueOf(constant.MakeFromLiteral("12", token.INT, 0)),
		"Unmarshal":            reflect.ValueOf(asn1.Unmarshal),
		"UnmarshalWithParams":  reflect.ValueOf(asn1.UnmarshalWithParams),

		// type definitions
		"BitString":        reflect.ValueOf((*asn1.BitString)(nil)),
		"Enumerated":       reflect.ValueOf((*asn1.Enumerated)(nil)),
		"Flag":             reflect.ValueOf((*asn1.Flag)(nil)),
		"ObjectIdentifier": reflect.ValueOf((*asn1.ObjectIdentifier)(nil)),
		"RawContent":       reflect.ValueOf((*asn1.RawContent)(nil)),
		"RawValue":         reflect.ValueOf((*asn1.RawValue)(nil)),
		"StructuralError":  reflect.ValueOf((*asn1.StructuralError)(nil)),
		"SyntaxError":      reflect.ValueOf((*asn1.SyntaxError)(nil)),
	}
}

func init_encoding_base32() {
	Symbols["encoding/base32"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"HexEncoding": reflect.ValueOf(&base32.HexEncoding).Elem(),
		"NewDecoder":  reflect.ValueOf(base32.NewDecoder),
		"NewEncoder":  reflect.ValueOf(base32.NewEncoder),
		"NewEncoding": reflect.ValueOf(base32.NewEncoding),
		"NoPadding":   reflect.ValueOf(base32.NoPadding),
		"StdEncoding": reflect.ValueOf(&base32.StdEncoding).Elem(),
		"StdPadding":  reflect.ValueOf(base32.StdPadding),

		// type definitions
		"CorruptInputError": reflect.ValueOf((*base32.CorruptInputError)(nil)),
		"Encoding":          reflect.ValueOf((*base32.Encoding)(nil)),
	}
}

func init_encoding_base64() {
	Symbols["encoding/base64"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewDecoder":     reflect.ValueOf(base64.NewDecoder),
		"NewEncoder":     reflect.ValueOf(base64.NewEncoder),
		"NewEncoding":    reflect.ValueOf(base64.NewEncoding),
		"NoPadding":      reflect.ValueOf(base64.NoPadding),
		"RawStdEncoding": reflect.ValueOf(&base64.RawStdEncoding).Elem(),
		"RawURLEncoding": reflect.ValueOf(&base64.RawURLEncoding).Elem(),
		"StdEncoding":    reflect.ValueOf(&base64.StdEncoding).Elem(),
		"StdPadding":     reflect.ValueOf(base64.StdPadding),
		"URLEncoding":    reflect.ValueOf(&base64.URLEncoding).Elem(),

		// type definitions
		"CorruptInputError": reflect.ValueOf((*base64.CorruptInputError)(nil)),
		"Encoding":          reflect.ValueOf((*base64.Encoding)(nil)),
	}
}

func init_encoding_binary() {
	Symbols["encoding/binary"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BigEndian":      reflect.ValueOf(&binary.BigEndian).Elem(),
		"LittleEndian":   reflect.ValueOf(&binary.LittleEndian).Elem(),
		"MaxVarintLen16": reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"MaxVarintLen32": reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"MaxVarintLen64": reflect.ValueOf(constant.MakeFromLiteral("10", token.INT, 0)),
		"PutUvarint":     reflect.ValueOf(binary.PutUvarint),
		"PutVarint":      reflect.ValueOf(binary.PutVarint),
		"Read":           reflect.ValueOf(binary.Read),
		"ReadUvarint":    reflect.ValueOf(binary.ReadUvarint),
		"ReadVarint":     reflect.ValueOf(binary.ReadVarint),
		"Size":           reflect.ValueOf(binary.Size),
		"Uvarint":        reflect.ValueOf(binary.Uvarint),
		"Varint":         reflect.ValueOf(binary.Varint),
		"Write":          reflect.ValueOf(binary.Write),

		// type definitions
		"ByteOrder": reflect.ValueOf((*binary.ByteOrder)(nil)),

		// interface wrapper definitions
		"_ByteOrder": reflect.ValueOf((*_encoding_binary_ByteOrder)(nil)),
	}
}

// _encoding_binary_ByteOrder is an interface wrapper for ByteOrder type
type _encoding_binary_ByteOrder struct {
	WPutUint16 func(a0 []byte, a1 uint16)
	WPutUint32 func(a0 []byte, a1 uint32)
	WPutUint64 func(a0 []byte, a1 uint64)
	WString    func() string
	WUint16    func(a0 []byte) uint16
	WUint32    func(a0 []byte) uint32
	WUint64    func(a0 []byte) uint64
}

func (W _encoding_binary_ByteOrder) PutUint16(a0 []byte, a1 uint16) { W.WPutUint16(a0, a1) }
func (W _encoding_binary_ByteOrder) PutUint32(a0 []byte, a1 uint32) { W.WPutUint32(a0, a1) }
func (W _encoding_binary_ByteOrder) PutUint64(a0 []byte, a1 uint64) { W.WPutUint64(a0, a1) }
func (W _encoding_binary_ByteOrder) String() string                 { return W.WString() }
func (W _encoding_binary_ByteOrder) Uint16(a0 []byte) uint16        { return W.WUint16(a0) }
func (W _encoding_binary_ByteOrder) Uint32(a0 []byte) uint32        { return W.WUint32(a0) }
func (W _encoding_binary_ByteOrder) Uint64(a0 []byte) uint64        { return W.WUint64(a0) }

func init_encoding_csv() {
	Symbols["encoding/csv"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrBareQuote":     reflect.ValueOf(&csv.ErrBareQuote).Elem(),
		"ErrFieldCount":    reflect.ValueOf(&csv.ErrFieldCount).Elem(),
		"ErrQuote":         reflect.ValueOf(&csv.ErrQuote).Elem(),
		"ErrTrailingComma": reflect.ValueOf(&csv.ErrTrailingComma).Elem(),
		"NewReader":        reflect.ValueOf(csv.NewReader),
		"NewWriter":        reflect.ValueOf(csv.NewWriter),

		// type definitions
		"ParseError": reflect.ValueOf((*csv.ParseError)(nil)),
		"Reader":     reflect.ValueOf((*csv.Reader)(nil)),
		"Writer":     reflect.ValueOf((*csv.Writer)(nil)),
	}
}

func init_encoding_gob() {
	Symbols["encoding/gob"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"NewDecoder":   reflect.ValueOf(gob.NewDecoder),
		"NewEncoder":   reflect.ValueOf(gob.NewEncoder),
		"Register":     reflect.ValueOf(gob.Register),
		"RegisterName": reflect.ValueOf(gob.RegisterName),

		// type definitions
		"CommonType": reflect.ValueOf((*gob.CommonType)(nil)),
		"Decoder":    reflect.ValueOf((*gob.Decoder)(nil)),
		"Encoder":    reflect.ValueOf((*gob.Encoder)(nil)),
		"GobDecoder": reflect.ValueOf((*gob.GobDecoder)(nil)),
		"GobEncoder": reflect.ValueOf((*gob.GobEncoder)(nil)),

		// interface wrapper definitions
		"_GobDecoder": reflect.ValueOf((*_encoding_gob_GobDecoder)(nil)),
		"_GobEncoder": reflect.ValueOf((*_encoding_gob_GobEncoder)(nil)),
	}
}

// _encoding_gob_GobDecoder is an interface wrapper for GobDecoder type
type _encoding_gob_GobDecoder struct {
	WGobDecode func(a0 []byte) error
}

func (W _encoding_gob_GobDecoder) GobDecode(a0 []byte) error { return W.WGobDecode(a0) }

// _encoding_gob_GobEncoder is an interface wrapper for GobEncoder type
type _encoding_gob_GobEncoder struct {
	WGobEncode func() ([]byte, error)
}

func (W _encoding_gob_GobEncoder) GobEncode() ([]byte, error) { return W.WGobEncode() }

func init_encoding_hex() {
	Symbols["encoding/hex"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Decode":         reflect.ValueOf(hex.Decode),
		"DecodeString":   reflect.ValueOf(hex.DecodeString),
		"DecodedLen":     reflect.ValueOf(hex.DecodedLen),
		"Dump":           reflect.ValueOf(hex.Dump),
		"Dumper":         reflect.ValueOf(hex.Dumper),
		"Encode":         reflect.ValueOf(hex.Encode),
		"EncodeToString": reflect.ValueOf(hex.EncodeToString),
		"EncodedLen":     reflect.ValueOf(hex.EncodedLen),
		"ErrLength":      reflect.ValueOf(&hex.ErrLength).Elem(),
		"NewDecoder":     reflect.ValueOf(hex.NewDecoder),
		"NewEncoder":     reflect.ValueOf(hex.NewEncoder),

		// type definitions
		"InvalidByteError": reflect.ValueOf((*hex.InvalidByteError)(nil)),
	}
}

func init_encoding_json() {
	Symbols["encoding/json"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Compact":       reflect.ValueOf(json.Compact),
		"HTMLEscape":    reflect.ValueOf(json.HTMLEscape),
		"Indent":        reflect.ValueOf(json.Indent),
		"Marshal":       reflect.ValueOf(json.Marshal),
		"MarshalIndent": reflect.ValueOf(json.MarshalIndent),
		"NewDecoder":    reflect.ValueOf(json.NewDecoder),
		"NewEncoder":    reflect.ValueOf(json.NewEncoder),
		"Unmarshal":     reflect.ValueOf(json.Unmarshal),
		"Valid":         reflect.ValueOf(json.Valid),

		// type definitions
		"Decoder":               reflect.ValueOf((*json.Decoder)(nil)),
		"Delim":                 reflect.ValueOf((*json.Delim)(nil)),
		"Encoder":               reflect.ValueOf((*json.Encoder)(nil)),
		"InvalidUTF8Error":      reflect.ValueOf((*json.InvalidUTF8Error)(nil)),
		"InvalidUnmarshalError": reflect.ValueOf((*json.InvalidUnmarshalError)(nil)),
		"Marshaler":             reflect.ValueOf((*json.Marshaler)(nil)),
		"MarshalerError":        reflect.ValueOf((*json.MarshalerError)(nil)),
		"Number":                reflect.ValueOf((*json.Number)(nil)),
		"RawMessage":            reflect.ValueOf((*json.RawMessage)(nil)),
		"SyntaxError":           reflect.ValueOf((*json.SyntaxError)(nil)),
		"Token":                 reflect.ValueOf((*json.Token)(nil)),
		"UnmarshalFieldError":   reflect.ValueOf((*json.UnmarshalFieldError)(nil)),
		"UnmarshalTypeError":    reflect.ValueOf((*json.UnmarshalTypeError)(nil)),
		"Unmarshaler":           reflect.ValueOf((*json.Unmarshaler)(nil)),
		"UnsupportedTypeError":  reflect.ValueOf((*json.UnsupportedTypeError)(nil)),
		"UnsupportedValueError": reflect.ValueOf((*json.UnsupportedValueError)(nil)),

		// interface wrapper definitions
		"_Marshaler":   reflect.ValueOf((*_encoding_json_Marshaler)(nil)),
		"_Token":       reflect.ValueOf((*_encoding_json_Token)(nil)),
		"_Unmarshaler": reflect.ValueOf((*_encoding_json_Unmarshaler)(nil)),
	}
}

// _encoding_json_Marshaler is an interface wrapper for Marshaler type
type _encoding_json_Marshaler struct {
	WMarshalJSON func() ([]byte, error)
}

func (W _encoding_json_Marshaler) MarshalJSON() ([]byte, error) { return W.WMarshalJSON() }

// _encoding_json_Token is an interface wrapper for Token type
type _encoding_json_Token struct {
}

// _encoding_json_Unmarshaler is an interface wrapper for Unmarshaler type
type _encoding_json_Unmarshaler struct {
	WUnmarshalJSON func(a0 []byte) error
}

func (W _encoding_json_Unmarshaler) UnmarshalJSON(a0 []byte) error { return W.WUnmarshalJSON(a0) }

func init_encoding_pem() {
	Symbols["encoding/pem"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Decode":         reflect.ValueOf(pem.Decode),
		"Encode":         reflect.ValueOf(pem.Encode),
		"EncodeToMemory": reflect.ValueOf(pem.EncodeToMemory),

		// type definitions
		"Block": reflect.ValueOf((*pem.Block)(nil)),
	}
}

func init_encoding_xml() {
	Symbols["encoding/xml"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CopyToken":       reflect.ValueOf(xml.CopyToken),
		"Escape":          reflect.ValueOf(xml.Escape),
		"EscapeText":      reflect.ValueOf(xml.EscapeText),
		"HTMLAutoClose":   reflect.ValueOf(&xml.HTMLAutoClose).Elem(),
		"HTMLEntity":      reflect.ValueOf(&xml.HTMLEntity).Elem(),
		"Header":          reflect.ValueOf(constant.MakeFromLiteral("\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"", token.STRING, 0)),
		"Marshal":         reflect.ValueOf(xml.Marshal),
		"MarshalIndent":   reflect.ValueOf(xml.MarshalIndent),
		"NewDecoder":      reflect.ValueOf(xml.NewDecoder),
		"NewEncoder":      reflect.ValueOf(xml.NewEncoder),
		"NewTokenDecoder": reflect.ValueOf(xml.NewTokenDecoder),
		"Unmarshal":       reflect.ValueOf(xml.Unmarshal),

		// type definitions
		"Attr":                 reflect.ValueOf((*xml.Attr)(nil)),
		"CharData":             reflect.ValueOf((*xml.CharData)(nil)),
		"Comment":              reflect.ValueOf((*xml.Comment)(nil)),
		"Decoder":              reflect.ValueOf((*xml.Decoder)(nil)),
		"Directive":            reflect.ValueOf((*xml.Directive)(nil)),
		"Encoder":              reflect.ValueOf((*xml.Encoder)(nil)),
		"EndElement":           reflect.ValueOf((*xml.EndElement)(nil)),
		"Marshaler":            reflect.ValueOf((*xml.Marshaler)(nil)),
		"MarshalerAttr":        reflect.ValueOf((*xml.MarshalerAttr)(nil)),
		"Name":                 reflect.ValueOf((*xml.Name)(nil)),
		"ProcInst":             reflect.ValueOf((*xml.ProcInst)(nil)),
		"StartElement":         reflect.ValueOf((*xml.StartElement)(nil)),
		"SyntaxError":          reflect.ValueOf((*xml.SyntaxError)(nil)),
		"TagPathError":         reflect.ValueOf((*xml.TagPathError)(nil)),
		"Token":                reflect.ValueOf((*xml.Token)(nil)),
		"TokenReader":          reflect.ValueOf((*xml.TokenReader)(nil)),
		"UnmarshalError":       reflect.ValueOf((*xml.UnmarshalError)(nil)),
		"Unmarshaler":          reflect.ValueOf((*xml.Unmarshaler)(nil)),
		"UnmarshalerAttr":      reflect.ValueOf((*xml.UnmarshalerAttr)(nil)),
		"UnsupportedTypeError": reflect.ValueOf((*xml.UnsupportedTypeError)(nil)),

		// interface wrapper definitions
		"_Marshaler":       reflect.ValueOf((*_encoding_xml_Marshaler)(nil)),
		"_MarshalerAttr":   reflect.ValueOf((*_encoding_xml_MarshalerAttr)(nil)),
		"_Token":           reflect.ValueOf((*_encoding_xml_Token)(nil)),
		"_TokenReader":     reflect.ValueOf((*_encoding_xml_TokenReader)(nil)),
		"_Unmarshaler":     reflect.ValueOf((*_encoding_xml_Unmarshaler)(nil)),
		"_UnmarshalerAttr": reflect.ValueOf((*_encoding_xml_UnmarshalerAttr)(nil)),
	}
}

// _encoding_xml_Marshaler is an interface wrapper for Marshaler type
type _encoding_xml_Marshaler struct {
	WMarshalXML func(e *xml.Encoder, start xml.StartElement) error
}

func (W _encoding_xml_Marshaler) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return W.WMarshalXML(e, start)
}

// _encoding_xml_MarshalerAttr is an interface wrapper for MarshalerAttr type
type _encoding_xml_MarshalerAttr struct {
	WMarshalXMLAttr func(name xml.Name) (xml.Attr, error)
}

func (W _encoding_xml_MarshalerAttr) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	return W.WMarshalXMLAttr(name)
}

// _encoding_xml_Token is an interface wrapper for Token type
type _encoding_xml_Token struct {
}

// _encoding_xml_TokenReader is an interface wrapper for TokenReader type
type _encoding_xml_TokenReader struct {
	WToken func() (xml.Token, error)
}

func (W _encoding_xml_TokenReader) Token() (xml.Token, error) { return W.WToken() }

// _encoding_xml_Unmarshaler is an interface wrapper for Unmarshaler type
type _encoding_xml_Unmarshaler struct {
	WUnmarshalXML func(d *xml.Decoder, start xml.StartElement) error
}

func (W _encoding_xml_Unmarshaler) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	return W.WUnmarshalXML(d, start)
}

// _encoding_xml_UnmarshalerAttr is an interface wrapper for UnmarshalerAttr type
type _encoding_xml_UnmarshalerAttr struct {
	WUnmarshalXMLAttr func(attr xml.Attr) error
}

func (W _encoding_xml_UnmarshalerAttr) UnmarshalXMLAttr(attr xml.Attr) error {
	return W.WUnmarshalXMLAttr(attr)
}

func init_errors() {
	Symbols["errors"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"As":     reflect.ValueOf(errors.As),
		"Is":     reflect.ValueOf(errors.Is),
		"New":    reflect.ValueOf(errors.New),
		"Unwrap": reflect.ValueOf(errors.Unwrap),
	}
}

func init_expvar() {
	Symbols["expvar"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Do":        reflect.ValueOf(expvar.Do),
		"Get":       reflect.ValueOf(expvar.Get),
		"Handler":   reflect.ValueOf(expvar.Handler),
		"NewFloat":  reflect.ValueOf(expvar.NewFloat),
		"NewInt":    reflect.ValueOf(expvar.NewInt),
		"NewMap":    reflect.ValueOf(expvar.NewMap),
		"NewString": reflect.ValueOf(expvar.NewString),
		"Publish":   reflect.ValueOf(expvar.Publish),

		// type definitions
		"Float":    reflect.ValueOf((*expvar.Float)(nil)),
		"Func":     reflect.ValueOf((*expvar.Func)(nil)),
		"Int":      reflect.ValueOf((*expvar.Int)(nil)),
		"KeyValue": reflect.ValueOf((*expvar.KeyValue)(nil)),
		"Map":      reflect.ValueOf((*expvar.Map)(nil)),
		"String":   reflect.ValueOf((*expvar.String)(nil)),
		"Var":      reflect.ValueOf((*expvar.Var)(nil)),

		// interface wrapper definitions
		"_Var": reflect.ValueOf((*_expvar_Var)(nil)),
	}
}

// _expvar_Var is an interface wrapper for Var type
type _expvar_Var struct {
	WString func() string
}

func (W _expvar_Var) String() string { return W.WString() }

func init_flag() {
	Symbols["flag"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Arg":             reflect.ValueOf(flag.Arg),
		"Args":            reflect.ValueOf(flag.Args),
		"Bool":            reflect.ValueOf(flag.Bool),
		"BoolVar":         reflect.ValueOf(flag.BoolVar),
		"CommandLine":     reflect.ValueOf(&flag.CommandLine).Elem(),
		"ContinueOnError": reflect.ValueOf(flag.ContinueOnError),
		"Duration":        reflect.ValueOf(flag.Duration),
		"DurationVar":     reflect.ValueOf(flag.DurationVar),
		"ErrHelp":         reflect.ValueOf(&flag.ErrHelp).Elem(),
		"ExitOnError":     reflect.ValueOf(flag.ExitOnError),
		"Float64":         reflect.ValueOf(flag.Float64),
		"Float64Var":      reflect.ValueOf(flag.Float64Var),
		"Int":             reflect.ValueOf(flag.Int),
		"Int64":           reflect.ValueOf(flag.Int64),
		"Int64Var":        reflect.ValueOf(flag.Int64Var),
		"IntVar":          reflect.ValueOf(flag.IntVar),
		"Lookup":          reflect.ValueOf(flag.Lookup),
		"NArg":            reflect.ValueOf(flag.NArg),
		"NFlag":           reflect.ValueOf(flag.NFlag),
		"NewFlagSet":      reflect.ValueOf(flag.NewFlagSet),
		"PanicOnError":    reflect.ValueOf(flag.PanicOnError),
		"Parse":           reflect.ValueOf(flag.Parse),
		"Parsed":          reflect.ValueOf(flag.Parsed),
		"PrintDefaults":   reflect.ValueOf(flag.PrintDefaults),
		"Set":             reflect.ValueOf(flag.Set),
		"String":          reflect.ValueOf(flag.String),
		"StringVar":       reflect.ValueOf(flag.StringVar),
		"Uint":            reflect.ValueOf(flag.Uint),
		"Uint64":          reflect.ValueOf(flag.Uint64),
		"Uint64Var":       reflect.ValueOf(flag.Uint64Var),
		"UintVar":         reflect.ValueOf(flag.UintVar),
		"UnquoteUsage":    reflect.ValueOf(flag.UnquoteUsage),
		"Usage":           reflect.ValueOf(&flag.Usage).Elem(),
		"Var":             reflect.ValueOf(flag.Var),
		"Visit":           reflect.ValueOf(flag.Visit),
		"VisitAll":        reflect.ValueOf(flag.VisitAll),

		// type definitions
		"ErrorHandling": reflect.ValueOf((*flag.ErrorHandling)(nil)),
		"Flag":          reflect.ValueOf((*flag.Flag)(nil)),
		"FlagSet":       reflect.ValueOf((*flag.FlagSet)(nil)),
		"Getter":        reflect.ValueOf((*flag.Getter)(nil)),
		"Value":         reflect.ValueOf((*flag.Value)(nil)),

		// interface wrapper definitions
		"_Getter": reflect.ValueOf((*_flag_Getter)(nil)),
		"_Value":  reflect.ValueOf((*_flag_Value)(nil)),
	}
}

// _flag_Getter is an interface wrapper for Getter type
type _flag_Getter struct {
	WGet    func() interface{}
	WSet    func(a0 string) error
	WString func() string
}

func (W _flag_Getter) Get() interface{}    { return W.WGet() }
func (W _flag_Getter) Set(a0 string) error { return W.WSet(a0) }
func (W _flag_Getter) String() string      { return W.WString() }

// _flag_Value is an interface wrapper for Value type
type _flag_Value struct {
	WSet    func(a0 string) error
	WString func() string
}

func (W _flag_Value) Set(a0 string) error { return W.WSet(a0) }
func (W _flag_Value) String() string      { return W.WString() }

func init_fmt() {
	Symbols["fmt"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Errorf":   reflect.ValueOf(fmt.Errorf),
		"Fprint":   reflect.ValueOf(fmt.Fprint),
		"Fprintf":  reflect.ValueOf(fmt.Fprintf),
		"Fprintln": reflect.ValueOf(fmt.Fprintln),
		"Fscan":    reflect.ValueOf(fmt.Fscan),
		"Fscanf":   reflect.ValueOf(fmt.Fscanf),
		"Fscanln":  reflect.ValueOf(fmt.Fscanln),
		"Print":    reflect.ValueOf(fmt.Print),
		"Printf":   reflect.ValueOf(fmt.Printf),
		"Println":  reflect.ValueOf(fmt.Println),
		"Scan":     reflect.ValueOf(fmt.Scan),
		"Scanf":    reflect.ValueOf(fmt.Scanf),
		"Scanln":   reflect.ValueOf(fmt.Scanln),
		"Sprint":   reflect.ValueOf(fmt.Sprint),
		"Sprintf":  reflect.ValueOf(fmt.Sprintf),
		"Sprintln": reflect.ValueOf(fmt.Sprintln),
		"Sscan":    reflect.ValueOf(fmt.Sscan),
		"Sscanf":   reflect.ValueOf(fmt.Sscanf),
		"Sscanln":  reflect.ValueOf(fmt.Sscanln),

		// type definitions
		"Formatter":  reflect.ValueOf((*fmt.Formatter)(nil)),
		"GoStringer": reflect.ValueOf((*fmt.GoStringer)(nil)),
		"ScanState":  reflect.ValueOf((*fmt.ScanState)(nil)),
		"Scanner":    reflect.ValueOf((*fmt.Scanner)(nil)),
		"State":      reflect.ValueOf((*fmt.State)(nil)),
		"Stringer":   reflect.ValueOf((*fmt.Stringer)(nil)),

		// interface wrapper definitions
		"_Formatter":  reflect.ValueOf((*_fmt_Formatter)(nil)),
		"_GoStringer": reflect.ValueOf((*_fmt_GoStringer)(nil)),
		"_ScanState":  reflect.ValueOf((*_fmt_ScanState)(nil)),
		"_Scanner":    reflect.ValueOf((*_fmt_Scanner)(nil)),
		"_State":      reflect.ValueOf((*_fmt_State)(nil)),
		"_Stringer":   reflect.ValueOf((*_fmt_Stringer)(nil)),
	}
}

// _fmt_Formatter is an interface wrapper for Formatter type
type _fmt_Formatter struct {
	WFormat func(f fmt.State, c rune)
}

func (W _fmt_Formatter) Format(f fmt.State, c rune) { W.WFormat(f, c) }

// _fmt_GoStringer is an interface wrapper for GoStringer type
type _fmt_GoStringer struct {
	WGoString func() string
}

func (W _fmt_GoStringer) GoString() string { return W.WGoString() }

// _fmt_ScanState is an interface wrapper for ScanState type
type _fmt_ScanState struct {
	WRead       func(buf []byte) (n int, err error)
	WReadRune   func() (r rune, size int, err error)
	WSkipSpace  func()
	WToken      func(skipSpace bool, f func(rune) bool) (token []byte, err error)
	WUnreadRune func() error
	WWidth      func() (wid int, ok bool)
}

func (W _fmt_ScanState) Read(buf []byte) (n int, err error)      { return W.WRead(buf) }
func (W _fmt_ScanState) ReadRune() (r rune, size int, err error) { return W.WReadRune() }
func (W _fmt_ScanState) SkipSpace()                              { W.WSkipSpace() }
func (W _fmt_ScanState) Token(skipSpace bool, f func(rune) bool) (token []byte, err error) {
	return W.WToken(skipSpace, f)
}
func (W _fmt_ScanState) UnreadRune() error         { return W.WUnreadRune() }
func (W _fmt_ScanState) Width() (wid int, ok bool) { return W.WWidth() }

// _fmt_Scanner is an interface wrapper for Scanner type
type _fmt_Scanner struct {
	WScan func(state fmt.ScanState, verb rune) error
}

func (W _fmt_Scanner) Scan(state fmt.ScanState, verb rune) error { return W.WScan(state, verb) }

// _fmt_State is an interface wrapper for State type
type _fmt_State struct {
	WFlag      func(c int) bool
	WPrecision func() (prec int, ok bool)
	WWidth     func() (wid int, ok bool)
	WWrite     func(b []byte) (n int, err error)
}

func (W _fmt_State) Flag(c int) bool                   { return W.WFlag(c) }
func (W _fmt_State) Precision() (prec int, ok bool)    { return W.WPrecision() }
func (W _fmt_State) Width() (wid int, ok bool)         { return W.WWidth() }
func (W _fmt_State) Write(b []byte) (n int, err error) { return W.WWrite(b) }

// _fmt_Stringer is an interface wrapper for Stringer type
type _fmt_Stringer struct {
	WString func() string
}

func (W _fmt_Stringer) String() string { return W.WString() }

func init_io() {
	Symbols["io"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Copy":             reflect.ValueOf(io.Copy),
		"CopyBuffer":       reflect.ValueOf(io.CopyBuffer),
		"CopyN":            reflect.ValueOf(io.CopyN),
		"Discard":          reflect.ValueOf(&io.Discard).Elem(),
		"EOF":              reflect.ValueOf(&io.EOF).Elem(),
		"ErrClosedPipe":    reflect.ValueOf(&io.ErrClosedPipe).Elem(),
		"ErrNoProgress":    reflect.ValueOf(&io.ErrNoProgress).Elem(),
		"ErrShortBuffer":   reflect.ValueOf(&io.ErrShortBuffer).Elem(),
		"ErrShortWrite":    reflect.ValueOf(&io.ErrShortWrite).Elem(),
		"ErrUnexpectedEOF": reflect.ValueOf(&io.ErrUnexpectedEOF).Elem(),
		"LimitReader":      reflect.ValueOf(io.LimitReader),
		"MultiReader":      reflect.ValueOf(io.MultiReader),
		"MultiWriter":      reflect.ValueOf(io.MultiWriter),
		"NewSectionReader": reflect.ValueOf(io.NewSectionReader),
		"NopCloser":        reflect.ValueOf(io.NopCloser),
		"Pipe":             reflect.ValueOf(io.Pipe),
		"ReadAll":          reflect.ValueOf(io.ReadAll),
		"ReadAtLeast":      reflect.ValueOf(io.ReadAtLeast),
		"ReadFull":         reflect.ValueOf(io.ReadFull),
		"SeekCurrent":      reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"SeekEnd":          reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"SeekStart":        reflect.ValueOf(constant.MakeFromLiteral("0", token.INT, 0)),
		"TeeReader":        reflect.ValueOf(io.TeeReader),
		"WriteString":      reflect.ValueOf(io.WriteString),

		// type definitions
		"ByteReader":      reflect.ValueOf((*io.ByteReader)(nil)),
		"ByteScanner":     reflect.ValueOf((*io.ByteScanner)(nil)),
		"ByteWriter":      reflect.ValueOf((*io.ByteWriter)(nil)),
		"Closer":          reflect.ValueOf((*io.Closer)(nil)),
		"LimitedReader":   reflect.ValueOf((*io.LimitedReader)(nil)),
		"PipeReader":      reflect.ValueOf((*io.PipeReader)(nil)),
		"PipeWriter":      reflect.ValueOf((*io.PipeWriter)(nil)),
		"ReadCloser":      reflect.ValueOf((*io.ReadCloser)(nil)),
		"ReadSeeker":      reflect.ValueOf((*io.ReadSeeker)(nil)),
		"ReadWriteCloser": reflect.ValueOf((*io.ReadWriteCloser)(nil)),
		"ReadWriteSeeker": reflect.ValueOf((*io.ReadWriteSeeker)(nil)),
		"ReadWriter":      reflect.ValueOf((*io.ReadWriter)(nil)),
		"Reader":          reflect.ValueOf((*io.Reader)(nil)),
		"ReaderAt":        reflect.ValueOf((*io.ReaderAt)(nil)),
		"ReaderFrom":      reflect.ValueOf((*io.ReaderFrom)(nil)),
		"RuneReader":      reflect.ValueOf((*io.RuneReader)(nil)),
		"RuneScanner":     reflect.ValueOf((*io.RuneScanner)(nil)),
		"SectionReader":   reflect.ValueOf((*io.SectionReader)(nil)),
		"Seeker":          reflect.ValueOf((*io.Seeker)(nil)),
		"StringWriter":    reflect.ValueOf((*io.StringWriter)(nil)),
		"WriteCloser":     reflect.ValueOf((*io.WriteCloser)(nil)),
		"WriteSeeker":     reflect.ValueOf((*io.WriteSeeker)(nil)),
		"Writer":          reflect.ValueOf((*io.Writer)(nil)),
		"WriterAt":        reflect.ValueOf((*io.WriterAt)(nil)),
		"WriterTo":        reflect.ValueOf((*io.WriterTo)(nil)),

		// interface wrapper definitions
		"_ByteReader":      reflect.ValueOf((*_io_ByteReader)(nil)),
		"_ByteScanner":     reflect.ValueOf((*_io_ByteScanner)(nil)),
		"_ByteWriter":      reflect.ValueOf((*_io_ByteWriter)(nil)),
		"_Closer":          reflect.ValueOf((*_io_Closer)(nil)),
		"_ReadCloser":      reflect.ValueOf((*_io_ReadCloser)(nil)),
		"_ReadSeeker":      reflect.ValueOf((*_io_ReadSeeker)(nil)),
		"_ReadWriteCloser": reflect.ValueOf((*_io_ReadWriteCloser)(nil)),
		"_ReadWriteSeeker": reflect.ValueOf((*_io_ReadWriteSeeker)(nil)),
		"_ReadWriter":      reflect.ValueOf((*_io_ReadWriter)(nil)),
		"_Reader":          reflect.ValueOf((*_io_Reader)(nil)),
		"_ReaderAt":        reflect.ValueOf((*_io_ReaderAt)(nil)),
		"_ReaderFrom":      reflect.ValueOf((*_io_ReaderFrom)(nil)),
		"_RuneReader":      reflect.ValueOf((*_io_RuneReader)(nil)),
		"_RuneScanner":     reflect.ValueOf((*_io_RuneScanner)(nil)),
		"_Seeker":          reflect.ValueOf((*_io_Seeker)(nil)),
		"_StringWriter":    reflect.ValueOf((*_io_StringWriter)(nil)),
		"_WriteCloser":     reflect.ValueOf((*_io_WriteCloser)(nil)),
		"_WriteSeeker":     reflect.ValueOf((*_io_WriteSeeker)(nil)),
		"_Writer":          reflect.ValueOf((*_io_Writer)(nil)),
		"_WriterAt":        reflect.ValueOf((*_io_WriterAt)(nil)),
		"_WriterTo":        reflect.ValueOf((*_io_WriterTo)(nil)),
	}
}

// _io_ByteReader is an interface wrapper for ByteReader type
type _io_ByteReader struct {
	WReadByte func() (byte, error)
}

func (W _io_ByteReader) ReadByte() (byte, error) { return W.WReadByte() }

// _io_ByteScanner is an interface wrapper for ByteScanner type
type _io_ByteScanner struct {
	WReadByte   func() (byte, error)
	WUnreadByte func() error
}

func (W _io_ByteScanner) ReadByte() (byte, error) { return W.WReadByte() }
func (W _io_ByteScanner) UnreadByte() error       { return W.WUnreadByte() }

// _io_ByteWriter is an interface wrapper for ByteWriter type
type _io_ByteWriter struct {
	WWriteByte func(c byte) error
}

func (W _io_ByteWriter) WriteByte(c byte) error { return W.WWriteByte(c) }

// _io_Closer is an interface wrapper for Closer type
type _io_Closer struct {
	WClose func() error
}

func (W _io_Closer) Close() error { return W.WClose() }

// _io_ReadCloser is an interface wrapper for ReadCloser type
type _io_ReadCloser struct {
	WClose func() error
	WRead  func(p []byte) (n int, err error)
}

func (W _io_ReadCloser) Close() error                     { return W.WClose() }
func (W _io_ReadCloser) Read(p []byte) (n int, err error) { return W.WRead(p) }

// _io_ReadSeeker is an interface wrapper for ReadSeeker type
type _io_ReadSeeker struct {
	WRead func(p []byte) (n int, err error)
	WSeek func(offset int64, whence int) (int64, error)
}

func (W _io_ReadSeeker) Read(p []byte) (n int, err error)             { return W.WRead(p) }
func (W _io_ReadSeeker) Seek(offset int64, whence int) (int64, error) { return W.WSeek(offset, whence) }

// _io_ReadWriteCloser is an interface wrapper for ReadWriteCloser type
type _io_ReadWriteCloser struct {
	WClose func() error
	WRead  func(p []byte) (n int, err error)
	WWrite func(p []byte) (n int, err error)
}

func (W _io_ReadWriteCloser) Close() error                      { return W.WClose() }
func (W _io_ReadWriteCloser) Read(p []byte) (n int, err error)  { return W.WRead(p) }
func (W _io_ReadWriteCloser) Write(p []byte) (n int, err error) { return W.WWrite(p) }

// _io_ReadWriteSeeker is an interface wrapper for ReadWriteSeeker type
type _io_ReadWriteSeeker struct {
	WRead  func(p []byte) (n int, err error)
	WSeek  func(offset int64, whence int) (int64, error)
	WWrite func(p []byte) (n int, err error)
}

func (W _io_ReadWriteSeeker) Read(p []byte) (n int, err error) { return W.WRead(p) }
func (W _io_ReadWriteSeeker) Seek(offset int64, whence int) (int64, error) {
	return W.WSeek(offset, whence)
}
func (W _io_ReadWriteSeeker) Write(p []byte) (n int, err error) { return W.WWrite(p) }

// _io_ReadWriter is an interface wrapper for ReadWriter type
type _io_ReadWriter struct {
	WRead  func(p []byte) (n int, err error)
	WWrite func(p []byte) (n int, err error)
}

func (W _io_ReadWriter) Read(p []byte) (n int, err error)  { return W.WRead(p) }
func (W _io_ReadWriter) Write(p []byte) (n int, err error) { return W.WWrite(p) }

// _io_Reader is an interface wrapper for Reader type
type _io_Reader struct {
	WRead func(p []byte) (n int, err error)
}

func (W _io_Reader) Read(p []byte) (n int, err error) { return W.WRead(p) }

// _io_ReaderAt is an interface wrapper for ReaderAt type
type _io_ReaderAt struct {
	WReadAt func(p []byte, off int64) (n int, err error)
}

func (W _io_ReaderAt) ReadAt(p []byte, off int64) (n int, err error) { return W.WReadAt(p, off) }

// _io_ReaderFrom is an interface wrapper for ReaderFrom type
type _io_ReaderFrom struct {
	WReadFrom func(r io.Reader) (n int64, err error)
}

func (W _io_ReaderFrom) ReadFrom(r io.Reader) (n int64, err error) { return W.WReadFrom(r) }

// _io_RuneReader is an interface wrapper for RuneReader type
type _io_RuneReader struct {
	WReadRune func() (r rune, size int, err error)
}

func (W _io_RuneReader) ReadRune() (r rune, size int, err error) { return W.WReadRune() }

// _io_RuneScanner is an interface wrapper for RuneScanner type
type _io_RuneScanner struct {
	WReadRune   func() (r rune, size int, err error)
	WUnreadRune func() error
}

func (W _io_RuneScanner) ReadRune() (r rune, size int, err error) { return W.WReadRune() }
func (W _io_RuneScanner) UnreadRune() error                       { return W.WUnreadRune() }

// _io_Seeker is an interface wrapper for Seeker type
type _io_Seeker struct {
	WSeek func(offset int64, whence int) (int64, error)
}

func (W _io_Seeker) Seek(offset int64, whence int) (int64, error) { return W.WSeek(offset, whence) }

// _io_StringWriter is an interface wrapper for StringWriter type
type _io_StringWriter struct {
	WWriteString func(s string) (n int, err error)
}

func (W _io_StringWriter) WriteString(s string) (n int, err error) { return W.WWriteString(s) }

// _io_WriteCloser is an interface wrapper for WriteCloser type
type _io_WriteCloser struct {
	WClose func() error
	WWrite func(p []byte) (n int, err error)
}

func (W _io_WriteCloser) Close() error                      { return W.WClose() }
func (W _io_WriteCloser) Write(p []byte) (n int, err error) { return W.WWrite(p) }

// _io_WriteSeeker is an interface wrapper for WriteSeeker type
type _io_WriteSeeker struct {
	WSeek  func(offset int64, whence int) (int64, error)
	WWrite func(p []byte) (n int, err error)
}

func (W _io_WriteSeeker) Seek(offset int64, whence int) (int64, error) {
	return W.WSeek(offset, whence)
}
func (W _io_WriteSeeker) Write(p []byte) (n int, err error) { return W.WWrite(p) }

// _io_Writer is an interface wrapper for Writer type
type _io_Writer struct {
	WWrite func(p []byte) (n int, err error)
}

func (W _io_Writer) Write(p []byte) (n int, err error) { return W.WWrite(p) }

// _io_WriterAt is an interface wrapper for WriterAt type
type _io_WriterAt struct {
	WWriteAt func(p []byte, off int64) (n int, err error)
}

func (W _io_WriterAt) WriteAt(p []byte, off int64) (n int, err error) { return W.WWriteAt(p, off) }

// _io_WriterTo is an interface wrapper for WriterTo type
type _io_WriterTo struct {
	WWriteTo func(w io.Writer) (n int64, err error)
}

func (W _io_WriterTo) WriteTo(w io.Writer) (n int64, err error) { return W.WWriteTo(w) }

func init_math() {
	Symbols["math"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":                    reflect.ValueOf(math.Abs),
		"Acos":                   reflect.ValueOf(math.Acos),
		"Acosh":                  reflect.ValueOf(math.Acosh),
		"Asin":                   reflect.ValueOf(math.Asin),
		"Asinh":                  reflect.ValueOf(math.Asinh),
		"Atan":                   reflect.ValueOf(math.Atan),
		"Atan2":                  reflect.ValueOf(math.Atan2),
		"Atanh":                  reflect.ValueOf(math.Atanh),
		"Cbrt":                   reflect.ValueOf(math.Cbrt),
		"Ceil":                   reflect.ValueOf(math.Ceil),
		"Copysign":               reflect.ValueOf(math.Copysign),
		"Cos":                    reflect.ValueOf(math.Cos),
		"Cosh":                   reflect.ValueOf(math.Cosh),
		"Dim":                    reflect.ValueOf(math.Dim),
		"E":                      reflect.ValueOf(constant.MakeFromLiteral("2.71828182845904523536028747135266249775724709369995957496696762566337824315673231520670375558666729784504486779277967997696994772644702281675346915668215131895555530285035761295375777990557253360748291015625", token.FLOAT, 0)),
		"Erf":                    reflect.ValueOf(math.Erf),
		"Erfc":                   reflect.ValueOf(math.Erfc),
		"Erfcinv":                reflect.ValueOf(math.Erfcinv),
		"Erfinv":                 reflect.ValueOf(math.Erfinv),
		"Exp":                    reflect.ValueOf(math.Exp),
		"Exp2":                   reflect.ValueOf(math.Exp2),
		"Expm1":                  reflect.ValueOf(math.Expm1),
		"Float32bits":            reflect.ValueOf(math.Float32bits),
		"Float32frombits":        reflect.ValueOf(math.Float32frombits),
		"Float64bits":            reflect.ValueOf(math.Float64bits),
		"Float64frombits":        reflect.ValueOf(math.Float64frombits),
		"Floor":                  reflect.ValueOf(math.Floor),
		"Frexp":                  reflect.ValueOf(math.Frexp),
		"Gamma":                  reflect.ValueOf(math.Gamma),
		"Hypot":                  reflect.ValueOf(math.Hypot),
		"Ilogb":                  reflect.ValueOf(math.Ilogb),
		"Inf":                    reflect.ValueOf(math.Inf),
		"IsInf":                  reflect.ValueOf(math.IsInf),
		"IsNaN":                  reflect.ValueOf(math.IsNaN),
		"J0":                     reflect.ValueOf(math.J0),
		"J1":                     reflect.ValueOf(math.J1),
		"Jn":                     reflect.ValueOf(math.Jn),
		"Ldexp":                  reflect.ValueOf(math.Ldexp),
		"Lgamma":                 reflect.ValueOf(math.Lgamma),
		"Ln10":                   reflect.ValueOf(constant.MakeFromLiteral("2.30258509299404568401799145468436420760110148862877297603332784146804725494827975466552490443295866962642372461496758838959542646932914211937012833592062802600362869664962772731087170541286468505859375", token.FLOAT, 0)),
		"Ln2":                    reflect.ValueOf(constant.MakeFromLiteral("0.6931471805599453094172321214581765680755001343602552541206800092715999496201383079363438206637927920954189307729314303884387720696314608777673678644642390655170150035209453154294578780536539852619171142578125", token.FLOAT, 0)),
		"Log":                    reflect.ValueOf(math.Log),
		"Log10":                  reflect.ValueOf(math.Log10),
		"Log10E":                 reflect.ValueOf(constant.MakeFromLiteral("0.43429448190325182765112891891660508229439700580366656611445378416636798190620320263064286300825210972160277489744884502676719847561509639618196799746596688688378591625127711495224502868950366973876953125", token.FLOAT, 0)),
		"Log1p":                  reflect.ValueOf(math.Log1p),
		"Log2":                   reflect.ValueOf(math.Log2),
		"Log2E":                  reflect.ValueOf(constant.MakeFromLiteral("1.44269504088896340735992468100189213742664595415298593413544940772066427768997545329060870636212628972710992130324953463427359402479619301286929040235571747101382214539290471666532766903401352465152740478515625", token.FLOAT, 0)),
		"Logb":                   reflect.ValueOf(math.Logb),
		"Max":                    reflect.ValueOf(math.Max),
		"MaxFloat32":             reflect.ValueOf(constant.MakeFromLiteral("340282346638528859811704183484516925440", token.FLOAT, 0)),
		"MaxFloat64":             reflect.ValueOf(constant.MakeFromLiteral("179769313486231570814527423731704356798100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", token.FLOAT, 0)),
		"MaxInt16":               reflect.ValueOf(constant.MakeFromLiteral("32767", token.INT, 0)),
		"MaxInt32":               reflect.ValueOf(constant.MakeFromLiteral("2147483647", token.INT, 0)),
		"MaxInt64":               reflect.ValueOf(constant.MakeFromLiteral("9223372036854775807", token.INT, 0)),
		"MaxInt8":                reflect.ValueOf(constant.MakeFromLiteral("127", token.INT, 0)),
		"MaxUint16":              reflect.ValueOf(constant.MakeFromLiteral("65535", token.INT, 0)),
		"MaxUint32":              reflect.ValueOf(constant.MakeFromLiteral("4294967295", token.INT, 0)),
		"MaxUint64":              reflect.ValueOf(constant.MakeFromLiteral("18446744073709551615", token.INT, 0)),
		"MaxUint8":               reflect.ValueOf(constant.MakeFromLiteral("255", token.INT, 0)),
		"Min":                    reflect.ValueOf(math.Min),
		"MinInt16":               reflect.ValueOf(constant.MakeFromLiteral("-32768", token.INT, 0)),
		"MinInt32":               reflect.ValueOf(constant.MakeFromLiteral("-2147483648", token.INT, 0)),
		"MinInt64":               reflect.ValueOf(constant.MakeFromLiteral("-9223372036854775808", token.INT, 0)),
		"MinInt8":                reflect.ValueOf(constant.MakeFromLiteral("-128", token.INT, 0)),
		"Mod":                    reflect.ValueOf(math.Mod),
		"Modf":                   reflect.ValueOf(math.Modf),
		"NaN":                    reflect.ValueOf(math.NaN),
		"Nextafter":              reflect.ValueOf(math.Nextafter),
		"Nextafter32":            reflect.ValueOf(math.Nextafter32),
		"Phi":                    reflect.ValueOf(constant.MakeFromLiteral("1.6180339887498948482045868343656381177203091798057628621354486119746080982153796619881086049305501566952211682590824739205931370737029882996587050475921915678674035433959321750307935872115194797515869140625", token.FLOAT, 0)),
		"Pi":                     reflect.ValueOf(constant.MakeFromLiteral("3.141592653589793238462643383279502884197169399375105820974944594789982923695635954704435713335896673485663389728754819466702315787113662862838515639906529162340867271374644786874341662041842937469482421875", token.FLOAT, 0)),
		"Pow":                    reflect.ValueOf(math.Pow),
		"Pow10":                  reflect.ValueOf(math.Pow10),
		"Remainder":              reflect.ValueOf(math.Remainder),
		"Round":                  reflect.ValueOf(math.Round),
		"RoundToEven":            reflect.ValueOf(math.RoundToEven),
		"Signbit":                reflect.ValueOf(math.Signbit),
		"Sin":                    reflect.ValueOf(math.Sin),
		"Sincos":                 reflect.ValueOf(math.Sincos),
		"Sinh":                   reflect.ValueOf(math.Sinh),
		"SmallestNonzeroFloat32": reflect.ValueOf(constant.MakeFromLiteral("1.40129846432481707092372958328991613128000000000000000000000000000000000000000000001246655487714533538006789189734126694785975183981128816138510360971472225738624150874949653910667523779981133927289771669016713539217953030564201688027906006008453304556102801950542906382507e-45", token.FLOAT, 0)),
		"SmallestNonzeroFloat64": reflect.ValueOf(constant.MakeFromLiteral("4.94065645841246544176568792868221372365099999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999916206614696136086629714037163874026187912451674985660337336755242863513549746484310667379088263176934591818322489862214324814281481943599945502119376688748731948897748561110123901991443297110206447991752071007926740839424145013355231935665542622515363894390826799291671723318261174778903704064716351336223785714389641180220184242018383103204287325861250404139399888498504162666394779407509786431980433771341978183418568838015304951087487907666317075235615216699116844779095660202193409146032665221882798856203896125090454090026556150624798681464913851491093798848436664885581161128190046248588053014958829424991704801027040654863867512297941601850496672190315253109308532379657238854928816482120688440415705411555019932096150435627305446214567713171657554140575630917301482608119551500514805985376055777894871863446222606532650275466165274006e-324", token.FLOAT, 0)),
		"Sqrt":                   reflect.ValueOf(math.Sqrt),
		"Sqrt2":                  reflect.ValueOf(constant.MakeFromLiteral("1.414213562373095048801688724209698078569671875376948073176679739576083351575381440094441524123797447886801949755143139115339040409162552642832693297721230919563348109313505318596071447245776653289794921875", token.FLOAT, 0)),
		"SqrtE":                  reflect.ValueOf(constant.MakeFromLiteral("1.64872127070012814684865078781416357165377610071014801157507931167328763229187870850146925823776361770041160388013884200789716007979526823569827080974091691342077871211546646890155898290686309337615966796875", token.FLOAT, 0)),
		"SqrtPhi":                reflect.ValueOf(constant.MakeFromLiteral("1.2720196495140689642524224617374914917156080418400962486166403754616080542166459302584536396369727769747312116100875915825863540562126478288118732191412003988041797518382391984914647764526307582855224609375", token.FLOAT, 0)),
		"SqrtPi":                 reflect.ValueOf(constant.MakeFromLiteral("1.772453850905516027298167483341145182797549456122387128213807789740599698370237052541269446184448945647349951047154197675245574635259260134350885938555625028620527962319730619356050738133490085601806640625", token.FLOAT, 0)),
		"Tan":                    reflect.ValueOf(math.Tan),
		"Tanh":                   reflect.ValueOf(math.Tanh),
		"Trunc":                  reflect.ValueOf(math.Trunc),
		"Y0":                     reflect.ValueOf(math.Y0),
		"Y1":                     reflect.ValueOf(math.Y1),
		"Yn":                     reflect.ValueOf(math.Yn),
	}
}

func init_math_big() {
	Symbols["math/big"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Above":         reflect.ValueOf(big.Above),
		"AwayFromZero":  reflect.ValueOf(big.AwayFromZero),
		"Below":         reflect.ValueOf(big.Below),
		"Exact":         reflect.ValueOf(big.Exact),
		"Jacobi":        reflect.ValueOf(big.Jacobi),
		"MaxBase":       reflect.ValueOf(constant.MakeFromLiteral("62", token.INT, 0)),
		"MaxExp":        reflect.ValueOf(constant.MakeFromLiteral("2147483647", token.INT, 0)),
		"MaxPrec":       reflect.ValueOf(constant.MakeFromLiteral("4294967295", token.INT, 0)),
		"MinExp":        reflect.ValueOf(constant.MakeFromLiteral("-2147483648", token.INT, 0)),
		"NewFloat":      reflect.ValueOf(big.NewFloat),
		"NewInt":        reflect.ValueOf(big.NewInt),
		"NewRat":        reflect.ValueOf(big.NewRat),
		"ParseFloat":    reflect.ValueOf(big.ParseFloat),
		"ToNearestAway": reflect.ValueOf(big.ToNearestAway),
		"ToNearestEven": reflect.ValueOf(big.ToNearestEven),
		"ToNegativeInf": reflect.ValueOf(big.ToNegativeInf),
		"ToPositiveInf": reflect.ValueOf(big.ToPositiveInf),
		"ToZero":        reflect.ValueOf(big.ToZero),

		// type definitions
		"Accuracy":     reflect.ValueOf((*big.Accuracy)(nil)),
		"ErrNaN":       reflect.ValueOf((*big.ErrNaN)(nil)),
		"Float":        reflect.ValueOf((*big.Float)(nil)),
		"Int":          reflect.ValueOf((*big.Int)(nil)),
		"Rat":          reflect.ValueOf((*big.Rat)(nil)),
		"RoundingMode": reflect.ValueOf((*big.RoundingMode)(nil)),
		"Word":         reflect.ValueOf((*big.Word)(nil)),
	}
}

func init_math_bits() {
	Symbols["math/bits"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Add":             reflect.ValueOf(bits.Add),
		"Add32":           reflect.ValueOf(bits.Add32),
		"Add64":           reflect.ValueOf(bits.Add64),
		"Div":             reflect.ValueOf(bits.Div),
		"Div32":           reflect.ValueOf(bits.Div32),
		"Div64":           reflect.ValueOf(bits.Div64),
		"LeadingZeros":    reflect.ValueOf(bits.LeadingZeros),
		"LeadingZeros16":  reflect.ValueOf(bits.LeadingZeros16),
		"LeadingZeros32":  reflect.ValueOf(bits.LeadingZeros32),
		"LeadingZeros64":  reflect.ValueOf(bits.LeadingZeros64),
		"LeadingZeros8":   reflect.ValueOf(bits.LeadingZeros8),
		"Len":             reflect.ValueOf(bits.Len),
		"Len16":           reflect.ValueOf(bits.Len16),
		"Len32":           reflect.ValueOf(bits.Len32),
		"Len64":           reflect.ValueOf(bits.Len64),
		"Len8":            reflect.ValueOf(bits.Len8),
		"Mul":             reflect.ValueOf(bits.Mul),
		"Mul32":           reflect.ValueOf(bits.Mul32),
		"Mul64":           reflect.ValueOf(bits.Mul64),
		"OnesCount":       reflect.ValueOf(bits.OnesCount),
		"OnesCount16":     reflect.ValueOf(bits.OnesCount16),
		"OnesCount32":     reflect.ValueOf(bits.OnesCount32),
		"OnesCount64":     reflect.ValueOf(bits.OnesCount64),
		"OnesCount8":      reflect.ValueOf(bits.OnesCount8),
		"Reverse":         reflect.ValueOf(bits.Reverse),
		"Reverse16":       reflect.ValueOf(bits.Reverse16),
		"Reverse32":       reflect.ValueOf(bits.Reverse32),
		"Reverse64":       reflect.ValueOf(bits.Reverse64),
		"Reverse8":        reflect.ValueOf(bits.Reverse8),
		"ReverseBytes":    reflect.ValueOf(bits.ReverseBytes),
		"ReverseBytes16":  reflect.ValueOf(bits.ReverseBytes16),
		"ReverseBytes32":  reflect.ValueOf(bits.ReverseBytes32),
		"ReverseBytes64":  reflect.ValueOf(bits.ReverseBytes64),
		"RotateLeft":      reflect.ValueOf(bits.RotateLeft),
		"RotateLeft16":    reflect.ValueOf(bits.RotateLeft16),
		"RotateLeft32":    reflect.ValueOf(bits.RotateLeft32),
		"RotateLeft64":    reflect.ValueOf(bits.RotateLeft64),
		"RotateLeft8":     reflect.ValueOf(bits.RotateLeft8),
		"Sub":             reflect.ValueOf(bits.Sub),
		"Sub32":           reflect.ValueOf(bits.Sub32),
		"Sub64":           reflect.ValueOf(bits.Sub64),
		"TrailingZeros":   reflect.ValueOf(bits.TrailingZeros),
		"TrailingZeros16": reflect.ValueOf(bits.TrailingZeros16),
		"TrailingZeros32": reflect.ValueOf(bits.TrailingZeros32),
		"TrailingZeros64": reflect.ValueOf(bits.TrailingZeros64),
		"TrailingZeros8":  reflect.ValueOf(bits.TrailingZeros8),
		"UintSize":        reflect.ValueOf(constant.MakeFromLiteral("64", token.INT, 0)),
	}
}

func init_math_cmplx() {
	Symbols["math/cmplx"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":   reflect.ValueOf(cmplx.Abs),
		"Acos":  reflect.ValueOf(cmplx.Acos),
		"Acosh": reflect.ValueOf(cmplx.Acosh),
		"Asin":  reflect.ValueOf(cmplx.Asin),
		"Asinh": reflect.ValueOf(cmplx.Asinh),
		"Atan":  reflect.ValueOf(cmplx.Atan),
		"Atanh": reflect.ValueOf(cmplx.Atanh),
		"Conj":  reflect.ValueOf(cmplx.Conj),
		"Cos":   reflect.ValueOf(cmplx.Cos),
		"Cosh":  reflect.ValueOf(cmplx.Cosh),
		"Cot":   reflect.ValueOf(cmplx.Cot),
		"Exp":   reflect.ValueOf(cmplx.Exp),
		"Inf":   reflect.ValueOf(cmplx.Inf),
		"IsInf": reflect.ValueOf(cmplx.IsInf),
		"IsNaN": reflect.ValueOf(cmplx.IsNaN),
		"Log":   reflect.ValueOf(cmplx.Log),
		"Log10": reflect.ValueOf(cmplx.Log10),
		"NaN":   reflect.ValueOf(cmplx.NaN),
		"Phase": reflect.ValueOf(cmplx.Phase),
		"Polar": reflect.ValueOf(cmplx.Polar),
		"Pow":   reflect.ValueOf(cmplx.Pow),
		"Rect":  reflect.ValueOf(cmplx.Rect),
		"Sin":   reflect.ValueOf(cmplx.Sin),
		"Sinh":  reflect.ValueOf(cmplx.Sinh),
		"Sqrt":  reflect.ValueOf(cmplx.Sqrt),
		"Tan":   reflect.ValueOf(cmplx.Tan),
		"Tanh":  reflect.ValueOf(cmplx.Tanh),
	}
}

func init_math_rand() {
	Symbols["math/rand"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ExpFloat64":  reflect.ValueOf(rand.ExpFloat64),
		"Float32":     reflect.ValueOf(rand.Float32),
		"Float64":     reflect.ValueOf(rand.Float64),
		"Int":         reflect.ValueOf(rand.Int),
		"Int31":       reflect.ValueOf(rand.Int31),
		"Int31n":      reflect.ValueOf(rand.Int31n),
		"Int63":       reflect.ValueOf(rand.Int63),
		"Int63n":      reflect.ValueOf(rand.Int63n),
		"Intn":        reflect.ValueOf(rand.Intn),
		"New":         reflect.ValueOf(rand.New),
		"NewSource":   reflect.ValueOf(rand.NewSource),
		"NewZipf":     reflect.ValueOf(rand.NewZipf),
		"NormFloat64": reflect.ValueOf(rand.NormFloat64),
		"Perm":        reflect.ValueOf(rand.Perm),
		"Read":        reflect.ValueOf(rand.Read),
		"Seed":        reflect.ValueOf(rand.Seed),
		"Shuffle":     reflect.ValueOf(rand.Shuffle),
		"Uint32":      reflect.ValueOf(rand.Uint32),
		"Uint64":      reflect.ValueOf(rand.Uint64),

		// type definitions
		"Rand":     reflect.ValueOf((*rand.Rand)(nil)),
		"Source":   reflect.ValueOf((*rand.Source)(nil)),
		"Source64": reflect.ValueOf((*rand.Source64)(nil)),
		"Zipf":     reflect.ValueOf((*rand.Zipf)(nil)),

		// interface wrapper definitions
		"_Source":   reflect.ValueOf((*_math_rand_Source)(nil)),
		"_Source64": reflect.ValueOf((*_math_rand_Source64)(nil)),
	}
}

// _math_rand_Source is an interface wrapper for Source type
type _math_rand_Source struct {
	WInt63 func() int64
	WSeed  func(seed int64)
}

func (W _math_rand_Source) Int63() int64    { return W.WInt63() }
func (W _math_rand_Source) Seed(seed int64) { W.WSeed(seed) }

// _math_rand_Source64 is an interface wrapper for Source64 type
type _math_rand_Source64 struct {
	WInt63  func() int64
	WSeed   func(seed int64)
	WUint64 func() uint64
}

func (W _math_rand_Source64) Int63() int64    { return W.WInt63() }
func (W _math_rand_Source64) Seed(seed int64) { W.WSeed(seed) }
func (W _math_rand_Source64) Uint64() uint64  { return W.WUint64() }

func init_reflect() {
	Symbols["reflect"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Append":          reflect.ValueOf(reflect.Append),
		"AppendSlice":     reflect.ValueOf(reflect.AppendSlice),
		"Array":           reflect.ValueOf(reflect.Array),
		"ArrayOf":         reflect.ValueOf(reflect.ArrayOf),
		"Bool":            reflect.ValueOf(reflect.Bool),
		"BothDir":         reflect.ValueOf(reflect.BothDir),
		"Chan":            reflect.ValueOf(reflect.Chan),
		"ChanOf":          reflect.ValueOf(reflect.ChanOf),
		"Complex128":      reflect.ValueOf(reflect.Complex128),
		"Complex64":       reflect.ValueOf(reflect.Complex64),
		"Copy":            reflect.ValueOf(reflect.Copy),
		"DeepEqual":       reflect.ValueOf(reflect.DeepEqual),
		"Float32":         reflect.ValueOf(reflect.Float32),
		"Float64":         reflect.ValueOf(reflect.Float64),
		"Func":            reflect.ValueOf(reflect.Func),
		"FuncOf":          reflect.ValueOf(reflect.FuncOf),
		"Indirect":        reflect.ValueOf(reflect.Indirect),
		"Int":             reflect.ValueOf(reflect.Int),
		"Int16":           reflect.ValueOf(reflect.Int16),
		"Int32":           reflect.ValueOf(reflect.Int32),
		"Int64":           reflect.ValueOf(reflect.Int64),
		"Int8":            reflect.ValueOf(reflect.Int8),
		"Interface":       reflect.ValueOf(reflect.Interface),
		"Invalid":         reflect.ValueOf(reflect.Invalid),
		"MakeChan":        reflect.ValueOf(reflect.MakeChan),
		"MakeFunc":        reflect.ValueOf(reflect.MakeFunc),
		"MakeMap":         reflect.ValueOf(reflect.MakeMap),
		"MakeMapWithSize": reflect.ValueOf(reflect.MakeMapWithSize),
		"MakeSlice":       reflect.ValueOf(reflect.MakeSlice),
		"Map":             reflect.ValueOf(reflect.Map),
		"MapOf":           reflect.ValueOf(reflect.MapOf),
		"New":             reflect.ValueOf(reflect.New),
		"NewAt":           reflect.ValueOf(reflect.NewAt),
		"Ptr":             reflect.ValueOf(reflect.Ptr),
		"PtrTo":           reflect.ValueOf(reflect.PtrTo),
		"RecvDir":         reflect.ValueOf(reflect.RecvDir),
		"Select":          reflect.ValueOf(reflect.Select),
		"SelectDefault":   reflect.ValueOf(reflect.SelectDefault),
		"SelectRecv":      reflect.ValueOf(reflect.SelectRecv),
		"SelectSend":      reflect.ValueOf(reflect.SelectSend),
		"SendDir":         reflect.ValueOf(reflect.SendDir),
		"Slice":           reflect.ValueOf(reflect.Slice),
		"SliceOf":         reflect.ValueOf(reflect.SliceOf),
		"String":          reflect.ValueOf(reflect.String),
		"Struct":          reflect.ValueOf(reflect.Struct),
		"StructOf":        reflect.ValueOf(reflect.StructOf),
		"Swapper":         reflect.ValueOf(reflect.Swapper),
		"TypeOf":          reflect.ValueOf(reflect.TypeOf),
		"Uint":            reflect.ValueOf(reflect.Uint),
		"Uint16":          reflect.ValueOf(reflect.Uint16),
		"Uint32":          reflect.ValueOf(reflect.Uint32),
		"Uint64":          reflect.ValueOf(reflect.Uint64),
		"Uint8":           reflect.ValueOf(reflect.Uint8),
		"Uintptr":         reflect.ValueOf(reflect.Uintptr),
		"UnsafePointer":   reflect.ValueOf(reflect.UnsafePointer),
		"ValueOf":         reflect.ValueOf(reflect.ValueOf),
		"Zero":            reflect.ValueOf(reflect.Zero),

		// type definitions
		"ChanDir":      reflect.ValueOf((*reflect.ChanDir)(nil)),
		"Kind":         reflect.ValueOf((*reflect.Kind)(nil)),
		"MapIter":      reflect.ValueOf((*reflect.MapIter)(nil)),
		"Method":       reflect.ValueOf((*reflect.Method)(nil)),
		"SelectCase":   reflect.ValueOf((*reflect.SelectCase)(nil)),
		"SelectDir":    reflect.ValueOf((*reflect.SelectDir)(nil)),
		"SliceHeader":  reflect.ValueOf((*reflect.SliceHeader)(nil)),
		"StringHeader": reflect.ValueOf((*reflect.StringHeader)(nil)),
		"StructField":  reflect.ValueOf((*reflect.StructField)(nil)),
		"StructTag":    reflect.ValueOf((*reflect.StructTag)(nil)),
		"Type":         reflect.ValueOf((*reflect.Type)(nil)),
		"Value":        reflect.ValueOf((*reflect.Value)(nil)),
		"ValueError":   reflect.ValueOf((*reflect.ValueError)(nil)),

		// interface wrapper definitions
		"_Type": reflect.ValueOf((*_reflect_Type)(nil)),
	}
}

// _reflect_Type is an interface wrapper for Type type
type _reflect_Type struct {
	WAlign           func() int
	WAssignableTo    func(u reflect.Type) bool
	WBits            func() int
	WChanDir         func() reflect.ChanDir
	WComparable      func() bool
	WConvertibleTo   func(u reflect.Type) bool
	WElem            func() reflect.Type
	WField           func(i int) reflect.StructField
	WFieldAlign      func() int
	WFieldByIndex    func(index []int) reflect.StructField
	WFieldByName     func(name string) (reflect.StructField, bool)
	WFieldByNameFunc func(match func(string) bool) (reflect.StructField, bool)
	WImplements      func(u reflect.Type) bool
	WIn              func(i int) reflect.Type
	WIsVariadic      func() bool
	WKey             func() reflect.Type
	WKind            func() reflect.Kind
	WLen             func() int
	WMethod          func(a0 int) reflect.Method
	WMethodByName    func(a0 string) (reflect.Method, bool)
	WName            func() string
	WNumField        func() int
	WNumIn           func() int
	WNumMethod       func() int
	WNumOut          func() int
	WOut             func(i int) reflect.Type
	WPkgPath         func() string
	WSize            func() uintptr
	WString          func() string
}

func (W _reflect_Type) Align() int                                   { return W.WAlign() }
func (W _reflect_Type) AssignableTo(u reflect.Type) bool             { return W.WAssignableTo(u) }
func (W _reflect_Type) Bits() int                                    { return W.WBits() }
func (W _reflect_Type) ChanDir() reflect.ChanDir                     { return W.WChanDir() }
func (W _reflect_Type) Comparable() bool                             { return W.WComparable() }
func (W _reflect_Type) ConvertibleTo(u reflect.Type) bool            { return W.WConvertibleTo(u) }
func (W _reflect_Type) Elem() reflect.Type                           { return W.WElem() }
func (W _reflect_Type) Field(i int) reflect.StructField              { return W.WField(i) }
func (W _reflect_Type) FieldAlign() int                              { return W.WFieldAlign() }
func (W _reflect_Type) FieldByIndex(index []int) reflect.StructField { return W.WFieldByIndex(index) }
func (W _reflect_Type) FieldByName(name string) (reflect.StructField, bool) {
	return W.WFieldByName(name)
}
func (W _reflect_Type) FieldByNameFunc(match func(string) bool) (reflect.StructField, bool) {
	return W.WFieldByNameFunc(match)
}
func (W _reflect_Type) Implements(u reflect.Type) bool                { return W.WImplements(u) }
func (W _reflect_Type) In(i int) reflect.Type                         { return W.WIn(i) }
func (W _reflect_Type) IsVariadic() bool                              { return W.WIsVariadic() }
func (W _reflect_Type) Key() reflect.Type                             { return W.WKey() }
func (W _reflect_Type) Kind() reflect.Kind                            { return W.WKind() }
func (W _reflect_Type) Len() int                                      { return W.WLen() }
func (W _reflect_Type) Method(a0 int) reflect.Method                  { return W.WMethod(a0) }
func (W _reflect_Type) MethodByName(a0 string) (reflect.Method, bool) { return W.WMethodByName(a0) }
func (W _reflect_Type) Name() string                                  { return W.WName() }
func (W _reflect_Type) NumField() int                                 { return W.WNumField() }
func (W _reflect_Type) NumIn() int                                    { return W.WNumIn() }
func (W _reflect_Type) NumMethod() int                                { return W.WNumMethod() }
func (W _reflect_Type) NumOut() int                                   { return W.WNumOut() }
func (W _reflect_Type) Out(i int) reflect.Type                        { return W.WOut(i) }
func (W _reflect_Type) PkgPath() string                               { return W.WPkgPath() }
func (W _reflect_Type) Size() uintptr                                 { return W.WSize() }
func (W _reflect_Type) String() string                                { return W.WString() }

func init_strings() {
	Symbols["strings"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Compare":        reflect.ValueOf(strings.Compare),
		"Contains":       reflect.ValueOf(strings.Contains),
		"ContainsAny":    reflect.ValueOf(strings.ContainsAny),
		"ContainsRune":   reflect.ValueOf(strings.ContainsRune),
		"Count":          reflect.ValueOf(strings.Count),
		"EqualFold":      reflect.ValueOf(strings.EqualFold),
		"Fields":         reflect.ValueOf(strings.Fields),
		"FieldsFunc":     reflect.ValueOf(strings.FieldsFunc),
		"HasPrefix":      reflect.ValueOf(strings.HasPrefix),
		"HasSuffix":      reflect.ValueOf(strings.HasSuffix),
		"Index":          reflect.ValueOf(strings.Index),
		"IndexAny":       reflect.ValueOf(strings.IndexAny),
		"IndexByte":      reflect.ValueOf(strings.IndexByte),
		"IndexFunc":      reflect.ValueOf(strings.IndexFunc),
		"IndexRune":      reflect.ValueOf(strings.IndexRune),
		"Join":           reflect.ValueOf(strings.Join),
		"LastIndex":      reflect.ValueOf(strings.LastIndex),
		"LastIndexAny":   reflect.ValueOf(strings.LastIndexAny),
		"LastIndexByte":  reflect.ValueOf(strings.LastIndexByte),
		"LastIndexFunc":  reflect.ValueOf(strings.LastIndexFunc),
		"Map":            reflect.ValueOf(strings.Map),
		"NewReader":      reflect.ValueOf(strings.NewReader),
		"NewReplacer":    reflect.ValueOf(strings.NewReplacer),
		"Repeat":         reflect.ValueOf(strings.Repeat),
		"Replace":        reflect.ValueOf(strings.Replace),
		"ReplaceAll":     reflect.ValueOf(strings.ReplaceAll),
		"Split":          reflect.ValueOf(strings.Split),
		"SplitAfter":     reflect.ValueOf(strings.SplitAfter),
		"SplitAfterN":    reflect.ValueOf(strings.SplitAfterN),
		"SplitN":         reflect.ValueOf(strings.SplitN),
		"Title":          reflect.ValueOf(strings.Title),
		"ToLower":        reflect.ValueOf(strings.ToLower),
		"ToLowerSpecial": reflect.ValueOf(strings.ToLowerSpecial),
		"ToTitle":        reflect.ValueOf(strings.ToTitle),
		"ToTitleSpecial": reflect.ValueOf(strings.ToTitleSpecial),
		"ToUpper":        reflect.ValueOf(strings.ToUpper),
		"ToUpperSpecial": reflect.ValueOf(strings.ToUpperSpecial),
		"ToValidUTF8":    reflect.ValueOf(strings.ToValidUTF8),
		"Trim":           reflect.ValueOf(strings.Trim),
		"TrimFunc":       reflect.ValueOf(strings.TrimFunc),
		"TrimLeft":       reflect.ValueOf(strings.TrimLeft),
		"TrimLeftFunc":   reflect.ValueOf(strings.TrimLeftFunc),
		"TrimPrefix":     reflect.ValueOf(strings.TrimPrefix),
		"TrimRight":      reflect.ValueOf(strings.TrimRight),
		"TrimRightFunc":  reflect.ValueOf(strings.TrimRightFunc),
		"TrimSpace":      reflect.ValueOf(strings.TrimSpace),
		"TrimSuffix":     reflect.ValueOf(strings.TrimSuffix),

		// type definitions
		"Builder":  reflect.ValueOf((*strings.Builder)(nil)),
		"Reader":   reflect.ValueOf((*strings.Reader)(nil)),
		"Replacer": reflect.ValueOf((*strings.Replacer)(nil)),
	}
}

func init_time() {
	Symbols["time"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ANSIC":                  reflect.ValueOf(constant.MakeFromLiteral("\"Mon Jan _2 15:04:05 2006\"", token.STRING, 0)),
		"After":                  reflect.ValueOf(time.After),
		"AfterFunc":              reflect.ValueOf(time.AfterFunc),
		"April":                  reflect.ValueOf(time.April),
		"August":                 reflect.ValueOf(time.August),
		"Date":                   reflect.ValueOf(time.Date),
		"December":               reflect.ValueOf(time.December),
		"February":               reflect.ValueOf(time.February),
		"FixedZone":              reflect.ValueOf(time.FixedZone),
		"Friday":                 reflect.ValueOf(time.Friday),
		"Hour":                   reflect.ValueOf(time.Hour),
		"January":                reflect.ValueOf(time.January),
		"July":                   reflect.ValueOf(time.July),
		"June":                   reflect.ValueOf(time.June),
		"Kitchen":                reflect.ValueOf(constant.MakeFromLiteral("\"3:04PM\"", token.STRING, 0)),
		"LoadLocation":           reflect.ValueOf(time.LoadLocation),
		"LoadLocationFromTZData": reflect.ValueOf(time.LoadLocationFromTZData),
		"Local":                  reflect.ValueOf(&time.Local).Elem(),
		"March":                  reflect.ValueOf(time.March),
		"May":                    reflect.ValueOf(time.May),
		"Microsecond":            reflect.ValueOf(time.Microsecond),
		"Millisecond":            reflect.ValueOf(time.Millisecond),
		"Minute":                 reflect.ValueOf(time.Minute),
		"Monday":                 reflect.ValueOf(time.Monday),
		"Nanosecond":             reflect.ValueOf(time.Nanosecond),
		"NewTicker":              reflect.ValueOf(time.NewTicker),
		"NewTimer":               reflect.ValueOf(time.NewTimer),
		"November":               reflect.ValueOf(time.November),
		"Now":                    reflect.ValueOf(time.Now),
		"October":                reflect.ValueOf(time.October),
		"Parse":                  reflect.ValueOf(time.Parse),
		"ParseDuration":          reflect.ValueOf(time.ParseDuration),
		"ParseInLocation":        reflect.ValueOf(time.ParseInLocation),
		"RFC1123":                reflect.ValueOf(constant.MakeFromLiteral("\"Mon, 02 Jan 2006 15:04:05 MST\"", token.STRING, 0)),
		"RFC1123Z":               reflect.ValueOf(constant.MakeFromLiteral("\"Mon, 02 Jan 2006 15:04:05 -0700\"", token.STRING, 0)),
		"RFC3339":                reflect.ValueOf(constant.MakeFromLiteral("\"2006-01-02T15:04:05Z07:00\"", token.STRING, 0)),
		"RFC3339Nano":            reflect.ValueOf(constant.MakeFromLiteral("\"2006-01-02T15:04:05.999999999Z07:00\"", token.STRING, 0)),
		"RFC822":                 reflect.ValueOf(constant.MakeFromLiteral("\"02 Jan 06 15:04 MST\"", token.STRING, 0)),
		"RFC822Z":                reflect.ValueOf(constant.MakeFromLiteral("\"02 Jan 06 15:04 -0700\"", token.STRING, 0)),
		"RFC850":                 reflect.ValueOf(constant.MakeFromLiteral("\"Monday, 02-Jan-06 15:04:05 MST\"", token.STRING, 0)),
		"RubyDate":               reflect.ValueOf(constant.MakeFromLiteral("\"Mon Jan 02 15:04:05 -0700 2006\"", token.STRING, 0)),
		"Saturday":               reflect.ValueOf(time.Saturday),
		"Second":                 reflect.ValueOf(time.Second),
		"September":              reflect.ValueOf(time.September),
		"Since":                  reflect.ValueOf(time.Since),
		"Sleep":                  reflect.ValueOf(time.Sleep),
		"Stamp":                  reflect.ValueOf(constant.MakeFromLiteral("\"Jan _2 15:04:05\"", token.STRING, 0)),
		"StampMicro":             reflect.ValueOf(constant.MakeFromLiteral("\"Jan _2 15:04:05.000000\"", token.STRING, 0)),
		"StampMilli":             reflect.ValueOf(constant.MakeFromLiteral("\"Jan _2 15:04:05.000\"", token.STRING, 0)),
		"StampNano":              reflect.ValueOf(constant.MakeFromLiteral("\"Jan _2 15:04:05.000000000\"", token.STRING, 0)),
		"Sunday":                 reflect.ValueOf(time.Sunday),
		"Thursday":               reflect.ValueOf(time.Thursday),
		"Tick":                   reflect.ValueOf(time.Tick),
		"Tuesday":                reflect.ValueOf(time.Tuesday),
		"UTC":                    reflect.ValueOf(&time.UTC).Elem(),
		"Unix":                   reflect.ValueOf(time.Unix),
		"UnixDate":               reflect.ValueOf(constant.MakeFromLiteral("\"Mon Jan _2 15:04:05 MST 2006\"", token.STRING, 0)),
		"Until":                  reflect.ValueOf(time.Until),
		"Wednesday":              reflect.ValueOf(time.Wednesday),

		// type definitions
		"Duration":   reflect.ValueOf((*time.Duration)(nil)),
		"Location":   reflect.ValueOf((*time.Location)(nil)),
		"Month":      reflect.ValueOf((*time.Month)(nil)),
		"ParseError": reflect.ValueOf((*time.ParseError)(nil)),
		"Ticker":     reflect.ValueOf((*time.Ticker)(nil)),
		"Time":       reflect.ValueOf((*time.Time)(nil)),
		"Timer":      reflect.ValueOf((*time.Timer)(nil)),
		"Weekday":    reflect.ValueOf((*time.Weekday)(nil)),
	}
}
