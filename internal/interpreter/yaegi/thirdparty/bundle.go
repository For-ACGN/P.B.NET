// Code generated by script/code/yaegi/thirdparty_test.go. DO NOT EDIT.

package thirdparty

import (
	"crypto"
	"go/constant"
	"go/token"
	"io"
	"net"
	"reflect"

	"github.com/pelletier/go-toml"
	"github.com/pkg/errors"
	"github.com/vmihailenco/msgpack/v5"
	"github.com/vmihailenco/msgpack/v5/msgpcode"
	"golang.org/x/crypto/ssh"
)

// Symbols stores the map of unsafe package symbols.
var Symbols = map[string]map[string]reflect.Value{}

func init() {
	init_github_com_pelletier_go_toml()
	init_github_com_pkg_errors()
	init_github_com_vmihailenco_msgpack_v5()
	init_github_com_vmihailenco_msgpack_v5_msgpcode()
	init_golang_org_x_crypto_ssh()
}

func init_github_com_pelletier_go_toml() {
	Symbols["github.com/pelletier/go-toml"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Load":               reflect.ValueOf(toml.Load),
		"LoadBytes":          reflect.ValueOf(toml.LoadBytes),
		"LoadFile":           reflect.ValueOf(toml.LoadFile),
		"LoadReader":         reflect.ValueOf(toml.LoadReader),
		"LocalDateOf":        reflect.ValueOf(toml.LocalDateOf),
		"LocalDateTimeOf":    reflect.ValueOf(toml.LocalDateTimeOf),
		"LocalTimeOf":        reflect.ValueOf(toml.LocalTimeOf),
		"Marshal":            reflect.ValueOf(toml.Marshal),
		"NewDecoder":         reflect.ValueOf(toml.NewDecoder),
		"NewEncoder":         reflect.ValueOf(toml.NewEncoder),
		"OrderAlphabetical":  reflect.ValueOf(toml.OrderAlphabetical),
		"OrderPreserve":      reflect.ValueOf(toml.OrderPreserve),
		"ParseLocalDate":     reflect.ValueOf(toml.ParseLocalDate),
		"ParseLocalDateTime": reflect.ValueOf(toml.ParseLocalDateTime),
		"ParseLocalTime":     reflect.ValueOf(toml.ParseLocalTime),
		"TreeFromMap":        reflect.ValueOf(toml.TreeFromMap),
		"Unmarshal":          reflect.ValueOf(toml.Unmarshal),

		// type definitions
		"Decoder":       reflect.ValueOf((*toml.Decoder)(nil)),
		"Encoder":       reflect.ValueOf((*toml.Encoder)(nil)),
		"LocalDate":     reflect.ValueOf((*toml.LocalDate)(nil)),
		"LocalDateTime": reflect.ValueOf((*toml.LocalDateTime)(nil)),
		"LocalTime":     reflect.ValueOf((*toml.LocalTime)(nil)),
		"Marshaler":     reflect.ValueOf((*toml.Marshaler)(nil)),
		"Position":      reflect.ValueOf((*toml.Position)(nil)),
		"SetOptions":    reflect.ValueOf((*toml.SetOptions)(nil)),
		"Tree":          reflect.ValueOf((*toml.Tree)(nil)),
		"Unmarshaler":   reflect.ValueOf((*toml.Unmarshaler)(nil)),

		// interface wrapper definitions
		"_Marshaler":   reflect.ValueOf((*_github_com_pelletier_go_toml_Marshaler)(nil)),
		"_Unmarshaler": reflect.ValueOf((*_github_com_pelletier_go_toml_Unmarshaler)(nil)),
	}
}

// _github_com_pelletier_go_toml_Marshaler is an interface wrapper for Marshaler type
type _github_com_pelletier_go_toml_Marshaler struct {
	WMarshalTOML func() ([]byte, error)
}

func (W _github_com_pelletier_go_toml_Marshaler) MarshalTOML() ([]byte, error) {
	return W.WMarshalTOML()
}

// _github_com_pelletier_go_toml_Unmarshaler is an interface wrapper for Unmarshaler type
type _github_com_pelletier_go_toml_Unmarshaler struct {
	WUnmarshalTOML func(a0 interface{}) error
}

func (W _github_com_pelletier_go_toml_Unmarshaler) UnmarshalTOML(a0 interface{}) error {
	return W.WUnmarshalTOML(a0)
}

func init_github_com_pkg_errors() {
	Symbols["github.com/pkg/errors"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"As":           reflect.ValueOf(errors.As),
		"Cause":        reflect.ValueOf(errors.Cause),
		"Errorf":       reflect.ValueOf(errors.Errorf),
		"Is":           reflect.ValueOf(errors.Is),
		"New":          reflect.ValueOf(errors.New),
		"Unwrap":       reflect.ValueOf(errors.Unwrap),
		"WithMessage":  reflect.ValueOf(errors.WithMessage),
		"WithMessagef": reflect.ValueOf(errors.WithMessagef),
		"WithStack":    reflect.ValueOf(errors.WithStack),
		"Wrap":         reflect.ValueOf(errors.Wrap),
		"Wrapf":        reflect.ValueOf(errors.Wrapf),

		// type definitions
		"Frame":      reflect.ValueOf((*errors.Frame)(nil)),
		"StackTrace": reflect.ValueOf((*errors.StackTrace)(nil)),
	}
}

func init_github_com_vmihailenco_msgpack_v5() {
	Symbols["github.com/vmihailenco/msgpack/v5"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"GetDecoder":         reflect.ValueOf(msgpack.GetDecoder),
		"GetEncoder":         reflect.ValueOf(msgpack.GetEncoder),
		"Marshal":            reflect.ValueOf(msgpack.Marshal),
		"NewDecoder":         reflect.ValueOf(msgpack.NewDecoder),
		"NewEncoder":         reflect.ValueOf(msgpack.NewEncoder),
		"PutDecoder":         reflect.ValueOf(msgpack.PutDecoder),
		"PutEncoder":         reflect.ValueOf(msgpack.PutEncoder),
		"Register":           reflect.ValueOf(msgpack.Register),
		"RegisterExt":        reflect.ValueOf(msgpack.RegisterExt),
		"RegisterExtDecoder": reflect.ValueOf(msgpack.RegisterExtDecoder),
		"RegisterExtEncoder": reflect.ValueOf(msgpack.RegisterExtEncoder),
		"Unmarshal":          reflect.ValueOf(msgpack.Unmarshal),
		"UnregisterExt":      reflect.ValueOf(msgpack.UnregisterExt),

		// type definitions
		"CustomDecoder":        reflect.ValueOf((*msgpack.CustomDecoder)(nil)),
		"CustomEncoder":        reflect.ValueOf((*msgpack.CustomEncoder)(nil)),
		"Decoder":              reflect.ValueOf((*msgpack.Decoder)(nil)),
		"Encoder":              reflect.ValueOf((*msgpack.Encoder)(nil)),
		"Marshaler":            reflect.ValueOf((*msgpack.Marshaler)(nil)),
		"MarshalerUnmarshaler": reflect.ValueOf((*msgpack.MarshalerUnmarshaler)(nil)),
		"RawMessage":           reflect.ValueOf((*msgpack.RawMessage)(nil)),
		"Unmarshaler":          reflect.ValueOf((*msgpack.Unmarshaler)(nil)),

		// interface wrapper definitions
		"_CustomDecoder":        reflect.ValueOf((*_github_com_vmihailenco_msgpack_v5_CustomDecoder)(nil)),
		"_CustomEncoder":        reflect.ValueOf((*_github_com_vmihailenco_msgpack_v5_CustomEncoder)(nil)),
		"_Marshaler":            reflect.ValueOf((*_github_com_vmihailenco_msgpack_v5_Marshaler)(nil)),
		"_MarshalerUnmarshaler": reflect.ValueOf((*_github_com_vmihailenco_msgpack_v5_MarshalerUnmarshaler)(nil)),
		"_Unmarshaler":          reflect.ValueOf((*_github_com_vmihailenco_msgpack_v5_Unmarshaler)(nil)),
	}
}

// _github_com_vmihailenco_msgpack_v5_CustomDecoder is an interface wrapper for CustomDecoder type
type _github_com_vmihailenco_msgpack_v5_CustomDecoder struct {
	WDecodeMsgpack func(a0 *msgpack.Decoder) error
}

func (W _github_com_vmihailenco_msgpack_v5_CustomDecoder) DecodeMsgpack(a0 *msgpack.Decoder) error {
	return W.WDecodeMsgpack(a0)
}

// _github_com_vmihailenco_msgpack_v5_CustomEncoder is an interface wrapper for CustomEncoder type
type _github_com_vmihailenco_msgpack_v5_CustomEncoder struct {
	WEncodeMsgpack func(a0 *msgpack.Encoder) error
}

func (W _github_com_vmihailenco_msgpack_v5_CustomEncoder) EncodeMsgpack(a0 *msgpack.Encoder) error {
	return W.WEncodeMsgpack(a0)
}

// _github_com_vmihailenco_msgpack_v5_Marshaler is an interface wrapper for Marshaler type
type _github_com_vmihailenco_msgpack_v5_Marshaler struct {
	WMarshalMsgpack func() ([]byte, error)
}

func (W _github_com_vmihailenco_msgpack_v5_Marshaler) MarshalMsgpack() ([]byte, error) {
	return W.WMarshalMsgpack()
}

// _github_com_vmihailenco_msgpack_v5_MarshalerUnmarshaler is an interface wrapper for MarshalerUnmarshaler type
type _github_com_vmihailenco_msgpack_v5_MarshalerUnmarshaler struct {
	WMarshalMsgpack   func() ([]byte, error)
	WUnmarshalMsgpack func(a0 []byte) error
}

func (W _github_com_vmihailenco_msgpack_v5_MarshalerUnmarshaler) MarshalMsgpack() ([]byte, error) {
	return W.WMarshalMsgpack()
}
func (W _github_com_vmihailenco_msgpack_v5_MarshalerUnmarshaler) UnmarshalMsgpack(a0 []byte) error {
	return W.WUnmarshalMsgpack(a0)
}

// _github_com_vmihailenco_msgpack_v5_Unmarshaler is an interface wrapper for Unmarshaler type
type _github_com_vmihailenco_msgpack_v5_Unmarshaler struct {
	WUnmarshalMsgpack func(a0 []byte) error
}

func (W _github_com_vmihailenco_msgpack_v5_Unmarshaler) UnmarshalMsgpack(a0 []byte) error {
	return W.WUnmarshalMsgpack(a0)
}

func init_github_com_vmihailenco_msgpack_v5_msgpcode() {
	Symbols["github.com/vmihailenco/msgpack/v5/msgpcode"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Array16":         reflect.ValueOf(&msgpcode.Array16).Elem(),
		"Array32":         reflect.ValueOf(&msgpcode.Array32).Elem(),
		"Bin16":           reflect.ValueOf(&msgpcode.Bin16).Elem(),
		"Bin32":           reflect.ValueOf(&msgpcode.Bin32).Elem(),
		"Bin8":            reflect.ValueOf(&msgpcode.Bin8).Elem(),
		"Double":          reflect.ValueOf(&msgpcode.Double).Elem(),
		"Ext16":           reflect.ValueOf(&msgpcode.Ext16).Elem(),
		"Ext32":           reflect.ValueOf(&msgpcode.Ext32).Elem(),
		"Ext8":            reflect.ValueOf(&msgpcode.Ext8).Elem(),
		"False":           reflect.ValueOf(&msgpcode.False).Elem(),
		"FixExt1":         reflect.ValueOf(&msgpcode.FixExt1).Elem(),
		"FixExt16":        reflect.ValueOf(&msgpcode.FixExt16).Elem(),
		"FixExt2":         reflect.ValueOf(&msgpcode.FixExt2).Elem(),
		"FixExt4":         reflect.ValueOf(&msgpcode.FixExt4).Elem(),
		"FixExt8":         reflect.ValueOf(&msgpcode.FixExt8).Elem(),
		"FixedArrayHigh":  reflect.ValueOf(&msgpcode.FixedArrayHigh).Elem(),
		"FixedArrayLow":   reflect.ValueOf(&msgpcode.FixedArrayLow).Elem(),
		"FixedArrayMask":  reflect.ValueOf(&msgpcode.FixedArrayMask).Elem(),
		"FixedMapHigh":    reflect.ValueOf(&msgpcode.FixedMapHigh).Elem(),
		"FixedMapLow":     reflect.ValueOf(&msgpcode.FixedMapLow).Elem(),
		"FixedMapMask":    reflect.ValueOf(&msgpcode.FixedMapMask).Elem(),
		"FixedStrHigh":    reflect.ValueOf(&msgpcode.FixedStrHigh).Elem(),
		"FixedStrLow":     reflect.ValueOf(&msgpcode.FixedStrLow).Elem(),
		"FixedStrMask":    reflect.ValueOf(&msgpcode.FixedStrMask).Elem(),
		"Float":           reflect.ValueOf(&msgpcode.Float).Elem(),
		"Int16":           reflect.ValueOf(&msgpcode.Int16).Elem(),
		"Int32":           reflect.ValueOf(&msgpcode.Int32).Elem(),
		"Int64":           reflect.ValueOf(&msgpcode.Int64).Elem(),
		"Int8":            reflect.ValueOf(&msgpcode.Int8).Elem(),
		"IsBin":           reflect.ValueOf(msgpcode.IsBin),
		"IsExt":           reflect.ValueOf(msgpcode.IsExt),
		"IsFixedArray":    reflect.ValueOf(msgpcode.IsFixedArray),
		"IsFixedExt":      reflect.ValueOf(msgpcode.IsFixedExt),
		"IsFixedMap":      reflect.ValueOf(msgpcode.IsFixedMap),
		"IsFixedNum":      reflect.ValueOf(msgpcode.IsFixedNum),
		"IsFixedString":   reflect.ValueOf(msgpcode.IsFixedString),
		"IsString":        reflect.ValueOf(msgpcode.IsString),
		"Map16":           reflect.ValueOf(&msgpcode.Map16).Elem(),
		"Map32":           reflect.ValueOf(&msgpcode.Map32).Elem(),
		"NegFixedNumLow":  reflect.ValueOf(&msgpcode.NegFixedNumLow).Elem(),
		"Nil":             reflect.ValueOf(&msgpcode.Nil).Elem(),
		"PosFixedNumHigh": reflect.ValueOf(&msgpcode.PosFixedNumHigh).Elem(),
		"Str16":           reflect.ValueOf(&msgpcode.Str16).Elem(),
		"Str32":           reflect.ValueOf(&msgpcode.Str32).Elem(),
		"Str8":            reflect.ValueOf(&msgpcode.Str8).Elem(),
		"True":            reflect.ValueOf(&msgpcode.True).Elem(),
		"Uint16":          reflect.ValueOf(&msgpcode.Uint16).Elem(),
		"Uint32":          reflect.ValueOf(&msgpcode.Uint32).Elem(),
		"Uint64":          reflect.ValueOf(&msgpcode.Uint64).Elem(),
		"Uint8":           reflect.ValueOf(&msgpcode.Uint8).Elem(),
	}
}

func init_golang_org_x_crypto_ssh() {
	Symbols["golang.org/x/crypto/ssh"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BannerDisplayStderr":              reflect.ValueOf(ssh.BannerDisplayStderr),
		"CS7":                              reflect.ValueOf(constant.MakeFromLiteral("90", token.INT, 0)),
		"CS8":                              reflect.ValueOf(constant.MakeFromLiteral("91", token.INT, 0)),
		"CertAlgoDSAv01":                   reflect.ValueOf(constant.MakeFromLiteral("\"ssh-dss-cert-v01@openssh.com\"", token.STRING, 0)),
		"CertAlgoECDSA256v01":              reflect.ValueOf(constant.MakeFromLiteral("\"ecdsa-sha2-nistp256-cert-v01@openssh.com\"", token.STRING, 0)),
		"CertAlgoECDSA384v01":              reflect.ValueOf(constant.MakeFromLiteral("\"ecdsa-sha2-nistp384-cert-v01@openssh.com\"", token.STRING, 0)),
		"CertAlgoECDSA521v01":              reflect.ValueOf(constant.MakeFromLiteral("\"ecdsa-sha2-nistp521-cert-v01@openssh.com\"", token.STRING, 0)),
		"CertAlgoED25519v01":               reflect.ValueOf(constant.MakeFromLiteral("\"ssh-ed25519-cert-v01@openssh.com\"", token.STRING, 0)),
		"CertAlgoRSAv01":                   reflect.ValueOf(constant.MakeFromLiteral("\"ssh-rsa-cert-v01@openssh.com\"", token.STRING, 0)),
		"CertAlgoSKECDSA256v01":            reflect.ValueOf(constant.MakeFromLiteral("\"sk-ecdsa-sha2-nistp256-cert-v01@openssh.com\"", token.STRING, 0)),
		"CertAlgoSKED25519v01":             reflect.ValueOf(constant.MakeFromLiteral("\"sk-ssh-ed25519-cert-v01@openssh.com\"", token.STRING, 0)),
		"CertTimeInfinity":                 reflect.ValueOf(constant.MakeFromLiteral("18446744073709551615", token.INT, 0)),
		"ConnectionFailed":                 reflect.ValueOf(ssh.ConnectionFailed),
		"Dial":                             reflect.ValueOf(ssh.Dial),
		"DiscardRequests":                  reflect.ValueOf(ssh.DiscardRequests),
		"ECHO":                             reflect.ValueOf(constant.MakeFromLiteral("53", token.INT, 0)),
		"ECHOCTL":                          reflect.ValueOf(constant.MakeFromLiteral("60", token.INT, 0)),
		"ECHOE":                            reflect.ValueOf(constant.MakeFromLiteral("54", token.INT, 0)),
		"ECHOK":                            reflect.ValueOf(constant.MakeFromLiteral("55", token.INT, 0)),
		"ECHOKE":                           reflect.ValueOf(constant.MakeFromLiteral("61", token.INT, 0)),
		"ECHONL":                           reflect.ValueOf(constant.MakeFromLiteral("56", token.INT, 0)),
		"ErrNoAuth":                        reflect.ValueOf(&ssh.ErrNoAuth).Elem(),
		"FingerprintLegacyMD5":             reflect.ValueOf(ssh.FingerprintLegacyMD5),
		"FingerprintSHA256":                reflect.ValueOf(ssh.FingerprintSHA256),
		"FixedHostKey":                     reflect.ValueOf(ssh.FixedHostKey),
		"GSSAPIWithMICAuthMethod":          reflect.ValueOf(ssh.GSSAPIWithMICAuthMethod),
		"HostCert":                         reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"ICANON":                           reflect.ValueOf(constant.MakeFromLiteral("51", token.INT, 0)),
		"ICRNL":                            reflect.ValueOf(constant.MakeFromLiteral("36", token.INT, 0)),
		"IEXTEN":                           reflect.ValueOf(constant.MakeFromLiteral("59", token.INT, 0)),
		"IGNCR":                            reflect.ValueOf(constant.MakeFromLiteral("35", token.INT, 0)),
		"IGNPAR":                           reflect.ValueOf(constant.MakeFromLiteral("30", token.INT, 0)),
		"IMAXBEL":                          reflect.ValueOf(constant.MakeFromLiteral("41", token.INT, 0)),
		"INLCR":                            reflect.ValueOf(constant.MakeFromLiteral("34", token.INT, 0)),
		"INPCK":                            reflect.ValueOf(constant.MakeFromLiteral("32", token.INT, 0)),
		"ISIG":                             reflect.ValueOf(constant.MakeFromLiteral("50", token.INT, 0)),
		"ISTRIP":                           reflect.ValueOf(constant.MakeFromLiteral("33", token.INT, 0)),
		"IUCLC":                            reflect.ValueOf(constant.MakeFromLiteral("37", token.INT, 0)),
		"IXANY":                            reflect.ValueOf(constant.MakeFromLiteral("39", token.INT, 0)),
		"IXOFF":                            reflect.ValueOf(constant.MakeFromLiteral("40", token.INT, 0)),
		"IXON":                             reflect.ValueOf(constant.MakeFromLiteral("38", token.INT, 0)),
		"InsecureIgnoreHostKey":            reflect.ValueOf(ssh.InsecureIgnoreHostKey),
		"KeyAlgoDSA":                       reflect.ValueOf(constant.MakeFromLiteral("\"ssh-dss\"", token.STRING, 0)),
		"KeyAlgoECDSA256":                  reflect.ValueOf(constant.MakeFromLiteral("\"ecdsa-sha2-nistp256\"", token.STRING, 0)),
		"KeyAlgoECDSA384":                  reflect.ValueOf(constant.MakeFromLiteral("\"ecdsa-sha2-nistp384\"", token.STRING, 0)),
		"KeyAlgoECDSA521":                  reflect.ValueOf(constant.MakeFromLiteral("\"ecdsa-sha2-nistp521\"", token.STRING, 0)),
		"KeyAlgoED25519":                   reflect.ValueOf(constant.MakeFromLiteral("\"ssh-ed25519\"", token.STRING, 0)),
		"KeyAlgoRSA":                       reflect.ValueOf(constant.MakeFromLiteral("\"ssh-rsa\"", token.STRING, 0)),
		"KeyAlgoSKECDSA256":                reflect.ValueOf(constant.MakeFromLiteral("\"sk-ecdsa-sha2-nistp256@openssh.com\"", token.STRING, 0)),
		"KeyAlgoSKED25519":                 reflect.ValueOf(constant.MakeFromLiteral("\"sk-ssh-ed25519@openssh.com\"", token.STRING, 0)),
		"KeyboardInteractive":              reflect.ValueOf(ssh.KeyboardInteractive),
		"Marshal":                          reflect.ValueOf(ssh.Marshal),
		"MarshalAuthorizedKey":             reflect.ValueOf(ssh.MarshalAuthorizedKey),
		"NOFLSH":                           reflect.ValueOf(constant.MakeFromLiteral("57", token.INT, 0)),
		"NewCertSigner":                    reflect.ValueOf(ssh.NewCertSigner),
		"NewClient":                        reflect.ValueOf(ssh.NewClient),
		"NewClientConn":                    reflect.ValueOf(ssh.NewClientConn),
		"NewPublicKey":                     reflect.ValueOf(ssh.NewPublicKey),
		"NewServerConn":                    reflect.ValueOf(ssh.NewServerConn),
		"NewSignerFromKey":                 reflect.ValueOf(ssh.NewSignerFromKey),
		"NewSignerFromSigner":              reflect.ValueOf(ssh.NewSignerFromSigner),
		"OCRNL":                            reflect.ValueOf(constant.MakeFromLiteral("73", token.INT, 0)),
		"OLCUC":                            reflect.ValueOf(constant.MakeFromLiteral("71", token.INT, 0)),
		"ONLCR":                            reflect.ValueOf(constant.MakeFromLiteral("72", token.INT, 0)),
		"ONLRET":                           reflect.ValueOf(constant.MakeFromLiteral("75", token.INT, 0)),
		"ONOCR":                            reflect.ValueOf(constant.MakeFromLiteral("74", token.INT, 0)),
		"OPOST":                            reflect.ValueOf(constant.MakeFromLiteral("70", token.INT, 0)),
		"PARENB":                           reflect.ValueOf(constant.MakeFromLiteral("92", token.INT, 0)),
		"PARMRK":                           reflect.ValueOf(constant.MakeFromLiteral("31", token.INT, 0)),
		"PARODD":                           reflect.ValueOf(constant.MakeFromLiteral("93", token.INT, 0)),
		"PENDIN":                           reflect.ValueOf(constant.MakeFromLiteral("62", token.INT, 0)),
		"ParseAuthorizedKey":               reflect.ValueOf(ssh.ParseAuthorizedKey),
		"ParseDSAPrivateKey":               reflect.ValueOf(ssh.ParseDSAPrivateKey),
		"ParseKnownHosts":                  reflect.ValueOf(ssh.ParseKnownHosts),
		"ParsePrivateKey":                  reflect.ValueOf(ssh.ParsePrivateKey),
		"ParsePrivateKeyWithPassphrase":    reflect.ValueOf(ssh.ParsePrivateKeyWithPassphrase),
		"ParsePublicKey":                   reflect.ValueOf(ssh.ParsePublicKey),
		"ParseRawPrivateKey":               reflect.ValueOf(ssh.ParseRawPrivateKey),
		"ParseRawPrivateKeyWithPassphrase": reflect.ValueOf(ssh.ParseRawPrivateKeyWithPassphrase),
		"Password":                         reflect.ValueOf(ssh.Password),
		"PasswordCallback":                 reflect.ValueOf(ssh.PasswordCallback),
		"Prohibited":                       reflect.ValueOf(ssh.Prohibited),
		"PublicKeys":                       reflect.ValueOf(ssh.PublicKeys),
		"PublicKeysCallback":               reflect.ValueOf(ssh.PublicKeysCallback),
		"ResourceShortage":                 reflect.ValueOf(ssh.ResourceShortage),
		"RetryableAuthMethod":              reflect.ValueOf(ssh.RetryableAuthMethod),
		"SIGABRT":                          reflect.ValueOf(ssh.SIGABRT),
		"SIGALRM":                          reflect.ValueOf(ssh.SIGALRM),
		"SIGFPE":                           reflect.ValueOf(ssh.SIGFPE),
		"SIGHUP":                           reflect.ValueOf(ssh.SIGHUP),
		"SIGILL":                           reflect.ValueOf(ssh.SIGILL),
		"SIGINT":                           reflect.ValueOf(ssh.SIGINT),
		"SIGKILL":                          reflect.ValueOf(ssh.SIGKILL),
		"SIGPIPE":                          reflect.ValueOf(ssh.SIGPIPE),
		"SIGQUIT":                          reflect.ValueOf(ssh.SIGQUIT),
		"SIGSEGV":                          reflect.ValueOf(ssh.SIGSEGV),
		"SIGTERM":                          reflect.ValueOf(ssh.SIGTERM),
		"SIGUSR1":                          reflect.ValueOf(ssh.SIGUSR1),
		"SIGUSR2":                          reflect.ValueOf(ssh.SIGUSR2),
		"SigAlgoRSA":                       reflect.ValueOf(constant.MakeFromLiteral("\"ssh-rsa\"", token.STRING, 0)),
		"SigAlgoRSASHA2256":                reflect.ValueOf(constant.MakeFromLiteral("\"rsa-sha2-256\"", token.STRING, 0)),
		"SigAlgoRSASHA2512":                reflect.ValueOf(constant.MakeFromLiteral("\"rsa-sha2-512\"", token.STRING, 0)),
		"TOSTOP":                           reflect.ValueOf(constant.MakeFromLiteral("58", token.INT, 0)),
		"TTY_OP_ISPEED":                    reflect.ValueOf(constant.MakeFromLiteral("128", token.INT, 0)),
		"TTY_OP_OSPEED":                    reflect.ValueOf(constant.MakeFromLiteral("129", token.INT, 0)),
		"UnknownChannelType":               reflect.ValueOf(ssh.UnknownChannelType),
		"Unmarshal":                        reflect.ValueOf(ssh.Unmarshal),
		"UserCert":                         reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"VDISCARD":                         reflect.ValueOf(constant.MakeFromLiteral("18", token.INT, 0)),
		"VDSUSP":                           reflect.ValueOf(constant.MakeFromLiteral("11", token.INT, 0)),
		"VEOF":                             reflect.ValueOf(constant.MakeFromLiteral("5", token.INT, 0)),
		"VEOL":                             reflect.ValueOf(constant.MakeFromLiteral("6", token.INT, 0)),
		"VEOL2":                            reflect.ValueOf(constant.MakeFromLiteral("7", token.INT, 0)),
		"VERASE":                           reflect.ValueOf(constant.MakeFromLiteral("3", token.INT, 0)),
		"VFLUSH":                           reflect.ValueOf(constant.MakeFromLiteral("15", token.INT, 0)),
		"VINTR":                            reflect.ValueOf(constant.MakeFromLiteral("1", token.INT, 0)),
		"VKILL":                            reflect.ValueOf(constant.MakeFromLiteral("4", token.INT, 0)),
		"VLNEXT":                           reflect.ValueOf(constant.MakeFromLiteral("14", token.INT, 0)),
		"VQUIT":                            reflect.ValueOf(constant.MakeFromLiteral("2", token.INT, 0)),
		"VREPRINT":                         reflect.ValueOf(constant.MakeFromLiteral("12", token.INT, 0)),
		"VSTART":                           reflect.ValueOf(constant.MakeFromLiteral("8", token.INT, 0)),
		"VSTATUS":                          reflect.ValueOf(constant.MakeFromLiteral("17", token.INT, 0)),
		"VSTOP":                            reflect.ValueOf(constant.MakeFromLiteral("9", token.INT, 0)),
		"VSUSP":                            reflect.ValueOf(constant.MakeFromLiteral("10", token.INT, 0)),
		"VSWTCH":                           reflect.ValueOf(constant.MakeFromLiteral("16", token.INT, 0)),
		"VWERASE":                          reflect.ValueOf(constant.MakeFromLiteral("13", token.INT, 0)),
		"XCASE":                            reflect.ValueOf(constant.MakeFromLiteral("52", token.INT, 0)),

		// type definitions
		"AlgorithmSigner":              reflect.ValueOf((*ssh.AlgorithmSigner)(nil)),
		"AuthMethod":                   reflect.ValueOf((*ssh.AuthMethod)(nil)),
		"BannerCallback":               reflect.ValueOf((*ssh.BannerCallback)(nil)),
		"CertChecker":                  reflect.ValueOf((*ssh.CertChecker)(nil)),
		"Certificate":                  reflect.ValueOf((*ssh.Certificate)(nil)),
		"Channel":                      reflect.ValueOf((*ssh.Channel)(nil)),
		"Client":                       reflect.ValueOf((*ssh.Client)(nil)),
		"ClientConfig":                 reflect.ValueOf((*ssh.ClientConfig)(nil)),
		"Config":                       reflect.ValueOf((*ssh.Config)(nil)),
		"Conn":                         reflect.ValueOf((*ssh.Conn)(nil)),
		"ConnMetadata":                 reflect.ValueOf((*ssh.ConnMetadata)(nil)),
		"CryptoPublicKey":              reflect.ValueOf((*ssh.CryptoPublicKey)(nil)),
		"ExitError":                    reflect.ValueOf((*ssh.ExitError)(nil)),
		"ExitMissingError":             reflect.ValueOf((*ssh.ExitMissingError)(nil)),
		"GSSAPIClient":                 reflect.ValueOf((*ssh.GSSAPIClient)(nil)),
		"GSSAPIServer":                 reflect.ValueOf((*ssh.GSSAPIServer)(nil)),
		"GSSAPIWithMICConfig":          reflect.ValueOf((*ssh.GSSAPIWithMICConfig)(nil)),
		"HostKeyCallback":              reflect.ValueOf((*ssh.HostKeyCallback)(nil)),
		"KeyboardInteractiveChallenge": reflect.ValueOf((*ssh.KeyboardInteractiveChallenge)(nil)),
		"NewChannel":                   reflect.ValueOf((*ssh.NewChannel)(nil)),
		"OpenChannelError":             reflect.ValueOf((*ssh.OpenChannelError)(nil)),
		"PassphraseMissingError":       reflect.ValueOf((*ssh.PassphraseMissingError)(nil)),
		"Permissions":                  reflect.ValueOf((*ssh.Permissions)(nil)),
		"PublicKey":                    reflect.ValueOf((*ssh.PublicKey)(nil)),
		"RejectionReason":              reflect.ValueOf((*ssh.RejectionReason)(nil)),
		"Request":                      reflect.ValueOf((*ssh.Request)(nil)),
		"ServerAuthError":              reflect.ValueOf((*ssh.ServerAuthError)(nil)),
		"ServerConfig":                 reflect.ValueOf((*ssh.ServerConfig)(nil)),
		"ServerConn":                   reflect.ValueOf((*ssh.ServerConn)(nil)),
		"Session":                      reflect.ValueOf((*ssh.Session)(nil)),
		"Signal":                       reflect.ValueOf((*ssh.Signal)(nil)),
		"Signature":                    reflect.ValueOf((*ssh.Signature)(nil)),
		"Signer":                       reflect.ValueOf((*ssh.Signer)(nil)),
		"TerminalModes":                reflect.ValueOf((*ssh.TerminalModes)(nil)),
		"Waitmsg":                      reflect.ValueOf((*ssh.Waitmsg)(nil)),

		// interface wrapper definitions
		"_AlgorithmSigner": reflect.ValueOf((*_golang_org_x_crypto_ssh_AlgorithmSigner)(nil)),
		"_AuthMethod":      reflect.ValueOf((*_golang_org_x_crypto_ssh_AuthMethod)(nil)),
		"_Channel":         reflect.ValueOf((*_golang_org_x_crypto_ssh_Channel)(nil)),
		"_Conn":            reflect.ValueOf((*_golang_org_x_crypto_ssh_Conn)(nil)),
		"_ConnMetadata":    reflect.ValueOf((*_golang_org_x_crypto_ssh_ConnMetadata)(nil)),
		"_CryptoPublicKey": reflect.ValueOf((*_golang_org_x_crypto_ssh_CryptoPublicKey)(nil)),
		"_GSSAPIClient":    reflect.ValueOf((*_golang_org_x_crypto_ssh_GSSAPIClient)(nil)),
		"_GSSAPIServer":    reflect.ValueOf((*_golang_org_x_crypto_ssh_GSSAPIServer)(nil)),
		"_NewChannel":      reflect.ValueOf((*_golang_org_x_crypto_ssh_NewChannel)(nil)),
		"_PublicKey":       reflect.ValueOf((*_golang_org_x_crypto_ssh_PublicKey)(nil)),
		"_Signer":          reflect.ValueOf((*_golang_org_x_crypto_ssh_Signer)(nil)),
	}
}

// _golang_org_x_crypto_ssh_AlgorithmSigner is an interface wrapper for AlgorithmSigner type
type _golang_org_x_crypto_ssh_AlgorithmSigner struct {
	WPublicKey         func() ssh.PublicKey
	WSign              func(rand io.Reader, data []byte) (*ssh.Signature, error)
	WSignWithAlgorithm func(rand io.Reader, data []byte, algorithm string) (*ssh.Signature, error)
}

func (W _golang_org_x_crypto_ssh_AlgorithmSigner) PublicKey() ssh.PublicKey { return W.WPublicKey() }
func (W _golang_org_x_crypto_ssh_AlgorithmSigner) Sign(rand io.Reader, data []byte) (*ssh.Signature, error) {
	return W.WSign(rand, data)
}
func (W _golang_org_x_crypto_ssh_AlgorithmSigner) SignWithAlgorithm(rand io.Reader, data []byte, algorithm string) (*ssh.Signature, error) {
	return W.WSignWithAlgorithm(rand, data, algorithm)
}

// _golang_org_x_crypto_ssh_AuthMethod is an interface wrapper for AuthMethod type
type _golang_org_x_crypto_ssh_AuthMethod struct {
}

// _golang_org_x_crypto_ssh_Channel is an interface wrapper for Channel type
type _golang_org_x_crypto_ssh_Channel struct {
	WClose       func() error
	WCloseWrite  func() error
	WRead        func(data []byte) (int, error)
	WSendRequest func(name string, wantReply bool, payload []byte) (bool, error)
	WStderr      func() io.ReadWriter
	WWrite       func(data []byte) (int, error)
}

func (W _golang_org_x_crypto_ssh_Channel) Close() error                  { return W.WClose() }
func (W _golang_org_x_crypto_ssh_Channel) CloseWrite() error             { return W.WCloseWrite() }
func (W _golang_org_x_crypto_ssh_Channel) Read(data []byte) (int, error) { return W.WRead(data) }
func (W _golang_org_x_crypto_ssh_Channel) SendRequest(name string, wantReply bool, payload []byte) (bool, error) {
	return W.WSendRequest(name, wantReply, payload)
}
func (W _golang_org_x_crypto_ssh_Channel) Stderr() io.ReadWriter          { return W.WStderr() }
func (W _golang_org_x_crypto_ssh_Channel) Write(data []byte) (int, error) { return W.WWrite(data) }

// _golang_org_x_crypto_ssh_Conn is an interface wrapper for Conn type
type _golang_org_x_crypto_ssh_Conn struct {
	WClientVersion func() []byte
	WClose         func() error
	WLocalAddr     func() net.Addr
	WOpenChannel   func(name string, data []byte) (ssh.Channel, <-chan *ssh.Request, error)
	WRemoteAddr    func() net.Addr
	WSendRequest   func(name string, wantReply bool, payload []byte) (bool, []byte, error)
	WServerVersion func() []byte
	WSessionID     func() []byte
	WUser          func() string
	WWait          func() error
}

func (W _golang_org_x_crypto_ssh_Conn) ClientVersion() []byte { return W.WClientVersion() }
func (W _golang_org_x_crypto_ssh_Conn) Close() error          { return W.WClose() }
func (W _golang_org_x_crypto_ssh_Conn) LocalAddr() net.Addr   { return W.WLocalAddr() }
func (W _golang_org_x_crypto_ssh_Conn) OpenChannel(name string, data []byte) (ssh.Channel, <-chan *ssh.Request, error) {
	return W.WOpenChannel(name, data)
}
func (W _golang_org_x_crypto_ssh_Conn) RemoteAddr() net.Addr { return W.WRemoteAddr() }
func (W _golang_org_x_crypto_ssh_Conn) SendRequest(name string, wantReply bool, payload []byte) (bool, []byte, error) {
	return W.WSendRequest(name, wantReply, payload)
}
func (W _golang_org_x_crypto_ssh_Conn) ServerVersion() []byte { return W.WServerVersion() }
func (W _golang_org_x_crypto_ssh_Conn) SessionID() []byte     { return W.WSessionID() }
func (W _golang_org_x_crypto_ssh_Conn) User() string          { return W.WUser() }
func (W _golang_org_x_crypto_ssh_Conn) Wait() error           { return W.WWait() }

// _golang_org_x_crypto_ssh_ConnMetadata is an interface wrapper for ConnMetadata type
type _golang_org_x_crypto_ssh_ConnMetadata struct {
	WClientVersion func() []byte
	WLocalAddr     func() net.Addr
	WRemoteAddr    func() net.Addr
	WServerVersion func() []byte
	WSessionID     func() []byte
	WUser          func() string
}

func (W _golang_org_x_crypto_ssh_ConnMetadata) ClientVersion() []byte { return W.WClientVersion() }
func (W _golang_org_x_crypto_ssh_ConnMetadata) LocalAddr() net.Addr   { return W.WLocalAddr() }
func (W _golang_org_x_crypto_ssh_ConnMetadata) RemoteAddr() net.Addr  { return W.WRemoteAddr() }
func (W _golang_org_x_crypto_ssh_ConnMetadata) ServerVersion() []byte { return W.WServerVersion() }
func (W _golang_org_x_crypto_ssh_ConnMetadata) SessionID() []byte     { return W.WSessionID() }
func (W _golang_org_x_crypto_ssh_ConnMetadata) User() string          { return W.WUser() }

// _golang_org_x_crypto_ssh_CryptoPublicKey is an interface wrapper for CryptoPublicKey type
type _golang_org_x_crypto_ssh_CryptoPublicKey struct {
	WCryptoPublicKey func() crypto.PublicKey
}

func (W _golang_org_x_crypto_ssh_CryptoPublicKey) CryptoPublicKey() crypto.PublicKey {
	return W.WCryptoPublicKey()
}

// _golang_org_x_crypto_ssh_GSSAPIClient is an interface wrapper for GSSAPIClient type
type _golang_org_x_crypto_ssh_GSSAPIClient struct {
	WDeleteSecContext func() error
	WGetMIC           func(micFiled []byte) ([]byte, error)
	WInitSecContext   func(target string, token []byte, isGSSDelegCreds bool) (outputToken []byte, needContinue bool, err error)
}

func (W _golang_org_x_crypto_ssh_GSSAPIClient) DeleteSecContext() error { return W.WDeleteSecContext() }
func (W _golang_org_x_crypto_ssh_GSSAPIClient) GetMIC(micFiled []byte) ([]byte, error) {
	return W.WGetMIC(micFiled)
}
func (W _golang_org_x_crypto_ssh_GSSAPIClient) InitSecContext(target string, token []byte, isGSSDelegCreds bool) (outputToken []byte, needContinue bool, err error) {
	return W.WInitSecContext(target, token, isGSSDelegCreds)
}

// _golang_org_x_crypto_ssh_GSSAPIServer is an interface wrapper for GSSAPIServer type
type _golang_org_x_crypto_ssh_GSSAPIServer struct {
	WAcceptSecContext func(token []byte) (outputToken []byte, srcName string, needContinue bool, err error)
	WDeleteSecContext func() error
	WVerifyMIC        func(micField []byte, micToken []byte) error
}

func (W _golang_org_x_crypto_ssh_GSSAPIServer) AcceptSecContext(token []byte) (outputToken []byte, srcName string, needContinue bool, err error) {
	return W.WAcceptSecContext(token)
}
func (W _golang_org_x_crypto_ssh_GSSAPIServer) DeleteSecContext() error { return W.WDeleteSecContext() }
func (W _golang_org_x_crypto_ssh_GSSAPIServer) VerifyMIC(micField []byte, micToken []byte) error {
	return W.WVerifyMIC(micField, micToken)
}

// _golang_org_x_crypto_ssh_NewChannel is an interface wrapper for NewChannel type
type _golang_org_x_crypto_ssh_NewChannel struct {
	WAccept      func() (ssh.Channel, <-chan *ssh.Request, error)
	WChannelType func() string
	WExtraData   func() []byte
	WReject      func(reason ssh.RejectionReason, message string) error
}

func (W _golang_org_x_crypto_ssh_NewChannel) Accept() (ssh.Channel, <-chan *ssh.Request, error) {
	return W.WAccept()
}
func (W _golang_org_x_crypto_ssh_NewChannel) ChannelType() string { return W.WChannelType() }
func (W _golang_org_x_crypto_ssh_NewChannel) ExtraData() []byte   { return W.WExtraData() }
func (W _golang_org_x_crypto_ssh_NewChannel) Reject(reason ssh.RejectionReason, message string) error {
	return W.WReject(reason, message)
}

// _golang_org_x_crypto_ssh_PublicKey is an interface wrapper for PublicKey type
type _golang_org_x_crypto_ssh_PublicKey struct {
	WMarshal func() []byte
	WType    func() string
	WVerify  func(data []byte, sig *ssh.Signature) error
}

func (W _golang_org_x_crypto_ssh_PublicKey) Marshal() []byte { return W.WMarshal() }
func (W _golang_org_x_crypto_ssh_PublicKey) Type() string    { return W.WType() }
func (W _golang_org_x_crypto_ssh_PublicKey) Verify(data []byte, sig *ssh.Signature) error {
	return W.WVerify(data, sig)
}

// _golang_org_x_crypto_ssh_Signer is an interface wrapper for Signer type
type _golang_org_x_crypto_ssh_Signer struct {
	WPublicKey func() ssh.PublicKey
	WSign      func(rand io.Reader, data []byte) (*ssh.Signature, error)
}

func (W _golang_org_x_crypto_ssh_Signer) PublicKey() ssh.PublicKey { return W.WPublicKey() }
func (W _golang_org_x_crypto_ssh_Signer) Sign(rand io.Reader, data []byte) (*ssh.Signature, error) {
	return W.WSign(rand, data)
}
