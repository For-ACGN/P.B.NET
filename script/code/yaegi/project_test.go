package yaegi

import (
	"bytes"
	"fmt"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"

	"project/internal/system"
)

func TestExportProject(t *testing.T) {
	const template = `
// Code generated by script/code/yaegi/project_test.go. DO NOT EDIT.

package project

import (
	"go/constant"
	"go/token"
	"net"
	"reflect"

%s)

// Symbols stores the map of unsafe package symbols.
var Symbols = map[string]map[string]reflect.Value{}

func init() {
%s}

%s`

	importBuf := bytes.NewBuffer(make([]byte, 0, 2048))
	initBuf := bytes.NewBuffer(make([]byte, 0, 4096))
	srcBuf := bytes.NewBuffer(make([]byte, 0, 128*1024))

	for _, pkg := range []string{
		"project/internal/convert",
		"project/internal/httptool",
		"project/internal/logger",
		"project/internal/module",
		"project/internal/nettool",
		"project/internal/option",
		"project/internal/patch/json",
		"project/internal/patch/msgpack",
		"project/internal/patch/toml",
		"project/internal/random",
		"project/internal/security",
		"project/internal/system",
		"project/internal/xpanic",
		"project/internal/xreflect",
		"project/internal/xsync",
	} {
		init := strings.NewReplacer("/", "_", ".", "_", "-", "_").Replace(pkg)
		_, _ = fmt.Fprintf(importBuf, "\t\"%s\"\n", pkg)
		_, _ = fmt.Fprintf(initBuf, "\tinit_%s()\n", init)
		code, err := generateCode(pkg, init)
		require.NoError(t, err)
		srcBuf.WriteString(code)
	}

	// generate code
	src := fmt.Sprintf(template[1:], importBuf, initBuf, srcBuf)

	// print and save code
	fmt.Println(src)
	const path = "../../../internal/interpreter/yaegi/project/bundle.go"
	err := system.WriteFile(path, []byte(src))
	require.NoError(t, err)
}

func TestExportProject_Windows(t *testing.T) {
	const template = `
// Code generated by script/code/yaegi/project_test.go. DO NOT EDIT.

// +build windows

package project

import (
	"go/constant"
	"go/token"
	"reflect"

%s)


func init() {
%s}

%s`

	importBuf := bytes.NewBuffer(make([]byte, 0, 2048))
	initBuf := bytes.NewBuffer(make([]byte, 0, 4096))
	srcBuf := bytes.NewBuffer(make([]byte, 0, 128*1024))

	for _, pkg := range []string{
		"project/internal/module/windows/wmi",
		"project/internal/module/windows/privilege",
	} {
		init := strings.NewReplacer("/", "_", ".", "_", "-", "_").Replace(pkg)
		_, _ = fmt.Fprintf(importBuf, "\t\"%s\"\n", pkg)
		_, _ = fmt.Fprintf(initBuf, "\tinit_%s()\n", init)
		code, err := generateCode(pkg, init)
		require.NoError(t, err)
		srcBuf.WriteString(code)
	}

	// generate code
	src := fmt.Sprintf(template[1:], importBuf, initBuf, srcBuf)

	// print and save code
	fmt.Println(src)
	const path = "../../../internal/interpreter/yaegi/project/windows.go"
	err := system.WriteFile(path, []byte(src))
	require.NoError(t, err)
}
