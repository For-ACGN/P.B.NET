package beacon

import (
	"math"
	"sync"
	"time"

	"github.com/pkg/errors"

	"project/internal/convert"
	"project/internal/guid"
	"project/internal/logger"
	"project/internal/xpanic"
)

// syncer is used to make sure every one message will
// be handle once, and start a cleaner to release memory
type syncer struct {
	ctx *Beacon

	expireTime float64

	// key = hex(GUID) value = timestamp
	sendToBeaconGUID    map[guid.GUID]int64
	sendToBeaconGUIDRWM sync.RWMutex
	ackToBeaconGUID     map[guid.GUID]int64
	ackToBeaconGUIDRWM  sync.RWMutex
	answerGUID          map[guid.GUID]int64
	answerGUIDRWM       sync.RWMutex

	// convert guid []byte to *guid.GUID
	mapKeyPool sync.Pool

	stopSignal chan struct{}
	wg         sync.WaitGroup
}

func newSyncer(ctx *Beacon, config *Config) (*syncer, error) {
	cfg := config.Syncer

	if cfg.ExpireTime < 3*time.Second || cfg.ExpireTime > 30*time.Second {
		return nil, errors.New("expire time < 3 seconds or > 30 seconds")
	}

	syncer := syncer{
		ctx:              ctx,
		expireTime:       cfg.ExpireTime.Seconds(),
		sendToBeaconGUID: make(map[guid.GUID]int64),
		ackToBeaconGUID:  make(map[guid.GUID]int64),
		answerGUID:       make(map[guid.GUID]int64),
		stopSignal:       make(chan struct{}),
	}
	syncer.mapKeyPool.New = func() interface{} {
		return guid.GUID{}
	}
	syncer.wg.Add(1)
	go syncer.guidCleaner()
	return &syncer, nil
}

// CheckGUIDSliceTimestamp is used to check GUID is expire, parameter is []byte
func (syncer *syncer) CheckGUIDSliceTimestamp(guid []byte) bool {
	// look internal/guid/guid.go to understand guid[32:40]
	timestamp := convert.BytesToInt64(guid[32:40])
	now := syncer.ctx.global.Now().Unix()
	return math.Abs(float64(now-timestamp)) > syncer.expireTime
}

// CheckGUIDTimestamp is used to check GUID is expire
func (syncer *syncer) CheckGUIDTimestamp(guid *guid.GUID) (bool, int64) {
	now := syncer.ctx.global.Now().Unix()
	timestamp := guid.Timestamp()
	return math.Abs(float64(now-timestamp)) > syncer.expireTime, timestamp
}

// --------------------------code generated by resource/code/syncer.go-----------------------------

func (syncer *syncer) CheckSendToBeaconGUIDSlice(slice []byte) bool {
	key := syncer.mapKeyPool.Get().(guid.GUID)
	defer syncer.mapKeyPool.Put(key)
	copy(key[:], slice)
	syncer.sendToBeaconGUIDRWM.RLock()
	defer syncer.sendToBeaconGUIDRWM.RUnlock()
	_, ok := syncer.sendToBeaconGUID[key]
	return !ok
}

func (syncer *syncer) CheckAckToBeaconGUIDSlice(slice []byte) bool {
	key := syncer.mapKeyPool.Get().(guid.GUID)
	defer syncer.mapKeyPool.Put(key)
	copy(key[:], slice)
	syncer.ackToBeaconGUIDRWM.RLock()
	defer syncer.ackToBeaconGUIDRWM.RUnlock()
	_, ok := syncer.ackToBeaconGUID[key]
	return !ok
}

func (syncer *syncer) CheckAnswerGUIDSlice(slice []byte) bool {
	key := syncer.mapKeyPool.Get().(guid.GUID)
	defer syncer.mapKeyPool.Put(key)
	copy(key[:], slice)
	syncer.answerGUIDRWM.RLock()
	defer syncer.answerGUIDRWM.RUnlock()
	_, ok := syncer.answerGUID[key]
	return !ok
}

func (syncer *syncer) CheckSendToBeaconGUID(guid *guid.GUID, timestamp int64) bool {
	syncer.sendToBeaconGUIDRWM.Lock()
	defer syncer.sendToBeaconGUIDRWM.Unlock()
	if _, ok := syncer.sendToBeaconGUID[*guid]; ok {
		return false
	}
	syncer.sendToBeaconGUID[*guid] = timestamp
	return true
}

func (syncer *syncer) CheckAckToBeaconGUID(guid *guid.GUID, timestamp int64) bool {
	syncer.ackToBeaconGUIDRWM.Lock()
	defer syncer.ackToBeaconGUIDRWM.Unlock()
	if _, ok := syncer.ackToBeaconGUID[*guid]; ok {
		return false
	}
	syncer.ackToBeaconGUID[*guid] = timestamp
	return true
}

func (syncer *syncer) CheckAnswerGUID(guid *guid.GUID, timestamp int64) bool {
	syncer.answerGUIDRWM.Lock()
	defer syncer.answerGUIDRWM.Unlock()
	if _, ok := syncer.answerGUID[*guid]; ok {
		return false
	}
	syncer.answerGUID[*guid] = timestamp
	return true
}

func (syncer *syncer) Close() {
	close(syncer.stopSignal)
	syncer.wg.Wait()
	syncer.ctx = nil
}

// guidCleaner is use to clean expire guid
func (syncer *syncer) guidCleaner() {
	defer func() {
		if r := recover(); r != nil {
			err := xpanic.Error(r, "syncer.guidCleaner")
			syncer.ctx.logger.Print(logger.Fatal, "syncer", err)
			// restart GUID cleaner
			time.Sleep(time.Second)
			go syncer.guidCleaner()
		} else {
			syncer.wg.Done()
		}
	}()
	ticker := time.NewTicker(time.Second)
	defer ticker.Stop()
	count := 0
	max := int(syncer.expireTime)
	for {
		select {
		case <-ticker.C:
			syncer.cleanGUID()
			count++
			if count > max {
				syncer.cleanGUIDMap()
				count = 0
			}
		case <-syncer.stopSignal:
			return
		}
	}
}

func (syncer *syncer) cleanGUID() {
	now := syncer.ctx.global.Now().Unix()

	syncer.cleanSendToBeaconGUID(now)
	syncer.cleanAckToBeaconGUID(now)
	syncer.cleanAnswerGUID(now)
}

func (syncer *syncer) cleanSendToBeaconGUID(now int64) {
	syncer.sendToBeaconGUIDRWM.Lock()
	defer syncer.sendToBeaconGUIDRWM.Unlock()
	for key, timestamp := range syncer.sendToBeaconGUID {
		if math.Abs(float64(now-timestamp)) > syncer.expireTime {
			delete(syncer.sendToBeaconGUID, key)
		}
	}
}

func (syncer *syncer) cleanAckToBeaconGUID(now int64) {
	syncer.ackToBeaconGUIDRWM.Lock()
	defer syncer.ackToBeaconGUIDRWM.Unlock()
	for key, timestamp := range syncer.ackToBeaconGUID {
		if math.Abs(float64(now-timestamp)) > syncer.expireTime {
			delete(syncer.ackToBeaconGUID, key)
		}
	}
}

func (syncer *syncer) cleanAnswerGUID(now int64) {
	syncer.answerGUIDRWM.Lock()
	defer syncer.answerGUIDRWM.Unlock()
	for key, timestamp := range syncer.answerGUID {
		if math.Abs(float64(now-timestamp)) > syncer.expireTime {
			delete(syncer.answerGUID, key)
		}
	}
}

func (syncer *syncer) cleanGUIDMap() {
	syncer.cleanSendToBeaconGUIDMap()
	syncer.cleanAckToBeaconGUIDMap()
	syncer.cleanAnswerGUIDMap()
}

func (syncer *syncer) cleanSendToBeaconGUIDMap() {
	syncer.sendToBeaconGUIDRWM.Lock()
	defer syncer.sendToBeaconGUIDRWM.Unlock()
	newMap := make(map[guid.GUID]int64)
	for key, timestamp := range syncer.sendToBeaconGUID {
		newMap[key] = timestamp
	}
	syncer.sendToBeaconGUID = newMap
}

func (syncer *syncer) cleanAckToBeaconGUIDMap() {
	syncer.ackToBeaconGUIDRWM.Lock()
	defer syncer.ackToBeaconGUIDRWM.Unlock()
	newMap := make(map[guid.GUID]int64)
	for key, timestamp := range syncer.ackToBeaconGUID {
		newMap[key] = timestamp
	}
	syncer.ackToBeaconGUID = newMap
}

func (syncer *syncer) cleanAnswerGUIDMap() {
	syncer.answerGUIDRWM.Lock()
	defer syncer.answerGUIDRWM.Unlock()
	newMap := make(map[guid.GUID]int64)
	for key, timestamp := range syncer.answerGUID {
		newMap[key] = timestamp
	}
	syncer.answerGUID = newMap
}
